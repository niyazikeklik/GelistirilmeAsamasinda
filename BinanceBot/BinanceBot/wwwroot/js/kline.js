/**
 * @license
 * KLineChart v8.3.0
 * Copyright (c) 2019 lihu.
 * Licensed under Apache License 2.0 https://www.apache.org/licenses/LICENSE-2.0
 */
!function (t, e) { "object" == typeof exports && "undefined" != typeof module ? e(exports) : "function" == typeof define && define.amd ? define(["exports"], e) : e((t = "undefined" != typeof globalThis ? globalThis : t || self).klinecharts = {}) }(this, (function (t) { "use strict"; var e = { name: "BBI", shortName: "BBI", series: "price", precision: 2, calcParams: [3, 6, 12, 24], shouldCheckParamCount: !0, shouldOhlc: !0, plots: [{ key: "bbi", title: "BBI: ", type: "line" }], calcTechnicalIndicator: function (t, e) { var i = e.params, n = Math.max.apply(null, i), r = [], a = []; return t.map((function (e, o) { var s = {}, c = e.close; if (i.forEach((function (e, i) { r[i] = (r[i] || 0) + c, e - 1 > o || (a[i] = r[i] / e, r[i] -= t[o - (e - 1)].close) })), o >= n - 1) { var h = 0; a.forEach((function (t) { h += t })), s.bbi = h / 4 } return s })) } }, i = { name: "DMA", shortName: "DMA", calcParams: [10, 50, 10], plots: [{ key: "dma", title: "DMA: ", type: "line" }, { key: "ama", title: "AMA: ", type: "line" }], calcTechnicalIndicator: function (t, e) { var i = e.params, n = Math.max(i[0], i[1]), r = 0, a = 0, o = 0, s = []; return t.forEach((function (e, c) { var h, l, u = {}, f = e.close; if (r += f, a += f, i[0] - 1 > c || (h = r / i[0], r -= t[c - (i[0] - 1)].close), i[1] - 1 > c || (l = a / i[1], a -= t[c - (i[1] - 1)].close), c >= n - 1) { var d = h - l; u.dma = d, o += d, n + i[2] - 2 > c || (u.ama = o / i[2], o -= s[c - (i[2] - 1)].dma) } s.push(u) })), s } }, n = { name: "DMI", shortName: "DMI", calcParams: [14, 6], plots: [{ key: "pdi", title: "PDI: ", type: "line" }, { key: "mdi", title: "MDI: ", type: "line" }, { key: "adx", title: "ADX: ", type: "line" }, { key: "adxr", title: "ADXR: ", type: "line" }], calcTechnicalIndicator: function (t, e) { var i = e.params, n = 0, r = 0, a = 0, o = 0, s = 0, c = 0, h = 0, l = 0, u = []; return t.forEach((function (e, f) { var d = {}, v = t[f - 1] || e, p = v.close, _ = e.high, y = e.low, m = _ - y, x = Math.abs(_ - p), g = Math.abs(p - y), S = _ - v.high, k = v.low - y, b = Math.max(Math.max(m, x), g), w = S > 0 && S > k ? S : 0, E = k > 0 && k > S ? k : 0; if (n += b, r += w, a += E, f >= i[0] - 1) { f > i[0] - 1 ? (o = o - o / i[0] + b, s = s - s / i[0] + w, c = c - c / i[0] + E) : (o = n, s = r, c = a); var P = 0, C = 0; 0 !== o && (P = 100 * s / o, C = 100 * c / o), d.pdi = P, d.mdi = C; var A = 0; C + P !== 0 && (A = Math.abs(C - P) / (C + P) * 100), h += A, 2 * i[0] - 2 > f || (d.adx = l = f > 2 * i[0] - 2 ? (l * (i[0] - 1) + A) / i[0] : h / i[0], 2 * i[0] + i[1] - 3 > f || (d.adxr = (u[f - (i[1] - 1)].adx + l) / 2)) } u.push(d) })), u } }, r = { name: "MACD", shortName: "MACD", calcParams: [12, 26, 9], plots: [{ key: "dif", title: "DIF: ", type: "line" }, { key: "dea", title: "DEA: ", type: "line" }, { key: "macd", title: "MACD: ", type: "bar", baseValue: 0, color: function (t, e) { var i = (t.current.technicalIndicatorData || {}).macd; return i > 0 ? e.bar.upColor : 0 > i ? e.bar.downColor : e.bar.noChangeColor }, isStroke: function (t) { return (t.current.technicalIndicatorData || {}).macd > (t.prev.technicalIndicatorData || {}).macd } }], calcTechnicalIndicator: function (t, e) { var i, n, r = e.params, a = 0, o = 0, s = 0, c = 0, h = Math.max(r[0], r[1]); return t.map((function (t, e) { var l = {}, u = t.close; return a += u, r[0] - 1 > e || (i = e > r[0] - 1 ? (2 * u + (r[0] - 1) * i) / (r[0] + 1) : a / r[0]), r[1] - 1 > e || (n = e > r[1] - 1 ? (2 * u + (r[1] - 1) * n) / (r[1] + 1) : a / r[1]), h - 1 > e || (l.dif = o = i - n, s += o, h + r[2] - 2 > e || (l.macd = 2 * (o - (c = e > h + r[2] - 2 ? (2 * o + c * (r[2] - 1)) / (r[2] + 1) : s / r[2])), l.dea = c)), l })) } }, a = { name: "CR", shortName: "CR", calcParams: [26, 10, 20, 40, 60], plots: [{ key: "cr", title: "CR: ", type: "line" }, { key: "ma1", title: "MA1: ", type: "line" }, { key: "ma2", title: "MA2: ", type: "line" }, { key: "ma3", title: "MA3: ", type: "line" }, { key: "ma4", title: "MA4: ", type: "line" }], calcTechnicalIndicator: function (t, e) { var i = e.params, n = Math.ceil(i[1] / 2.5 + 1), r = Math.ceil(i[2] / 2.5 + 1), a = Math.ceil(i[3] / 2.5 + 1), o = Math.ceil(i[4] / 2.5 + 1), s = 0, c = [], h = 0, l = [], u = 0, f = [], d = 0, v = [], p = []; return t.forEach((function (e, _) { var y = {}, m = t[_ - 1] || e, x = (m.high + m.close + m.low + m.open) / 4, g = Math.max(0, e.high - x), S = Math.max(0, x - e.low); i[0] - 1 > _ || (y.cr = 0 !== S ? g / S * 100 : 0, s += y.cr, h += y.cr, u += y.cr, d += y.cr, i[0] + i[1] - 2 > _ || (c.push(s / i[1]), i[0] + i[1] + n - 3 > _ || (y.ma1 = c[c.length - 1 - n]), s -= p[_ - (i[1] - 1)].cr), i[0] + i[2] - 2 > _ || (l.push(h / i[2]), i[0] + i[2] + r - 3 > _ || (y.ma2 = l[l.length - 1 - r]), h -= p[_ - (i[2] - 1)].cr), i[0] + i[3] - 2 > _ || (f.push(u / i[3]), i[0] + i[3] + a - 3 > _ || (y.ma3 = f[f.length - 1 - a]), u -= p[_ - (i[3] - 1)].cr), i[0] + i[4] - 2 > _ || (v.push(d / i[4]), i[0] + i[4] + o - 3 > _ || (y.ma4 = v[v.length - 1 - o]), d -= p[_ - (i[4] - 1)].cr)), p.push(y) })), p } }, o = { name: "AO", shortName: "AO", calcParams: [5, 34], shouldCheckParamCount: !0, plots: [{ key: "ao", title: "AO: ", type: "bar", baseValue: 0, color: function (t, e) { return (t.current.technicalIndicatorData || {}).ao > (t.prev.technicalIndicatorData || {}).ao ? e.bar.upColor : e.bar.downColor }, isStroke: function (t) { return (t.current.technicalIndicatorData || {}).ao > (t.prev.technicalIndicatorData || {}).ao } }], calcTechnicalIndicator: function (t, e) { var i = e.params, n = Math.max(i[0], i[1]), r = 0, a = 0, o = 0, s = 0; return t.map((function (e, c) { var h = {}, l = (e.low + e.high) / 2; if (r += l, a += l, c >= i[0] - 1) { o = r / i[0]; var u = t[c - (i[0] - 1)]; r -= (u.low + u.high) / 2 } if (c >= i[1] - 1) { s = a / i[1]; var f = t[c - (i[1] - 1)]; a -= (f.low + f.high) / 2 } return n - 1 > c || (h.ao = o - s), h })) } }, s = { name: "CCI", shortName: "CCI", calcParams: [20], plots: [{ key: "cci", title: "CCI: ", type: "line" }], calcTechnicalIndicator: function (t, e) { var i = e.params, n = i[0] - 1, r = 0, a = []; return t.map((function (e, o) { var s = {}, c = (e.high + e.low + e.close) / 3; if (r += c, a.push(c), o >= n) { var h = r / i[0], l = a.slice(o - n, o + 1), u = 0; l.forEach((function (t) { u += Math.abs(t - h) })); var f = u / i[0]; s.cci = 0 !== f ? (c - h) / f / .015 : 0, r -= (t[o - n].high + t[o - n].low + t[o - n].close) / 3 } return s })) } }, c = { name: "RSI", shortName: "RSI", calcParams: [6, 12, 24], shouldCheckParamCount: !1, plots: [{ key: "rsi1", title: "RSI1: ", type: "line" }, { key: "rsi2", title: "RSI2: ", type: "line" }, { key: "rsi3", title: "RSI3: ", type: "line" }], regeneratePlots: function (t) { return t.map((function (t, e) { var i = e + 1; return { key: "rsi".concat(i), title: "RSI".concat(i, ": "), type: "line" } })) }, calcTechnicalIndicator: function (t, e) { var i = e.params, n = e.plots, r = [], a = []; return t.map((function (e, o) { var s = {}, c = e.close - (t[o - 1] || e).close; return i.forEach((function (e, i) { if (c > 0 ? r[i] = (r[i] || 0) + c : a[i] = (a[i] || 0) + Math.abs(c), o >= e - 1) { s[n[i].key] = 0 !== a[i] ? 100 - 100 / (1 + r[i] / a[i]) : 0; var h = t[o - (e - 1)], l = h.close - (t[o - e] || h).close; l > 0 ? r[i] -= l : a[i] -= Math.abs(l) } })), s })) } }; function h() { var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [], e = Number.MIN_SAFE_INTEGER, i = Number.MAX_SAFE_INTEGER; return t.forEach((function (t) { e = Math.max(t.high, e), i = Math.min(t.low, i) })), { hn: e, ln: i } } var l = { name: "KDJ", shortName: "KDJ", calcParams: [9, 3, 3], plots: [{ key: "k", title: "K: ", type: "line" }, { key: "d", title: "D: ", type: "line" }, { key: "j", title: "J: ", type: "line" }], calcTechnicalIndicator: function (t, e) { var i = e.params, n = []; return t.forEach((function (e, r) { var a = {}, o = e.close; if (r >= i[0] - 1) { var s = h(t.slice(r - (i[0] - 1), r + 1)), c = s.ln, l = s.hn - c; a.k = ((i[1] - 1) * (n[r - 1].k || 50) + (o - c) / (0 === l ? 1 : l) * 100) / i[1], a.d = ((i[2] - 1) * (n[r - 1].d || 50) + a.k) / i[2], a.j = 3 * a.k - 2 * a.d } n.push(a) })), n } }, u = { name: "WR", shortName: "WR", calcParams: [6, 10, 14], shouldCheckParamCount: !1, plots: [{ key: "wr1", title: "WR1: ", type: "line" }, { key: "wr2", title: "WR2: ", type: "line" }, { key: "wr3", title: "WR3: ", type: "line" }], regeneratePlots: function (t) { return t.map((function (t, e) { return { key: "wr".concat(e + 1), title: "WR".concat(e + 1, ": "), type: "line" } })) }, calcTechnicalIndicator: function (t, e) { var i = e.params, n = e.plots; return t.map((function (e, r) { var a = {}, o = e.close; return i.forEach((function (e, i) { var s = e - 1; if (r >= s) { var c = h(t.slice(r - s, r + 1)), l = c.hn, u = l - c.ln; a[n[i].key] = 0 === u ? 0 : (o - l) / u * 100 } })), a })) } }; var f = { name: "BOLL", shortName: "BOLL", calcParams: [20, { value: 2, allowDecimal: !0 }], precision: 2, shouldOhlc: !0, plots: [{ key: "up", title: "UP: ", type: "line" }, { key: "mid", title: "MID: ", type: "line" }, { key: "dn", title: "DN: ", type: "line" }], calcTechnicalIndicator: function (t, e) { var i = e.params, n = i[0] - 1, r = 0; return t.map((function (e, a) { var o = {}; if (r += e.close, a >= n) { o.mid = r / i[0]; var s = function (t, e) { var i = t.length, n = 0; t.forEach((function (t) { var i = t.close - e; n += i * i })); var r = n > 0, a = Math.sqrt((n = Math.abs(n)) / i); return r ? a : -1 * a }(t.slice(a - n, a + 1), o.mid); o.up = o.mid + i[1] * s, o.dn = o.mid - i[1] * s, r -= t[a - n].close } return o })) } }, d = { name: "SAR", shortName: "SAR", series: "price", calcParams: [2, 2, 20], precision: 2, shouldOhlc: !0, plots: [{ key: "sar", title: "SAR: ", type: "circle", color: function (t, e) { var i = t.current, n = i.kLineData || {}; return (n.high + n.low) / 2 > (i.technicalIndicatorData || {}).sar ? e.circle.upColor : e.circle.downColor } }], calcTechnicalIndicator: function (t, e) { var i = e.params, n = i[0] / 100, r = i[1] / 100, a = i[2] / 100, o = n, s = -100, c = !1, h = 0; return t.map((function (e, i) { var l = h, u = e.high, f = e.low; if (c) { (-100 === s || u > s) && (s = u, o = Math.min(o + r, a)), h = l + o * (s - l); var d = Math.min(t[Math.max(1, i) - 1].low, f); h > e.low ? (h = s, o = n, s = -100, c = !c) : h > d && (h = d) } else { (-100 === s || s > f) && (s = f, o = Math.min(o + r, a)), h = l + o * (s - l); var v = Math.max(t[Math.max(1, i) - 1].high, u); e.high > h ? (h = s, o = 0, s = -100, c = !c) : v > h && (h = v) } return { sar: h } })) } }, v = { technicalIndicatorExtensions: {}, shapeExtensions: {}, addTechnicalIndicatorTemplate: function (t) { var e = this; t && [].concat(t).forEach((function (t) { t.name && (e.technicalIndicatorExtensions[t.name] = t) })) }, addShapeTemplate: function (t) { var e = this; t && [].concat(t).forEach((function (t) { t.name && (e.shapeExtensions[t.name] = t) })) } }; function p(t, e) { if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function") } function _(t, e) { for (var i = 0; e.length > i; i++) { var n = e[i]; n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(t, n.key, n) } } function y(t, e, i) { return e && _(t.prototype, e), i && _(t, i), Object.defineProperty(t, "prototype", { writable: !1 }), t } function m(t) { return m = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (t) { return typeof t } : function (t) { return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t }, m(t) } function x(t, e) { if (b(t) && b(e)) for (var i in e) if (Object.prototype.hasOwnProperty.call(e, i) && i in t) { var n = t[i], r = e[i]; b(r) && b(n) && !S(r) && !S(n) ? x(n, r) : E(e[i]) && (t[i] = e[i]) } } function g(t) { if (!b(t)) return t; var e; for (var i in e = S(t) ? [] : {}, t) if (Object.prototype.hasOwnProperty.call(t, i)) { var n = t[i]; e[i] = b(n) ? g(n) : n } return e } function S(t) { return "[object Array]" === Object.prototype.toString.call(t) } function k(t) { return t && "function" == typeof t } function b(t) { return !!t && "object" === m(t) } function w(t) { return "number" == typeof t && !isNaN(t) } function E(t) { return null != t } function P(t) { return "boolean" == typeof t } function C(t) { return "string" == typeof t } var A = "stroke", I = "fill", T = "dash", M = "solid", O = "left", D = "right", R = "normal", L = "percentage", B = "log", F = "candle_solid", z = "candle_stroke", V = "candle_up_stroke", j = "candle_down_stroke", H = "ohlc", N = "area", Y = "always", W = "follow_cross", X = "rect", G = "standard", U = "circle", Z = "rect", K = "triangle", q = "diamond", $ = "custom", J = "point", Q = "top", tt = "bottom", et = { grid: { show: !0, horizontal: { show: !0, size: 1, color: "#EDEDED", style: T, dashValue: [2, 2] }, vertical: { show: !0, size: 1, color: "#EDEDED", style: T, dashValue: [2, 2] } }, candle: { margin: { top: .2, bottom: .1 }, type: F, bar: { upColor: "#26A69A", downColor: "#EF5350", noChangeColor: "#999999" }, area: { lineSize: 2, lineColor: "#2196F3", value: "close", backgroundColor: [{ offset: 0, color: "rgba(33, 150, 243, 0.01)" }, { offset: 1, color: "rgba(33, 150, 243, 0.2)" }] }, priceMark: { show: !0, high: { show: !0, color: "#76808F", textMargin: 5, textSize: 10, textFamily: "Helvetica Neue", textWeight: "normal" }, low: { show: !0, color: "#76808F", textMargin: 5, textSize: 10, textFamily: "Helvetica Neue", textWeight: "normal" }, last: { show: !0, upColor: "#26A69A", downColor: "#EF5350", noChangeColor: "#888888", line: { show: !0, style: T, dashValue: [4, 4], size: 1 }, text: { show: !0, size: 12, paddingLeft: 2, paddingTop: 2, paddingRight: 2, paddingBottom: 2, color: "#FFFFFF", family: "Helvetica Neue", weight: "normal", borderRadius: 2 } } }, tooltip: { showRule: Y, showType: G, labels: ["时间: ", "开: ", "收: ", "高: ", "低: ", "成交量: "], values: null, defaultValue: "n/a", rect: { paddingLeft: 0, paddingRight: 0, paddingTop: 0, paddingBottom: 6, offsetLeft: 8, offsetTop: 8, offsetRight: 8, borderRadius: 4, borderSize: 1, borderColor: "#F2F3F5", backgroundColor: "#FEFEFE" }, text: { size: 12, family: "Helvetica Neue", weight: "normal", color: "#76808F", marginLeft: 8, marginTop: 6, marginRight: 8, marginBottom: 0 } } }, technicalIndicator: { margin: { top: .2, bottom: .1 }, bar: { upColor: "rgba(38, 166, 154, .65)", downColor: "rgba(239, 83, 80, .65)", noChangeColor: "#888888" }, line: { size: 1, colors: ["#FF9600", "#9D65C9", "#2196F3", "#E11D74", "#01C5C4"] }, circle: { upColor: "rgba(38, 166, 154, .65)", downColor: "rgba(239, 83, 80, .65)", noChangeColor: "#888888" }, lastValueMark: { show: !1, text: { show: !1, color: "#FFFFFF", size: 12, family: "Helvetica Neue", weight: "normal", paddingLeft: 3, paddingTop: 2, paddingRight: 3, paddingBottom: 2, borderRadius: 2 } }, tooltip: { showRule: Y, showType: G, showName: !0, showParams: !0, defaultValue: "n/a", text: { size: 12, family: "Helvetica Neue", weight: "normal", color: "#76808F", marginTop: 6, marginRight: 8, marginBottom: 0, marginLeft: 8 } } }, xAxis: { show: !0, height: null, axisLine: { show: !0, color: "#DDDDDD", size: 1 }, tickText: { show: !0, color: "#76808F", size: 12, family: "Helvetica Neue", weight: "normal", paddingTop: 3, paddingBottom: 6 }, tickLine: { show: !0, size: 1, length: 3, color: "#DDDDDD" } }, yAxis: { show: !0, width: null, type: R, position: D, inside: !1, axisLine: { show: !0, color: "#DDDDDD", size: 1 }, tickText: { show: !0, color: "#76808F", size: 12, family: "Helvetica Neue", weight: "normal", paddingLeft: 3, paddingRight: 6 }, tickLine: { show: !0, size: 1, length: 3, color: "#DDDDDD" } }, separator: { size: 1, color: "#DDDDDD", fill: !0, activeBackgroundColor: "rgba(33, 150, 243, 0.08)" }, crosshair: { show: !0, horizontal: { show: !0, line: { show: !0, style: T, dashValue: [4, 2], size: 1, color: "#76808F" }, text: { show: !0, color: "#FFFFFF", size: 12, family: "Helvetica Neue", weight: "normal", paddingLeft: 2, paddingRight: 2, paddingTop: 2, paddingBottom: 2, borderSize: 1, borderColor: "#686D76", borderRadius: 2, backgroundColor: "#686D76" } }, vertical: { show: !0, line: { show: !0, style: T, dashValue: [4, 2], size: 1, color: "#76808F" }, text: { show: !0, color: "#FFFFFF", size: 12, family: "Helvetica Neue", weight: "normal", paddingLeft: 2, paddingRight: 2, paddingTop: 2, paddingBottom: 2, borderSize: 1, borderRadius: 2, borderColor: "#686D76", backgroundColor: "#686D76" } } }, shape: { point: { backgroundColor: "#2196F3", borderColor: "rgba(33, 150, 243, 0.35)", borderSize: 1, radius: 5, activeBackgroundColor: "#2196F3", activeBorderColor: "rgba(33, 150, 243, 0.35)", activeBorderSize: 3, activeRadius: 5 }, line: { style: M, color: "#2196F3", size: 1, dashValue: [2, 2] }, polygon: { style: A, stroke: { style: M, size: 1, color: "#2196F3", dashValue: [2, 2] }, fill: { color: "#2196F3" } }, arc: { style: A, stroke: { style: M, size: 1, color: "#2196F3", dashValue: [2, 2] }, fill: { color: "#2196F3" } }, text: { style: I, color: "#2196F3", size: 12, family: "Helvetica Neue", weight: "normal", offset: [0, 0] } }, annotation: { position: Q, offset: [20, 0], symbol: { type: q, size: 8, color: "#2196F3", activeSize: 10, activeColor: "#FF9600" } }, tag: { position: J, offset: 0, line: { show: !0, style: T, dashValue: [4, 2], size: 1, color: "#2196F3" }, text: { color: "#FFFFFF", backgroundColor: "#2196F3", size: 12, family: "Helvetica Neue", weight: "normal", paddingLeft: 2, paddingRight: 2, paddingTop: 2, paddingBottom: 2, borderRadius: 2, borderSize: 1, borderColor: "#2196F3" }, mark: { offset: 0, color: "#FFFFFF", backgroundColor: "#2196F3", size: 12, family: "Helvetica Neue", weight: "normal", paddingLeft: 2, paddingRight: 2, paddingTop: 2, paddingBottom: 2, borderRadius: 2, borderSize: 1, borderColor: "#2196F3" } } }; function it(t, e) { var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "--"; if (b(t)) { var n = t[e]; if (E(n)) return n } return i } function nt(t, e) { var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "MM-DD hh:mm"; if (w(e)) { var n = t.format(new Date(e)), r = n.split(", "), a = r[0].split("/"), o = { YYYY: a[2], MM: a[0], DD: a[1], "hh:mm": "24" === r[1].match(/^[\d]{2}/)[0] ? r[1].replace(/^[\d]{2}/, "00") : r[1] }; return i.replace(/YYYY|MM|DD|(hh:mm)/g, (function (t) { return o[t] })) } return "--" } function rt(t) { var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 2, i = +t; return (i || 0 === i) && w(i) ? i.toFixed(e) : "".concat(i) } function at(t) { return w(+t) ? t > 1e9 ? "".concat(+(t / 1e9).toFixed(3), "B") : t > 1e6 ? "".concat(+(t / 1e6).toFixed(3), "M") : t > 1e3 ? "".concat(+(t / 1e3).toFixed(3), "K") : t : "--" } function ot(t, e) { return null == e && (e = 10), +(t = (+t).toFixed(e = Math.min(Math.max(0, e), 20))) } function st(t) { return Math.log(t) / Math.log(10) } function ct(t) { return Math.pow(10, t) } var ht = { ZOOM: "zoom", SCROLL: "scroll", CROSSHAIR: "crosshair", TOOLTIP: "tooltip", PANE_DRAG: "pane_drag" }; function lt(t) { return Object.values(ht).indexOf(t) > -1 } var ut = function () { function t(e) { p(this, t), this._chartStore = e, this._dateTimeFormat = new Intl.DateTimeFormat("en", { hour12: !1, year: "numeric", month: "2-digit", day: "2-digit", hour: "2-digit", minute: "2-digit" }), this._zoomEnabled = !0, this._scrollEnabled = !0, this._loading = !0, this._loadMoreCallback = null, this._more = !0, this._totalDataSpace = 0, this._dataSpace = 6, this._barSpace = this._calcBarSpace(), this._offsetRightSpace = 50, this._offsetRightBarCount = this._offsetRightSpace / this._dataSpace, this._leftMinVisibleBarCount = 2, this._rightMinVisibleBarCount = 2, this._from = 0, this._to = 0, this._preOffsetRightBarCount = 0 } return y(t, [{ key: "_calcBarSpace", value: function () { return Math.max(1, Math.min(Math.floor(.82 * this._dataSpace), Math.floor(this._dataSpace) - 1)) } }, { key: "adjustFromTo", value: function () { var t = this._chartStore.dataList().length, e = this._totalDataSpace / this._dataSpace, i = e - Math.min(this._leftMinVisibleBarCount, t); this._offsetRightBarCount > i && (this._offsetRightBarCount = i); var n = -t + Math.min(this._rightMinVisibleBarCount, t); n > this._offsetRightBarCount && (this._offsetRightBarCount = n), this._to = Math.round(this._offsetRightBarCount + t + .5), this._from = Math.round(this._to - e) - 1, this._to > t && (this._to = t), 0 > this._from && (this._from = 0), this._chartStore.adjustVisibleDataList(), 0 === this._from && this._more && !this._loading && k(this._loadMoreCallback) && (this._loading = !0, this._loadMoreCallback(it(this._chartStore.dataList()[0], "timestamp"))) } }, { key: "setMore", value: function (t) { this._more = t } }, { key: "setLoading", value: function (t) { this._loading = t } }, { key: "dateTimeFormat", value: function () { return this._dateTimeFormat } }, { key: "setTimezone", value: function (t) { var e; try { e = new Intl.DateTimeFormat("en", { hour12: !1, timeZone: t, year: "numeric", month: "2-digit", day: "2-digit", hour: "2-digit", minute: "2-digit" }) } catch (t) { } e && (this._dateTimeFormat = e) } }, { key: "timezone", value: function () { return this._dateTimeFormat.resolvedOptions().timeZone } }, { key: "dataSpace", value: function () { return this._dataSpace } }, { key: "barSpace", value: function () { return this._barSpace } }, { key: "halfBarSpace", value: function () { return this._barSpace / 2 } }, { key: "setDataSpace", value: function (t, e) { 1 > t || t > 50 || this._dataSpace === t || (this._dataSpace = t, this._barSpace = this._calcBarSpace(), e && e(), this.adjustFromTo(), this._chartStore.crosshairStore().recalculate(!0), this._chartStore.invalidate()) } }, { key: "setTotalDataSpace", value: function (t) { this._totalDataSpace !== t && (this._totalDataSpace = t, this.adjustFromTo(), this._chartStore.crosshairStore().recalculate(!0)) } }, { key: "setOffsetRightSpace", value: function (t, e) { this._offsetRightSpace = t, this._offsetRightBarCount = t / this._dataSpace, e && (this.adjustFromTo(), this._chartStore.crosshairStore().recalculate(!0), this._chartStore.invalidate()) } }, { key: "resetOffsetRightSpace", value: function () { this.setOffsetRightSpace(this._offsetRightSpace) } }, { key: "offsetRightSpace", value: function () { return this._offsetRightSpace } }, { key: "offsetRightBarCount", value: function () { return this._offsetRightBarCount } }, { key: "setOffsetRightBarCount", value: function (t) { this._offsetRightBarCount = t } }, { key: "setLeftMinVisibleBarCount", value: function (t) { this._leftMinVisibleBarCount = t } }, { key: "setRightMinVisibleBarCount", value: function (t) { this._rightMinVisibleBarCount = t } }, { key: "from", value: function () { return this._from } }, { key: "to", value: function () { return this._to } }, { key: "startScroll", value: function () { this._preOffsetRightBarCount = this._offsetRightBarCount } }, { key: "scroll", value: function (t, e) { if (this._scrollEnabled) { var i = t / this._dataSpace; this._chartStore.actionStore().execute(ht.SCROLL, { barCount: i, distance: t }), this._offsetRightBarCount = this._preOffsetRightBarCount - i, this.adjustFromTo(); var n = e || this._chartStore.crosshairStore().get(); this._chartStore.crosshairStore().set(n, !0), this._chartStore.invalidate() } } }, { key: "getDataByDataIndex", value: function (t) { return this._chartStore.dataList()[t] } }, { key: "coordinateToFloatIndex", value: function (t) { var e = this._chartStore.dataList().length; return Math.round(1e6 * (e + this._offsetRightBarCount - (this._totalDataSpace - t) / this._dataSpace)) / 1e6 } }, { key: "dataIndexToTimestamp", value: function (t) { var e = this.getDataByDataIndex(t); if (e) return e.timestamp } }, { key: "timestampToDataIndex", value: function (t) { return 0 === this._chartStore.dataList().length ? 0 : function (t, e, i) { var n = 0, r = 0; for (r = t.length - 1; n !== r;) { var a = Math.floor((r + n) / 2), o = r - n, s = t[a][e]; if (i === t[n][e]) return n; if (i === t[r][e]) return r; if (i === s) return a; if (i > s ? n = a : r = a, 2 >= o) break } return n }(this._chartStore.dataList(), "timestamp", t) } }, { key: "dataIndexToCoordinate", value: function (t) { var e = this._chartStore.dataList().length; return this._totalDataSpace - (e + this._offsetRightBarCount - t - .5) * this._dataSpace } }, { key: "coordinateToDataIndex", value: function (t) { return Math.ceil(this.coordinateToFloatIndex(t)) - 1 } }, { key: "zoom", value: function (t, e) { var i = this; if (this._zoomEnabled) { if (!e || !E(e.x)) { var n = this._chartStore.crosshairStore().get(); e = { x: E(n.x) ? n.x : this._totalDataSpace / 2 } } this._chartStore.actionStore().execute(ht.ZOOM, { coordinate: e, scale: t }); var r = this.coordinateToFloatIndex(e.x); this.setDataSpace(this._dataSpace + t * (this._dataSpace / 10), (function () { i._offsetRightBarCount += r - i.coordinateToFloatIndex(e.x) })) } } }, { key: "setZoomEnabled", value: function (t) { this._zoomEnabled = t } }, { key: "zoomEnabled", value: function () { return this._zoomEnabled } }, { key: "setScrollEnabled", value: function (t) { this._scrollEnabled = t } }, { key: "scrollEnabled", value: function () { return this._scrollEnabled } }, { key: "setLoadMoreCallback", value: function (t) { this._loadMoreCallback = t } }, { key: "clear", value: function () { this._more = !0, this._loading = !0, this._from = 0, this._to = 0 } }]), t }(); function ft(t, e) { return ft = Object.setPrototypeOf || function (t, e) { return t.__proto__ = e, t }, ft(t, e) } function dt(t, e) { if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, "prototype", { writable: !1 }), e && ft(t, e) } function vt(t, e) { if (e && ("object" === m(e) || "function" == typeof e)) return e; if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined"); return function (t) { if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return t }(t) } function pt(t) { return pt = Object.setPrototypeOf ? Object.getPrototypeOf : function (t) { return t.__proto__ || Object.getPrototypeOf(t) }, pt(t) } function _t(t, e, i, n, r, a, o) { try { var s = t[a](o), c = s.value } catch (t) { return void i(t) } s.done ? e(c) : Promise.resolve(c).then(n, r) } var yt = { exports: {} }; !function (t) { var e = function (t) { var e, i = Object.prototype, n = i.hasOwnProperty, r = "function" == typeof Symbol ? Symbol : {}, a = r.iterator || "@@iterator", o = r.asyncIterator || "@@asyncIterator", s = r.toStringTag || "@@toStringTag"; function c(t, e, i) { return Object.defineProperty(t, e, { value: i, enumerable: !0, configurable: !0, writable: !0 }), t[e] } try { c({}, "") } catch (t) { c = function (t, e, i) { return t[e] = i } } function h(t, e, i, n) { var r = Object.create((e && e.prototype instanceof _ ? e : _).prototype), a = new A(n || []); return r._invoke = function (t, e, i) { var n = u; return function (r, a) { if (n === d) throw Error("Generator is already running"); if (n === v) { if ("throw" === r) throw a; return T() } for (i.method = r, i.arg = a; ;) { var o = i.delegate; if (o) { var s = E(o, i); if (s) { if (s === p) continue; return s } } if ("next" === i.method) i.sent = i._sent = i.arg; else if ("throw" === i.method) { if (n === u) throw n = v, i.arg; i.dispatchException(i.arg) } else "return" === i.method && i.abrupt("return", i.arg); n = d; var c = l(t, e, i); if ("normal" === c.type) { if (n = i.done ? v : f, c.arg === p) continue; return { value: c.arg, done: i.done } } "throw" === c.type && (n = v, i.method = "throw", i.arg = c.arg) } } }(t, i, a), r } function l(t, e, i) { try { return { type: "normal", arg: t.call(e, i) } } catch (t) { return { type: "throw", arg: t } } } t.wrap = h; var u = "suspendedStart", f = "suspendedYield", d = "executing", v = "completed", p = {}; function _() { } function y() { } function m() { } var x = {}; c(x, a, (function () { return this })); var g = Object.getPrototypeOf, S = g && g(g(I([]))); S && S !== i && n.call(S, a) && (x = S); var k = m.prototype = _.prototype = Object.create(x); function b(t) { ["next", "throw", "return"].forEach((function (e) { c(t, e, (function (t) { return this._invoke(e, t) })) })) } function w(t, e) { function i(r, a, o, s) { var c = l(t[r], t, a); if ("throw" !== c.type) { var h = c.arg, u = h.value; return u && "object" == typeof u && n.call(u, "__await") ? e.resolve(u.__await).then((function (t) { i("next", t, o, s) }), (function (t) { i("throw", t, o, s) })) : e.resolve(u).then((function (t) { h.value = t, o(h) }), (function (t) { return i("throw", t, o, s) })) } s(c.arg) } var r; this._invoke = function (t, n) { function a() { return new e((function (e, r) { i(t, n, e, r) })) } return r = r ? r.then(a, a) : a() } } function E(t, i) { var n = t.iterator[i.method]; if (n === e) { if (i.delegate = null, "throw" === i.method) { if (t.iterator.return && (i.method = "return", i.arg = e, E(t, i), "throw" === i.method)) return p; i.method = "throw", i.arg = new TypeError("The iterator does not provide a 'throw' method") } return p } var r = l(n, t.iterator, i.arg); if ("throw" === r.type) return i.method = "throw", i.arg = r.arg, i.delegate = null, p; var a = r.arg; return a ? a.done ? (i[t.resultName] = a.value, i.next = t.nextLoc, "return" !== i.method && (i.method = "next", i.arg = e), i.delegate = null, p) : a : (i.method = "throw", i.arg = new TypeError("iterator result is not an object"), i.delegate = null, p) } function P(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e) } function C(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e } function A(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(P, this), this.reset(!0) } function I(t) { if (t) { var i = t[a]; if (i) return i.call(t); if ("function" == typeof t.next) return t; if (!isNaN(t.length)) { var r = -1, o = function i() { for (; ++r < t.length;)if (n.call(t, r)) return i.value = t[r], i.done = !1, i; return i.value = e, i.done = !0, i }; return o.next = o } } return { next: T } } function T() { return { value: e, done: !0 } } return y.prototype = m, c(k, "constructor", m), c(m, "constructor", y), y.displayName = c(m, s, "GeneratorFunction"), t.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === y || "GeneratorFunction" === (e.displayName || e.name)) }, t.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, m) : (t.__proto__ = m, c(t, s, "GeneratorFunction")), t.prototype = Object.create(k), t }, t.awrap = function (t) { return { __await: t } }, b(w.prototype), c(w.prototype, o, (function () { return this })), t.AsyncIterator = w, t.async = function (e, i, n, r, a) { void 0 === a && (a = Promise); var o = new w(h(e, i, n, r), a); return t.isGeneratorFunction(i) ? o : o.next().then((function (t) { return t.done ? t.value : o.next() })) }, b(k), c(k, s, "Generator"), c(k, a, (function () { return this })), c(k, "toString", (function () { return "[object Generator]" })), t.keys = function (t) { var e = []; for (var i in t) e.push(i); return e.reverse(), function i() { for (; e.length;) { var n = e.pop(); if (n in t) return i.value = n, i.done = !1, i } return i.done = !0, i } }, t.values = I, A.prototype = { constructor: A, reset: function (t) { if (this.prev = 0, this.next = 0, this.sent = this._sent = e, this.done = !1, this.delegate = null, this.method = "next", this.arg = e, this.tryEntries.forEach(C), !t) for (var i in this) "t" === i.charAt(0) && n.call(this, i) && !isNaN(+i.slice(1)) && (this[i] = e) }, stop: function () { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval }, dispatchException: function (t) { if (this.done) throw t; var i = this; function r(n, r) { return s.type = "throw", s.arg = t, i.next = n, r && (i.method = "next", i.arg = e), !!r } for (var a = this.tryEntries.length - 1; a >= 0; --a) { var o = this.tryEntries[a], s = o.completion; if ("root" === o.tryLoc) return r("end"); if (this.prev >= o.tryLoc) { var c = n.call(o, "catchLoc"), h = n.call(o, "finallyLoc"); if (c && h) { if (o.catchLoc > this.prev) return r(o.catchLoc, !0); if (o.finallyLoc > this.prev) return r(o.finallyLoc) } else if (c) { if (o.catchLoc > this.prev) return r(o.catchLoc, !0) } else { if (!h) throw Error("try statement without catch or finally"); if (o.finallyLoc > this.prev) return r(o.finallyLoc) } } } }, abrupt: function (t, e) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var r = this.tryEntries[i]; if (this.prev >= r.tryLoc && n.call(r, "finallyLoc") && r.finallyLoc > this.prev) { var a = r; break } } !a || "break" !== t && "continue" !== t || a.tryLoc > e || e > a.finallyLoc || (a = null); var o = a ? a.completion : {}; return o.type = t, o.arg = e, a ? (this.method = "next", this.next = a.finallyLoc, p) : this.complete(o) }, complete: function (t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), p }, finish: function (t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var i = this.tryEntries[e]; if (i.finallyLoc === t) return this.complete(i.completion, i.afterLoc), C(i), p } }, catch: function (t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var i = this.tryEntries[e]; if (i.tryLoc === t) { var n = i.completion; if ("throw" === n.type) { var r = n.arg; C(i) } return r } } throw Error("illegal catch attempt") }, delegateYield: function (t, i, n) { return this.delegate = { iterator: I(t), resultName: i, nextLoc: n }, "next" === this.method && (this.arg = e), p } }, t }(t.exports); try { regeneratorRuntime = e } catch (t) { "object" == typeof globalThis ? globalThis.regeneratorRuntime = e : Function("r", "regeneratorRuntime = r")(e) } }(yt); var mt = yt.exports, xt = "line", gt = "bar", St = "circle", kt = { PRICE: "price", VOLUME: "volume", NORMAL: "normal" }; function bt(t, e, i, n, r, a) { var o = a.color, s = a.isStroke, c = { prev: { kLineData: t[i - 1], technicalIndicatorData: e[i - 1] }, current: { kLineData: t[i], technicalIndicatorData: e[i] }, next: { kLineData: t[i + 1], technicalIndicatorData: e[i + 1] } }; return E(n.color) && (o = k(n.color) ? n.color(c, r) || a.color : n.color || a.color), E(n.isStroke) && (s = k(n.isStroke) ? n.isStroke(c) : n.isStroke), { color: o, isStroke: s } } var wt = function () { function t(e) { var i = e.name, n = e.shortName, r = e.series, a = e.calcParams, o = e.plots, s = e.precision, c = e.shouldCheckParamCount, h = e.shouldOhlc, l = e.shouldFormatBigNumber, u = e.minValue, f = e.maxValue, d = e.styles; p(this, t), this.name = i || "", this.shortName = n || i || "", this.series = -1 !== Object.values(kt).indexOf(r) ? r : kt.NORMAL, this.precision = w(s) && s >= 0 ? s : 4, this._precisionFlag = !1, this.calcParams = S(a) ? a : [], this.plots = S(o) ? o : [], this.shouldCheckParamCount = !P(c) || c, this.shouldOhlc = !!P(h) && h, this.shouldFormatBigNumber = !!P(l) && l, this.minValue = u, this.maxValue = f, this.styles = d, this.result = [] } var e, i; return y(t, [{ key: "_createParams", value: function (t) { return t.map((function (t) { return b(t) ? t.value : t })) } }, { key: "setShortName", value: function (t) { return this.shortName !== t && (this.shortName = t, !0) } }, { key: "setPrecision", value: function (t, e) { return !(!w(t) || 0 > t || e && (!e || this._precisionFlag)) && (this.precision = parseInt(t, 10), e || (this._precisionFlag = !0), !0) } }, { key: "setCalcParams", value: function (t) { if (!S(t)) return !1; if (this.shouldCheckParamCount && t.length !== this.calcParams.length) return !1; for (var e = [], i = 0; t.length > i; i++) { var n = t[i], r = void 0, a = void 0; b(n) ? (r = n.value, a = n.allowDecimal) : (r = n, a = !1); var o = this.calcParams[i]; if (b(o) && P(o.allowDecimal) && (a = o.allowDecimal), !w(r) || 0 >= r || !a && parseInt(r, 10) !== r) return !1; e.push({ allowDecimal: a, value: r }) } this.calcParams = e; var s = this.regeneratePlots(this._createParams(e)); return s && S(s) && (this.plots = s), !0 } }, { key: "setShouldOhlc", value: function (t) { return !(!P(t) || this.shouldOhlc === t) && (this.shouldOhlc = t, !0) } }, { key: "setShouldFormatBigNumber", value: function (t) { return !(!P(t) || this.shouldFormatBigNumber === t) && (this.shouldFormatBigNumber = t, !0) } }, { key: "setStyles", value: function (t, e) { return !!b(t) && (this.styles || (this.styles = { margin: g(e.margin), bar: g(e.bar), line: g(e.line), circle: g(e.circle) }), x(this.styles, t), !0) } }, { key: "calc", value: (e = mt.mark((function t(e) { return mt.wrap((function (t) { for (; ;)switch (t.prev = t.next) { case 0: return t.next = 2, this.calcTechnicalIndicator(e, { params: this._createParams(this.calcParams), plots: this.plots }); case 2: if (t.t0 = t.sent, t.t0) { t.next = 5; break } t.t0 = []; case 5: this.result = t.t0; case 6: case "end": return t.stop() } }), t, this) })), i = function () { var t = this, i = arguments; return new Promise((function (n, r) { var a = e.apply(t, i); function o(t) { _t(a, n, r, o, s, "next", t) } function s(t) { _t(a, n, r, o, s, "throw", t) } o(void 0) })) }, function (t) { return i.apply(this, arguments) }) }, { key: "calcTechnicalIndicator", value: function (t, e) { } }, { key: "regeneratePlots", value: function (t) { } }]), t }(); function Et(t, e) { var i = "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"]; if (!i) { if (Array.isArray(t) || (i = function (t, e) { if (!t) return; if ("string" == typeof t) return Pt(t, e); var i = Object.prototype.toString.call(t).slice(8, -1); "Object" === i && t.constructor && (i = t.constructor.name); if ("Map" === i || "Set" === i) return Array.from(t); if ("Arguments" === i || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)) return Pt(t, e) }(t)) || e && t && "number" == typeof t.length) { i && (t = i); var n = 0, r = function () { }; return { s: r, n: function () { return t.length > n ? { done: !1, value: t[n++] } : { done: !0 } }, e: function (t) { throw t }, f: r } } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.") } var a, o = !0, s = !1; return { s: function () { i = i.call(t) }, n: function () { var t = i.next(); return o = t.done, t }, e: function (t) { s = !0, a = t }, f: function () { try { o || null == i.return || i.return() } finally { if (s) throw a } } } } function Pt(t, e) { (null == e || e > t.length) && (e = t.length); for (var i = 0, n = Array(e); e > i; i++)n[i] = t[i]; return n } function Ct(t) { var e = function () { if ("undefined" == typeof Reflect || !Reflect.construct) return !1; if (Reflect.construct.sham) return !1; if ("function" == typeof Proxy) return !0; try { return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], (function () { }))), !0 } catch (t) { return !1 } }(); return function () { var i, n = pt(t); if (e) { var r = pt(this).constructor; i = Reflect.construct(n, arguments, r) } else i = n.apply(this, arguments); return vt(this, i) } } var At = function () { function t(e) { p(this, t), this._chartStore = e, this._templates = this._createTemplates(), this._instances = new Map } return y(t, [{ key: "_createTechInfo", value: function (t) { return { name: t.name, shortName: t.shortName, series: t.series, calcParams: t.calcParams, shouldCheckParamCount: t.shouldCheckParamCount, shouldOhlc: t.shouldOhlc, shouldFormatBigNumber: t.shouldFormatBigNumber, precision: t.precision, styles: t.styles, plots: t.plots, result: t.result || [] } } }, { key: "_createTemplates", value: function () { var t = {}, e = v.technicalIndicatorExtensions; for (var i in e) { var n = this._createTemplateInstance(e[i]); n && (t[i] = n) } return t } }, { key: "_createTemplateInstance", value: function (t) { var e = t.name, i = t.shortName, n = t.series, r = t.calcParams, a = t.plots, o = t.precision, s = t.shouldCheckParamCount, c = t.shouldOhlc, h = t.shouldFormatBigNumber, l = t.minValue, u = t.maxValue, f = t.styles, d = t.calcTechnicalIndicator, v = t.regeneratePlots, _ = t.createToolTipDataSource, m = t.render; if (!e || !k(d)) return null; var x = function (t) { dt(v, t); var d = Ct(v); function v() { return p(this, v), d.call(this, { name: e, shortName: i, series: n, calcParams: r, plots: a, precision: o, shouldCheckParamCount: s, shouldOhlc: c, shouldFormatBigNumber: h, minValue: l, maxValue: u, styles: f }) } return y(v) }(wt); return x.prototype.calcTechnicalIndicator = d, k(v) && (x.prototype.regeneratePlots = v), k(_) && (x.prototype.createToolTipDataSource = _), k(m) && (x.prototype.render = m), new x } }, { key: "addTemplate", value: function (t) { var e = this; t.forEach((function (t) { var i = e._createTemplateInstance(t || {}); i && (e._templates[i.name] = i) })) } }, { key: "hasTemplate", value: function (t) { return !!this._templates[t] } }, { key: "getTemplateInfo", value: function (t) { if (!E(t)) { var e = {}; for (var i in this._templates) { e[i] = this._createTechInfo(this._templates[i]) } return e } var n = this._templates[t]; return n ? this._createTechInfo(n) : {} } }, { key: "addInstance", value: function (t, e, i) { var n = e.name, r = e.calcParams, a = e.precision, o = e.shouldOhlc, s = e.shouldFormatBigNumber, c = e.styles, h = this._instances.get(t); if (!h || !h.has(n)) { h || (h = new Map, this._instances.set(t, h)); var l = this._templates[n], u = Object.create(Object.getPrototypeOf(l)); for (var f in l) Object.prototype.hasOwnProperty.call(l, f) && (u[f] = l[f]); return u.setCalcParams(r), u.setPrecision(a), u.setShouldOhlc(o), u.setShouldFormatBigNumber(s), u.setStyles(c, this._chartStore.styleOptions().technicalIndicator), i || h.clear(), h.set(n, u), u.calc(this._chartStore.dataList()) } } }, { key: "instances", value: function (t) { return this._instances.get(t) || new Map } }, { key: "removeInstance", value: function (t, e) { var i = !1; if (this._instances.has(t)) { var n = this._instances.get(t); E(e) ? n.has(e) && (n.delete(e), i = !0) : (n.clear(), i = !0), 0 === n.size && this._instances.delete(t) } return i } }, { key: "hasInstance", value: function (t) { return this._instances.has(t) } }, { key: "calcInstance", value: function (t, e) { var i = this, n = []; if (E(t)) if (E(e)) { var r = this._instances.get(e); r && r.has(t) && n.push(r.get(t).calc(this._chartStore.dataList())) } else this._instances.forEach((function (e) { e.has(t) && n.push(e.get(t).calc(i._chartStore.dataList())) })); else this._instances.forEach((function (t) { t.forEach((function (t) { n.push(t.calc(i._chartStore.dataList())) })) })); return Promise.all(n) } }, { key: "getInstanceInfo", value: function (t, e) { var i = this, n = function (t) { var n, r = [], a = Et(t); try { for (a.s(); !(n = a.n()).done;) { var o = n.value[1]; if (o) { var s = i._createTechInfo(o); if (o.name === e) return s; r.push(s) } } } catch (t) { a.e(t) } finally { a.f() } return r }; if (!E(t)) { var r = {}; return this._instances.forEach((function (t, e) { r[e] = n(t) })), r } return this._instances.has(t) ? n(this._instances.get(t)) : {} } }, { key: "setSeriesPrecision", value: function (t, e) { var i = function (i) { i.series === kt.PRICE && i.setPrecision(t, !0), i.series === kt.VOLUME && i.setPrecision(e, !0) }; for (var n in this._templates) i(this._templates[n]); this._instances.forEach((function (t) { t.forEach((function (t) { i(t) })) })) } }, { key: "override", value: function (t, e) { var i = this, n = t.name, r = t.shortName, a = t.calcParams, o = t.precision, s = t.shouldOhlc, c = t.shouldFormatBigNumber, h = t.styles, l = this._chartStore.styleOptions().technicalIndicator, u = new Map; if (E(e)) this._instances.has(e) && u.set(e, this._instances.get(e)); else { u = this._instances; var f = this._templates[n]; f && (f.setCalcParams(a), f.setShortName(r), f.setPrecision(o), f.setShouldOhlc(s), f.setShouldFormatBigNumber(c), f.setStyles(h, l)) } var d = !1, v = []; if (u.forEach((function (t) { if (t.has(n)) { var e = t.get(n), u = e.setShortName(r), f = e.setCalcParams(a), p = e.setPrecision(o), _ = e.setShouldOhlc(s), y = e.setShouldFormatBigNumber(c), m = e.setStyles(h, l); (u || f || p || _ || y || m) && (d = !0), f && v.push(e.calc(i._chartStore.dataList())) } })), d) return Promise.all(v) } }]), t }(); function It(t, e, i) { return e in t ? Object.defineProperty(t, e, { value: i, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = i, t } function Tt(t, e) { e.forEach((function (e) { var i = e.key, n = e.fn; k(n) && (t[i] = n) })) } var Mt = function () { function t(e) { var i = e.id, n = e.chartStore, r = e.xAxis, a = e.yAxis; p(this, t), this._id = i, this._chartStore = n, this._xAxis = r, this._yAxis = a, this._styles = null } return y(t, [{ key: "draw", value: function (t) { } }, { key: "setStyles", value: function (t, e) { return !!b(t) && (this._styles || (this._styles = g(e)), x(this._styles, t), !0) } }, { key: "id", value: function () { return this._id } }, { key: "styles", value: function () { return this._styles } }, { key: "setYAxis", value: function (t) { t && (this._yAxis = t) } }, { key: "checkEventCoordinateOn", value: function (t) { } }, { key: "onClick", value: function (t) { } }, { key: "onRightClick", value: function (t) { } }, { key: "onMouseEnter", value: function (t) { } }, { key: "onMouseLeave", value: function (t) { } }]), t }(); function Ot(t, e, i, n) { t.fillStyle = e, t.beginPath(), t.arc(i.x, i.y, n, 0, 2 * Math.PI), t.closePath(), t.fill() } function Dt(t, e, i) { var n = Math.abs(e.x - t.x), r = Math.abs(e.y - t.y), a = Math.abs(i.x - t.x); return Math.abs(n * Math.abs(i.y - t.y) - a * r) / 2 } function Rt(t, e) { var i = t.x - e.x; if (0 !== i) { var n = (t.y - e.y) / i; return { k: n, b: t.y - n * t.x } } } function Lt(t, e, i) { return Bt(Rt(t, e), i) } function Bt(t, e) { return t ? e.x * t.k + t.b : e.y } function Ft(t, e, i) { if (!i || !t || !e) return !1; if (t.x === e.x) return 2 > Math.abs(i.x - t.x); var n = Rt(t, e), r = Bt(n, i), a = Math.abs(r - i.y); return 4 > a * a / (n.k * n.k + 1) } function zt(t, e, i) { return !!Ft(t, e, i) && (t.x === e.x ? e.y > t.y ? 2 > t.y - i.y : 2 > i.y - t.y : e.x > t.x ? 2 > t.x - i.x : 2 > i.x - t.x) } function Vt(t, e, i) { return !!Ft(t, e, i) && (t.x === e.x ? 4 > Math.abs(t.y - i.y) + Math.abs(e.y - i.y) - Math.abs(t.y - e.y) : 4 > Math.abs(t.x - i.x) + Math.abs(e.x - i.x) - Math.abs(t.x - e.x)) } function jt(t, e, i) { if (!i) return !1; var n = i.x - t.x, r = i.y - t.y; return !(n * n + r * r > e * e) } function Ht(t, e) { var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0, n = []; if (t.length > 1) if (t[0].x === t[1].x) { var r = 0, a = e.y; if (n.push([{ x: t[0].x, y: r }, { x: t[0].x, y: a }]), t.length > 2) { n.push([{ x: t[2].x, y: r }, { x: t[2].x, y: a }]); for (var o = t[0].x - t[2].x, s = 0; i > s; s++) { var c = o * (s + 1); n.push([{ x: t[0].x + c, y: r }, { x: t[0].x + c, y: a }]) } } } else { var h = 0, l = e.x, u = Rt(t[0], t[1]), f = u.k, d = u.b; if (n.push([{ x: h, y: h * f + d }, { x: l, y: l * f + d }]), t.length > 2) { var v = t[2].y - f * t[2].x; n.push([{ x: h, y: h * f + v }, { x: l, y: l * f + v }]); for (var p = d - v, _ = 0; i > _; _++) { var y = d + p * (_ + 1); n.push([{ x: h, y: h * f + y }, { x: l, y: l * f + y }]) } } } return n } function Nt(t, e, i) { t.save(), t.lineWidth % 2 && t.translate(.5, .5), t.beginPath(); var n = !0; e.forEach((function (e) { e && (n ? (t.moveTo(e.x, e.y), n = !1) : t.lineTo(e.x, e.y)) })), i(), t.restore() } function Yt(t, e) { Nt(t, e, (function () { t.closePath(), t.stroke() })) } function Wt(t, e) { Nt(t, e, (function () { t.closePath(), t.fill() })) } function Xt(t, e, i, n) { t.beginPath(); var r = t.lineWidth % 2 ? .5 : 0; t.moveTo(i, e + r), t.lineTo(n, e + r), t.stroke(), t.closePath() } function Gt(t, e, i, n) { t.beginPath(); var r = t.lineWidth % 2 ? .5 : 0; t.moveTo(e + r, i), t.lineTo(e + r, n), t.stroke(), t.closePath() } function Ut(t, e) { Nt(t, e, (function () { t.stroke(), t.closePath() })) } function Zt(t) { return t.ownerDocument && t.ownerDocument.defaultView && t.ownerDocument.defaultView.devicePixelRatio || 2 } function Kt(t, e) { return Math.round(t.measureText(e).width) } function qt() { var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 12, e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "normal", i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "Helvetica Neue"; return "".concat(e, " ").concat(t, "px ").concat(i) } function $t(t, e, i) { t.font = qt(i.size, i.weight, i.family); var n = Kt(t, e); return i.paddingLeft + i.paddingRight + n + 2 * (i.borderSize || 0) } function Jt(t) { return t.paddingTop + t.paddingBottom + t.size + 2 * (t.borderSize || 0) } function Qt(t, e) { var i = "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"]; if (!i) { if (Array.isArray(t) || (i = function (t, e) { if (!t) return; if ("string" == typeof t) return te(t, e); var i = Object.prototype.toString.call(t).slice(8, -1); "Object" === i && t.constructor && (i = t.constructor.name); if ("Map" === i || "Set" === i) return Array.from(t); if ("Arguments" === i || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)) return te(t, e) }(t)) || e && t && "number" == typeof t.length) { i && (t = i); var n = 0, r = function () { }; return { s: r, n: function () { return t.length > n ? { done: !1, value: t[n++] } : { done: !0 } }, e: function (t) { throw t }, f: r } } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.") } var a, o = !0, s = !1; return { s: function () { i = i.call(t) }, n: function () { var t = i.next(); return o = t.done, t }, e: function (t) { s = !0, a = t }, f: function () { try { o || null == i.return || i.return() } finally { if (s) throw a } } } } function te(t, e) { (null == e || e > t.length) && (e = t.length); for (var i = 0, n = Array(e); e > i; i++)n[i] = t[i]; return n } function ee(t) { var e = function () { if ("undefined" == typeof Reflect || !Reflect.construct) return !1; if (Reflect.construct.sham) return !1; if ("function" == typeof Proxy) return !0; try { return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], (function () { }))), !0 } catch (t) { return !1 } }(); return function () { var i, n = pt(t); if (e) { var r = pt(this).constructor; i = Reflect.construct(n, arguments, r) } else i = n.apply(this, arguments); return vt(this, i) } } var ie = "other", ne = "point", re = "none", ae = "line", oe = "text", se = "continuous_line", ce = "polygon", he = "arc", le = 0, ue = 1, fe = 2, de = { NORMAL: "normal", WEAK_MAGNET: "weak_magnet", STRONG_MAGNET: "strong_magnet" }; var ve = function (t) { dt(i, t); var e = ee(i); function i(t) { var n, r = t.id, a = t.name, o = t.totalStep, s = t.chartStore, c = t.xAxis, h = t.yAxis, l = t.points, u = t.styles, f = t.lock, d = t.data; return p(this, i), (n = e.call(this, { id: r, chartStore: s, xAxis: c, yAxis: h }))._name = a, n._totalStep = o, n._lock = f, n._mode = de.NORMAL, n._data = d, n._drawStep = 1, n._points = [], n.setPoints(l), n.setStyles(u, s.styleOptions().shape), n._prevPressPoint = null, n._prevPoints = null, n._coordinates = [], n } return y(i, [{ key: "setPoints", value: function (t) { if (S(t) && t.length > 0) { var e; this._totalStep - 1 > t.length ? (this._drawStep = t.length + 1, this._points = g(t), e = t.length) : (this._drawStep = -1, this._points = t.slice(0, this._totalStep - 1), e = this._totalStep - 1); for (var i = 0; e > i; i++)this.performEventMoveForDrawing({ step: i + 2, mode: this._mode, points: this._points, movePoint: this._points[i], xAxis: this._xAxis, yAxis: this._yAxis }); -1 === this._drawStep && this.performEventPressedMove({ mode: this._mode, points: this._points, pressPointIndex: this._points.length - 1, pressPoint: this._points[this._points.length - 1], xAxis: this._xAxis, yAxis: this._yAxis }) } } }, { key: "_timestampOrDataIndexToCoordinateX", value: function (t) { var e = t.timestamp, i = t.dataIndex; return e && (i = this._chartStore.timeScaleStore().timestampToDataIndex(e)), this._xAxis.convertToPixel(i) } }, { key: "_drawLines", value: function (t, e, i, n) { t.save(), t.strokeStyle = i.color || n.color, t.lineWidth = i.size || n.size, i.style === T && t.setLineDash(i.dashValue || n.dashValue), e.forEach((function (e) { var i, n; if (e.length > 1) switch ((i = e[0]).x === (n = e[1]).x ? fe : i.y === n.y ? ue : le) { case le: Ut(t, e); break; case ue: Xt(t, e[0].y, e[0].x, e[1].x); break; case fe: Gt(t, e[0].x, e[0].y, e[1].y) } })), t.restore() } }, { key: "_drawContinuousLines", value: function (t, e, i, n) { t.save(), t.strokeStyle = i.color || n.color, t.lineWidth = i.size || n.size, i.style === T && t.setLineDash(i.dashValue || n.dashValue), e.forEach((function (e) { e.length > 0 && Ut(t, e) })), t.restore() } }, { key: "_drawPolygons", value: function (t, e, i, n) { var r; if (t.save(), i.style === I) t.fillStyle = (i.fill || n.fill).color, r = Wt; else { var a = i.stroke || n.stroke; a.style === T && t.setLineDash(a.dashValue), t.lineWidth = a.size, t.strokeStyle = a.color, r = Yt } e.forEach((function (e) { e.length > 0 && r(t, e) })), t.restore() } }, { key: "_drawArcs", value: function (t, e, i, n) { if (t.save(), i.style === I) t.fillStyle = (i.fill || n.fill).color; else { var r = i.stroke || n.stroke; r.style === T && t.setLineDash(r.dashValue), t.lineWidth = r.size, t.strokeStyle = r.color } e.forEach((function (e) { var n = e.x, r = e.y, a = e.radius, o = e.startAngle, s = e.endAngle; t.beginPath(), t.arc(n, r, a, o, s), i.style === I ? (t.closePath(), t.fill()) : (t.stroke(), t.closePath()) })), t.restore() } }, { key: "_drawText", value: function (t, e, i, n) { var r; t.save(), i.style === A ? (t.strokeStyle = i.color || n.color, r = t.strokeText) : (t.fillStyle = i.color || n.color, r = t.fillText), t.font = qt(i.size || n.size, i.family || n.family, i.weight || n.weight); var a = i.offset || n.offset || [0, 0]; e.forEach((function (e) { r.call(t, e.text, e.x + a[1], e.y + a[0]) })), t.restore() } }, { key: "draw", value: function (t) { var e = this; this._coordinates = this._points.map((function (t) { var i = t.value; return { x: e._timestampOrDataIndexToCoordinateX({ timestamp: t.timestamp, dataIndex: t.dataIndex }), y: e._yAxis.convertToPixel(i) } })); var i = this._styles || this._chartStore.styleOptions().shape; if (1 !== this._drawStep && this._coordinates.length > 0) { var n = { width: this._xAxis.width(), height: this._yAxis.height() }, r = { price: this._chartStore.pricePrecision(), volume: this._chartStore.volumePrecision() }; this._shapeDataSources = this.createShapeDataSource({ step: this._drawStep, mode: this._mode, points: this._points, coordinates: this._coordinates, viewport: { width: this._xAxis.width(), height: this._yAxis.height() }, precision: { price: this._chartStore.pricePrecision(), volume: this._chartStore.volumePrecision() }, styles: i, xAxis: this._xAxis, yAxis: this._yAxis, data: this._data }) || [], this._shapeDataSources.forEach((function (n) { var r = n.styles, a = n.dataSource, o = void 0 === a ? [] : a; if (n.isDraw) switch (n.type) { case ae: e._drawLines(t, o, r || i.line, i.line); break; case se: e._drawContinuousLines(t, o, r || i.line, i.line); break; case ce: e._drawPolygons(t, o, r || i.polygon, i.polygon); break; case he: e._drawArcs(t, o, r || i.arc, i.arc); break; case oe: e._drawText(t, o, r || i.text, i.text) } })), this.drawExtend && (t.save(), this.drawExtend({ ctx: t, dataSource: this._shapeDataSources, styles: i, viewport: n, precision: r, mode: this._mode, xAxis: this._xAxis, yAxis: this._yAxis, data: this._data }), t.restore()) } var a = this._chartStore.shapeStore().mouseOperate(); (a.hover.id === this._id && a.hover.element !== re || a.click.id === this._id && a.click.element !== re || this.isDrawing()) && this._coordinates.forEach((function (n, r) { var o = n.x, s = n.y, c = i.point.radius, h = i.point.backgroundColor, l = i.point.borderColor, u = i.point.borderSize; a.hover.id === e._id && a.hover.element === ne && r === a.hover.elementIndex && (c = i.point.activeRadius, h = i.point.activeBackgroundColor, l = i.point.activeBorderColor, u = i.point.activeBorderSize), Ot(t, l, { x: o, y: s }, c + u), Ot(t, h, { x: o, y: s }, c) })) } }, { key: "setLock", value: function (t) { this._lock = t } }, { key: "name", value: function () { return this._name } }, { key: "lock", value: function () { return this._lock } }, { key: "totalStep", value: function () { return this._totalStep } }, { key: "mode", value: function () { return this._mode } }, { key: "setMode", value: function (t) { Object.values(de).indexOf(t) > -1 && (this._mode = t) } }, { key: "setData", value: function (t) { return t !== this._data && (this._data = t, !0) } }, { key: "data", value: function () { return this._data } }, { key: "points", value: function () { return this._points } }, { key: "isDrawing", value: function () { return -1 !== this._drawStep } }, { key: "isStart", value: function () { return 1 === this._drawStep } }, { key: "checkEventCoordinateOn", value: function (t) { for (var e = this._styles || this._chartStore.styleOptions().shape, i = this._coordinates.length - 1; i > -1; i--)if (jt(this._coordinates[i], e.point.radius, t)) return { id: this._id, element: ne, elementIndex: i, instance: this }; if (this._shapeDataSources) { var n, r = Qt(this._shapeDataSources); try { for (r.s(); !(n = r.n()).done;) { var a = n.value, o = a.key, s = a.type, c = a.dataSource, h = void 0 === c ? [] : c; if (a.isCheck) for (var l = 0; h.length > l; l++) { if (this.checkEventCoordinateOnShape({ key: o, type: s, dataSource: h[l], eventCoordinate: t })) return { id: this._id, element: ie, elementIndex: l, instance: this } } } } catch (t) { r.e(t) } finally { r.f() } } } }, { key: "_performValue", value: function (t, e, i) { var n = this._yAxis.convertFromPixel(t); if (this._mode === de.NORMAL || "candle_pane" !== i) return n; var r = this._chartStore.timeScaleStore().getDataByDataIndex(e); if (!r) return n; if (n > r.high) { if (this._mode === de.WEAK_MAGNET) { var a = this._yAxis.convertToPixel(r.high); return this._yAxis.convertFromPixel(a - 8) > n ? r.high : n } return r.high } if (r.low > n) { if (this._mode === de.WEAK_MAGNET) { var o = this._yAxis.convertToPixel(r.low); return n > this._yAxis.convertFromPixel(o - 8) ? r.low : n } return r.low } var s = Math.max(r.open, r.close); if (n > s) return r.high - n > n - s ? s : r.high; var c = Math.min(r.open, r.close); return c > n ? c - n > n - r.low ? r.low : c : n - c > s - n ? s : c } }, { key: "mouseMoveForDrawing", value: function (t, e) { var i = this._xAxis.convertFromPixel(t.x), n = this._chartStore.timeScaleStore().dataIndexToTimestamp(i), r = this._performValue(t.y, i, e.paneId); this._points[this._drawStep - 1] = { timestamp: n, value: r, dataIndex: i }, this.performEventMoveForDrawing({ step: this._drawStep, mode: this._mode, points: this._points, movePoint: { timestamp: n, value: r, dataIndex: i }, xAxis: this._xAxis, yAxis: this._yAxis }), this.onDrawing({ id: this._id, step: this._drawStep, points: this._points }) } }, { key: "mouseLeftButtonDownForDrawing", value: function () { this._drawStep === this._totalStep - 1 ? (this._drawStep = -1, this._chartStore.shapeStore().progressInstanceComplete(), this.onDrawEnd({ id: this._id, points: this._points })) : this._drawStep++ } }, { key: "mousePressedPointMove", value: function (t, e) { var i = this._chartStore.shapeStore().mouseOperate(), n = i.click.elementIndex; if (!this._lock && i.click.id === this._id && i.click.element === ne && -1 !== n) { var r = this._xAxis.convertFromPixel(t.x), a = this._chartStore.timeScaleStore().dataIndexToTimestamp(r), o = this._performValue(t.y, r, e.paneId); this._points[n].timestamp = a, this._points[n].dataIndex = r, this._points[n].value = o, this.performEventPressedMove({ points: this._points, mode: this._mode, pressPointIndex: n, pressPoint: { dataIndex: r, timestamp: a, value: o }, xAxis: this._xAxis, yAxis: this._yAxis }), this.onPressedMove({ id: this._id, element: ne, points: this._points, event: e }) } } }, { key: "startPressedOtherMove", value: function (t) { var e = this._xAxis.convertFromPixel(t.x), i = this._yAxis.convertFromPixel(t.y); this._prevPressPoint = { dataIndex: e, value: i }, this._prevPoints = g(this._points) } }, { key: "mousePressedOtherMove", value: function (t, e) { var i = this; if (this._prevPressPoint) { var n = this._xAxis.convertFromPixel(t.x), r = this._yAxis.convertFromPixel(t.y), a = n - this._prevPressPoint.dataIndex, o = r - this._prevPressPoint.value; this._points = this._prevPoints.map((function (t) { E(t.dataIndex) || (t.dataIndex = i._chartStore.timeScaleStore().timestampToDataIndex(t.timestamp)); var e = t.dataIndex + a; return { dataIndex: e, value: t.value + o, timestamp: i._chartStore.timeScaleStore().dataIndexToTimestamp(e) } })), this.onPressedMove({ id: this._id, element: ie, points: this._points, event: e }) } } }, { key: "onDrawStart", value: function (t) { } }, { key: "onDrawing", value: function (t) { } }, { key: "onDrawEnd", value: function (t) { } }, { key: "onPressedMove", value: function (t) { } }, { key: "onRemove", value: function (t) { } }, { key: "checkEventCoordinateOnShape", value: function (t) { } }, { key: "createShapeDataSource", value: function (t) { } }, { key: "performEventMoveForDrawing", value: function (t) { } }, { key: "performEventPressedMove", value: function (t) { } }]), i }(Mt), pe = 1, _e = 2, ye = 3; function me(t, e) { var i = Object.keys(t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(t); e && (n = n.filter((function (e) { return Object.getOwnPropertyDescriptor(t, e).enumerable }))), i.push.apply(i, n) } return i } function xe(t) { for (var e = 1; arguments.length > e; e++) { var i = null != arguments[e] ? arguments[e] : {}; e % 2 ? me(Object(i), !0).forEach((function (e) { It(t, e, i[e]) })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(i)) : me(Object(i)).forEach((function (e) { Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(i, e)) })) } return t } function ge(t, e) { var i = "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"]; if (!i) { if (Array.isArray(t) || (i = function (t, e) { if (!t) return; if ("string" == typeof t) return Se(t, e); var i = Object.prototype.toString.call(t).slice(8, -1); "Object" === i && t.constructor && (i = t.constructor.name); if ("Map" === i || "Set" === i) return Array.from(t); if ("Arguments" === i || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)) return Se(t, e) }(t)) || e && t && "number" == typeof t.length) { i && (t = i); var n = 0, r = function () { }; return { s: r, n: function () { return t.length > n ? { done: !1, value: t[n++] } : { done: !0 } }, e: function (t) { throw t }, f: r } } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.") } var a, o = !0, s = !1; return { s: function () { i = i.call(t) }, n: function () { var t = i.next(); return o = t.done, t }, e: function (t) { s = !0, a = t }, f: function () { try { o || null == i.return || i.return() } finally { if (s) throw a } } } } function Se(t, e) { (null == e || e > t.length) && (e = t.length); for (var i = 0, n = Array(e); e > i; i++)n[i] = t[i]; return n } function ke(t) { var e = function () { if ("undefined" == typeof Reflect || !Reflect.construct) return !1; if (Reflect.construct.sham) return !1; if ("function" == typeof Proxy) return !0; try { return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], (function () { }))), !0 } catch (t) { return !1 } }(); return function () { var i, n = pt(t); if (e) { var r = pt(this).constructor; i = Reflect.construct(n, arguments, r) } else i = n.apply(this, arguments); return vt(this, i) } } var be = function () { function t(e) { p(this, t), this._chartStore = e, this._templates = this._createTemplates(), this._mouseOperate = { click: { id: "", element: re, elementIndex: -1 }, hover: { id: "", element: re, elementIndex: -1 } }, this._progressInstance = null, this._pressedInstance = null, this._instances = new Map } return y(t, [{ key: "_createTemplates", value: function () { var t = {}, e = v.shapeExtensions; for (var i in e) { var n = this._createTemplateClass(e[i]); n && (t[i] = n) } return t } }, { key: "_createTemplateClass", value: function (t) { var e = t.name, i = t.totalStep, n = t.checkEventCoordinateOnShape, r = t.createShapeDataSource, a = t.performEventPressedMove, o = t.performEventMoveForDrawing, s = t.drawExtend; if (!(e && w(i) && k(n) && k(r))) return null; var c = function (t) { dt(r, t); var n = ke(r); function r(t) { var a = t.id, o = t.chartStore, s = t.xAxis, c = t.yAxis, h = t.points, l = t.styles, u = t.lock, f = t.data; return p(this, r), n.call(this, { id: a, name: e, totalStep: i, chartStore: o, xAxis: s, yAxis: c, points: h, styles: l, lock: u, data: f }) } return y(r) }(ve); return c.prototype.checkEventCoordinateOnShape = n, c.prototype.createShapeDataSource = r, k(a) && (c.prototype.performEventPressedMove = a), k(o) && (c.prototype.performEventMoveForDrawing = o), k(s) && (c.prototype.drawExtend = s), c } }, { key: "addTemplate", value: function (t) { var e = this; t.forEach((function (t) { var i = e._createTemplateClass(t); i && (e._templates[t.name] = i) })) } }, { key: "getTemplate", value: function (t) { return this._templates[t] } }, { key: "getInstance", value: function (t) { var e, i = ge(this._instances); try { for (i.s(); !(e = i.n()).done;) { var n = (e.value[1] || []).find((function (e) { return e.id() === t })); if (n) return n } } catch (t) { i.e(t) } finally { i.f() } return null } }, { key: "hasInstance", value: function (t) { return !!this.getInstance(t) } }, { key: "addInstance", value: function (t, e) { t.isDrawing() ? this._progressInstance = { paneId: e, instance: t, fixed: E(e) } : (this._instances.has(e) || this._instances.set(e, []), this._instances.get(e).push(t)), this._chartStore.invalidate(pe) } }, { key: "progressInstance", value: function () { return this._progressInstance || {} } }, { key: "progressInstanceComplete", value: function () { var t = this.progressInstance(), e = t.instance, i = t.paneId; e && !e.isDrawing() && (this._instances.has(i) || this._instances.set(i, []), this._instances.get(i).push(e), this._progressInstance = null) } }, { key: "updateProgressInstance", value: function (t, e) { var i = this.progressInstance(), n = i.instance; n && !i.fixed && (n.setYAxis(t), this._progressInstance.paneId = e) } }, { key: "pressedInstance", value: function () { return this._pressedInstance || {} } }, { key: "updatePressedInstance", value: function (t, e, i) { this._pressedInstance = t ? { instance: t, paneId: e, element: i } : null } }, { key: "instances", value: function (t) { return this._instances.get(t) || [] } }, { key: "setInstanceOptions", value: function () { var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, e = t.id, i = t.styles, n = t.lock, r = t.mode, a = t.data, o = this._chartStore.styleOptions().shape, s = !1; if (E(e)) { var c = this.getInstance(e); c && (c.setLock(n), c.setMode(r), (c.setStyles(i, o) || c.setData(a)) && (s = !0)) } else this._instances.forEach((function (t) { t.forEach((function (t) { t.setLock(n), t.setMode(r), (t.setStyles(i, o) || t.setData(a)) && (s = !0) })) })); s && this._chartStore.invalidate(pe) } }, { key: "getInstanceInfo", value: function (t) { var e = function (t) { return { name: t.name(), id: t.id(), totalStep: t.totalStep(), lock: t.lock(), mode: t.mode(), points: t.points(), styles: t.styles(), data: t.data() } }, i = this.progressInstance(); if (!E(t)) { var n = {}; return this._instances.forEach((function (t, r) { n[r] = t.map((function (t) { return e(t) })), i.paneId === r && i.instance && n[r].push(e(i.instance)) })), n } if (i.instance && i.instance.id() === t) return e(i.instance); var r = this.getInstance(t); return r ? e(r) : null } }, { key: "removeInstance", value: function (t) { var e = !1, i = this.progressInstance().instance; if (!i || E(t) && i.id() !== t || (i.onRemove({ id: i.id() }), this._progressInstance = null, e = !0), E(t)) { var n, r = ge(this._instances); try { for (r.s(); !(n = r.n()).done;) { var a = n.value, o = a[1] || [], s = o.findIndex((function (e) { return e.id() === t })); if (s > -1) { o[s].onRemove({ id: o[s].id() }), o.splice(s, 1), 0 === o.length && this._instances.delete(a[0]), e = !0; break } } } catch (t) { r.e(t) } finally { r.f() } } else this._instances.forEach((function (t) { t.length > 0 && t.forEach((function (t) { t.onRemove({ id: t.id() }) })) })), this._instances.clear(), e = !0; e && this._chartStore.invalidate(pe) } }, { key: "mouseOperate", value: function () { return this._mouseOperate } }, { key: "setMouseOperate", value: function (t) { var e = this._mouseOperate, i = e.hover, n = e.click; !t.hover || i.id === t.hover.id && i.element === t.hover.element && i.elementIndex === t.hover.elementIndex || (this._mouseOperate.hover = xe({}, t.hover)), !t.click || n.id === t.click.id && n.element === t.click.element && n.elementIndex === t.click.elementIndex || (this._mouseOperate.click = xe({}, t.click)) } }, { key: "isEmpty", value: function () { return 0 === this._instances.size && !this.progressInstance().instance } }, { key: "isDrawing", value: function () { var t = this.progressInstance().instance; return t && t.isDrawing() } }, { key: "isPressed", value: function () { return !!this.pressedInstance().instance } }]), t }(); function we(t, e) { var i = "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"]; if (!i) { if (Array.isArray(t) || (i = function (t, e) { if (!t) return; if ("string" == typeof t) return Ee(t, e); var i = Object.prototype.toString.call(t).slice(8, -1); "Object" === i && t.constructor && (i = t.constructor.name); if ("Map" === i || "Set" === i) return Array.from(t); if ("Arguments" === i || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)) return Ee(t, e) }(t)) || e && t && "number" == typeof t.length) { i && (t = i); var n = 0, r = function () { }; return { s: r, n: function () { return t.length > n ? { done: !1, value: t[n++] } : { done: !0 } }, e: function (t) { throw t }, f: r } } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.") } var a, o = !0, s = !1; return { s: function () { i = i.call(t) }, n: function () { var t = i.next(); return o = t.done, t }, e: function (t) { s = !0, a = t }, f: function () { try { o || null == i.return || i.return() } finally { if (s) throw a } } } } function Ee(t, e) { (null == e || e > t.length) && (e = t.length); for (var i = 0, n = Array(e); e > i; i++)n[i] = t[i]; return n } function Pe(t, e) { var i = Object.keys(t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(t); e && (n = n.filter((function (e) { return Object.getOwnPropertyDescriptor(t, e).enumerable }))), i.push.apply(i, n) } return i } var Ce = function () { function t(e) { p(this, t), this._chartStore = e, this._annotations = new Map, this._visibleAnnotations = new Map, this._mouseOperate = { id: "" } } return y(t, [{ key: "mouseOperate", value: function () { return this._mouseOperate } }, { key: "setMouseOperate", value: function (t) { t && this._mouseOperate.id !== t.id && (this._mouseOperate = function (t) { for (var e = 1; arguments.length > e; e++) { var i = null != arguments[e] ? arguments[e] : {}; e % 2 ? Pe(Object(i), !0).forEach((function (e) { It(t, e, i[e]) })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(i)) : Pe(Object(i)).forEach((function (e) { Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(i, e)) })) } return t }({}, t)) } }, { key: "createVisibleAnnotations", value: function () { var t = this; this._visibleAnnotations.clear(), this._annotations.size > 0 && this._chartStore.visibleDataList().forEach((function (e) { var i = e.data, n = e.x; t._annotations.forEach((function (e, r) { if (e.size > 0) { var a = e.get(i.timestamp) || []; if (a.length > 0) { var o, s = we(a); try { for (s.s(); !(o = s.n()).done;) { var c = o.value; c.createSymbolCoordinate(n), t._visibleAnnotations.has(r) ? t._visibleAnnotations.get(r).push(c) : t._visibleAnnotations.set(r, [c]) } } catch (t) { s.e(t) } finally { s.f() } } } })) })) } }, { key: "add", value: function (t, e) { var i = this; this._annotations.has(e) || this._annotations.set(e, new Map), t.forEach((function (t) { var n = i._annotations.get(e); n.has(t.id()) ? n.get(t.id()).push(t) : n.set(t.id(), [t]) })), this.createVisibleAnnotations(), this._chartStore.invalidate(pe) } }, { key: "get", value: function (t) { return this._visibleAnnotations.get(t) } }, { key: "remove", value: function (t, e) { var i = !1; if (E(t)) { if (this._annotations.has(t)) if (E(e)) { var n = this._annotations.get(t);[].concat(e).forEach((function (t) { var e = t.timestamp; n.has(e) && (i = !0, n.delete(e)) })), 0 === n.size && this._annotations.delete(t), i && this.createVisibleAnnotations() } else i = !0, this._annotations.delete(t), this._visibleAnnotations.delete(t) } else i = !0, this._annotations.clear(), this._visibleAnnotations.clear(); i && this._chartStore.invalidate(pe) } }, { key: "isEmpty", value: function () { return 0 === this._visibleAnnotations.size } }]), t }(), Ae = function () { function t(e) { p(this, t), this._chartStore = e, this._tags = new Map } return y(t, [{ key: "_getById", value: function (t, e) { var i = this.get(e); return i ? i.get(t) : null } }, { key: "has", value: function (t, e) { return !!this._getById(t, e) } }, { key: "update", value: function (t, e, i) { var n = this._getById(t, e); return !!n && n.update(i) } }, { key: "get", value: function (t) { return this._tags.get(t) } }, { key: "add", value: function (t, e) { this._tags.has(e) || this._tags.set(e, new Map); var i = this._tags.get(e); t.forEach((function (t) { i.set(t.id(), t) })), this._chartStore.invalidate(pe) } }, { key: "remove", value: function (t, e) { var i = !1; if (E(t)) { if (this._tags.has(t)) if (E(e)) { var n = this._tags.get(t);[].concat(e).forEach((function (t) { n.has(t) && (i = !0, n.delete(t)) })), 0 === n.size && this._tags.delete(t) } else i = !0, this._tags.delete(t) } else i = !0, this._tags.clear(); i && this._chartStore.invalidate(pe) } }]), t }(); function Ie(t, e) { var i = Object.keys(t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(t); e && (n = n.filter((function (e) { return Object.getOwnPropertyDescriptor(t, e).enumerable }))), i.push.apply(i, n) } return i } function Te(t) { for (var e = 1; arguments.length > e; e++) { var i = null != arguments[e] ? arguments[e] : {}; e % 2 ? Ie(Object(i), !0).forEach((function (e) { It(t, e, i[e]) })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(i)) : Ie(Object(i)).forEach((function (e) { Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(i, e)) })) } return t } var Me = function () { function t(e) { p(this, t), this._chartStore = e, this._crosshair = {} } return y(t, [{ key: "set", value: function (t, e) { var i, n, r = this._chartStore.dataList(), a = t || {}, o = r[n = E(a.x) ? 0 > (i = this._chartStore.timeScaleStore().coordinateToDataIndex(a.x)) ? 0 : i > r.length - 1 ? r.length - 1 : i : i = r.length - 1], s = this._chartStore.timeScaleStore().dataIndexToCoordinate(i), c = this._crosshair.x, h = this._crosshair.y, l = this._crosshair.paneId; this._crosshair = Te(Te({}, a), {}, { realX: s, kLineData: o, realDataIndex: i, dataIndex: n }), o && this._chartStore.crosshairChange(this._crosshair), c === a.x && h === a.y && l === a.paneId || e || this._chartStore.invalidate(pe) } }, { key: "recalculate", value: function (t) { this.set(this._crosshair, t) } }, { key: "get", value: function () { return this._crosshair } }]), t }(), Oe = function () { function t() { p(this, t), this._observers = [] } return y(t, [{ key: "subscribe", value: function (t) { 0 > this._observers.indexOf(t) && this._observers.push(t) } }, { key: "unsubscribe", value: function (t) { var e = this._observers.indexOf(t); e > -1 ? this._observers.splice(e, 1) : this._observers = [] } }, { key: "execute", value: function (t) { this._observers.forEach((function (e) { e(t) })) } }, { key: "hasObservers", value: function () { return this._observers.length > 0 } }]), t }(), De = function () { function t() { p(this, t), this._delegates = new Map } return y(t, [{ key: "execute", value: function (t, e) { this.has(t) && this._delegates.get(t).execute(e) } }, { key: "has", value: function (t) { return this._delegates.has(t) && this._delegates.get(t).hasObservers() } }, { key: "subscribe", value: function (t, e) { return !!lt(t) && (this._delegates.has(t) || this._delegates.set(t, new Oe), this._delegates.get(t).subscribe(e), !0) } }, { key: "unsubscribe", value: function (t, e) { if (lt(t)) { var i = this._delegates.get(t); return i.unsubscribe(e), i.hasObservers() || this._delegates.delete(t), !0 } return !1 } }]), t }(), Re = function () { function t(e, i) { p(this, t), this._handler = i, this._styleOptions = g(et), x(this._styleOptions, e), this._pricePrecision = 2, this._volumePrecision = 0, this._dataList = [], this._visibleDataList = [], this._dragPaneFlag = !1, this._timeScaleStore = new ut(this), this._technicalIndicatorStore = new At(this), this._shapeStore = new be(this), this._annotationStore = new Ce(this), this._tagStore = new Ae(this), this._crosshairStore = new Me(this), this._actionStore = new De } return y(t, [{ key: "adjustVisibleDataList", value: function () { this._visibleDataList = []; for (var t = this._timeScaleStore.from(), e = this._timeScaleStore.to(), i = t; e > i; i++) { var n = this._dataList[i], r = this._timeScaleStore.dataIndexToCoordinate(i); this._visibleDataList.push({ index: i, x: r, data: n }) } this._annotationStore.createVisibleAnnotations() } }, { key: "styleOptions", value: function () { return this._styleOptions } }, { key: "applyStyleOptions", value: function (t) { x(this._styleOptions, t) } }, { key: "pricePrecision", value: function () { return this._pricePrecision } }, { key: "volumePrecision", value: function () { return this._volumePrecision } }, { key: "setPriceVolumePrecision", value: function (t, e) { this._pricePrecision = t, this._volumePrecision = e, this._technicalIndicatorStore.setSeriesPrecision(t, e) } }, { key: "dataList", value: function () { return this._dataList } }, { key: "visibleDataList", value: function () { return this._visibleDataList } }, { key: "addData", value: function (t, e, i) { if (b(t)) { if (S(t)) { this._timeScaleStore.setLoading(!1), this._timeScaleStore.setMore(!P(i) || i); var n = 0 === this._dataList.length; this._dataList = t.concat(this._dataList), n && this._timeScaleStore.resetOffsetRightSpace(), this._timeScaleStore.adjustFromTo() } else { if (e < this._dataList.length) this._dataList[e] = t, this.adjustVisibleDataList(); else { this._dataList.push(t); var r = this._timeScaleStore.offsetRightBarCount(); 0 > r && this._timeScaleStore.setOffsetRightBarCount(--r), this._timeScaleStore.adjustFromTo() } } this._crosshairStore.recalculate(!0) } } }, { key: "clearDataList", value: function () { this._dataList = [], this._visibleDataList = [], this._timeScaleStore.clear() } }, { key: "timeScaleStore", value: function () { return this._timeScaleStore } }, { key: "technicalIndicatorStore", value: function () { return this._technicalIndicatorStore } }, { key: "shapeStore", value: function () { return this._shapeStore } }, { key: "annotationStore", value: function () { return this._annotationStore } }, { key: "tagStore", value: function () { return this._tagStore } }, { key: "crosshairStore", value: function () { return this._crosshairStore } }, { key: "actionStore", value: function () { return this._actionStore } }, { key: "invalidate", value: function (t) { this._handler.invalidate(t) } }, { key: "crosshairChange", value: function (t) { this._handler.crosshair(t) } }, { key: "dragPaneFlag", value: function () { return this._dragPaneFlag } }, { key: "setDragPaneFlag", value: function (t) { this._dragPaneFlag = t } }]), t }(); function Le(t, e) { for (; !Object.prototype.hasOwnProperty.call(t, e) && null !== (t = pt(t));); return t } function Be() { return Be = "undefined" != typeof Reflect && Reflect.get ? Reflect.get : function (t, e, i) { var n = Le(t, e); if (n) { var r = Object.getOwnPropertyDescriptor(n, e); return r.get ? r.get.call(3 > arguments.length ? t : i) : r.value } }, Be.apply(this, arguments) } function Fe(t) { var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, i = document.createElement(t); for (var n in e) Object.prototype.hasOwnProperty.call(e, n) && (i.style[n] = e[n]); return i } var ze = function () { function t(e) { p(this, t), this._height = -1, this._container = e.container, this._chartStore = e.chartStore, this._initBefore(e), this._initElement(), this._mainWidget = this._createMainWidget(this._element, e), this._yAxisWidget = this._createYAxisWidget(this._element, e) } return y(t, [{ key: "_initBefore", value: function (t) { } }, { key: "_initElement", value: function () { this._element = Fe("div", { width: "100%", margin: "0", padding: "0", position: "relative", overflow: "hidden", boxSizing: "border-box" }); var t = this._container.lastChild; t ? this._container.insertBefore(this._element, t) : this._container.appendChild(this._element) } }, { key: "_createMainWidget", value: function (t, e) { } }, { key: "_createYAxisWidget", value: function (t, e) { } }, { key: "width", value: function () { return this._element.offsetWidth } }, { key: "setWidth", value: function (t, e) { this._mainWidget.setWidth(t), this._yAxisWidget && this._yAxisWidget.setWidth(e) } }, { key: "height", value: function () { return this._height } }, { key: "setHeight", value: function (t) { this._height = t, this._mainWidget.setHeight(t), this._yAxisWidget && this._yAxisWidget.setHeight(t) } }, { key: "setOffsetLeft", value: function (t, e) { this._mainWidget.setOffsetLeft(t), this._yAxisWidget && this._yAxisWidget.setOffsetLeft(e) } }, { key: "layout", value: function () { this._element.offsetHeight !== this._height && (this._element.style.height = "".concat(this._height, "px")), this._mainWidget.layout(), this._yAxisWidget && this._yAxisWidget.layout() } }, { key: "invalidate", value: function (t) { this._yAxisWidget && this._yAxisWidget.invalidate(t), this._mainWidget.invalidate(t) } }, { key: "createHtml", value: function (t) { var e = t.id, i = t.content, n = t.style; return "yAxis" === t.position ? this._yAxisWidget && this._yAxisWidget.createHtml({ id: e, content: i, style: n }) : this._mainWidget.createHtml({ id: e, content: i, style: n }) } }, { key: "removeHtml", value: function (t) { this._yAxisWidget && this._yAxisWidget.removeHtml(t), this._mainWidget.removeHtml(t) } }, { key: "getImage", value: function (t) { var e = this._element.offsetWidth, i = this._element.offsetHeight, n = Fe("canvas", { width: "".concat(e, "px"), height: "".concat(i, "px"), boxSizing: "border-box" }), r = n.getContext("2d"), a = Zt(n); n.width = e * a, n.height = i * a, r.scale(a, a); var o = this._mainWidget.getElement(), s = o.offsetWidth, c = o.offsetHeight, h = parseInt(o.style.left, 10); if (r.drawImage(this._mainWidget.getImage(t), h, 0, s, c), this._yAxisWidget) { var l = this._yAxisWidget.getElement(), u = l.offsetWidth, f = l.offsetHeight, d = parseInt(l.style.left, 10); r.drawImage(this._yAxisWidget.getImage(t), d, 0, u, f) } return n } }, { key: "destroy", value: function () { this._container.removeChild(this._element) } }]), t }(); function Ve(t, e) { var i = Object.keys(t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(t); e && (n = n.filter((function (e) { return Object.getOwnPropertyDescriptor(t, e).enumerable }))), i.push.apply(i, n) } return i } var je = function () { function t(e) { p(this, t), this._width = 0, this._height = 0, this._initElement(e.container), this._mainView = this._createMainView(this._element, e), this._overlayView = this._createOverlayView(this._element, e), this._htmlBaseId = 0, this._htmls = new Map } return y(t, [{ key: "_initElement", value: function (t) { this._element = Fe("div", { margin: "0", padding: "0", position: "absolute", top: "0", overflow: "hidden", boxSizing: "border-box" }), t.appendChild(this._element) } }, { key: "_createMainView", value: function (t, e) { } }, { key: "_createOverlayView", value: function (t, e) { } }, { key: "createHtml", value: function (t) { var e = t.id, i = t.content, n = t.style, r = Fe("div", function (t) { for (var e = 1; arguments.length > e; e++) { var i = null != arguments[e] ? arguments[e] : {}; e % 2 ? Ve(Object(i), !0).forEach((function (e) { It(t, e, i[e]) })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(i)) : Ve(Object(i)).forEach((function (e) { Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(i, e)) })) } return t }({ boxSizing: "border-box", position: "absolute", zIndex: 12 }, void 0 === n ? {} : n)); if (C(i)) { var a = i.replace(/(^\s*)|(\s*$)/g, ""); r.innerHTML = a } else r.appendChild(i); var o = e || "html_".concat(++this._htmlBaseId); return this._htmls.has(o) ? this._element.replaceChild(r, this._htmls.get(o)) : this._element.appendChild(r), this._htmls.set(o, r), o } }, { key: "removeHtml", value: function (t) { var e = this; t ? [].concat(t).forEach((function (t) { var i = e._htmls.get(t); i && (e._element.removeChild(i), e._htmls.delete(t)) })) : (this._htmls.forEach((function (t) { e._element.removeChild(t) })), this._htmls.clear()) } }, { key: "getElement", value: function () { return this._element } }, { key: "setWidth", value: function (t) { this._width = t, this._mainView.setWidth(t), this._overlayView.setWidth(t) } }, { key: "setHeight", value: function (t) { this._height = t, this._mainView.setHeight(t), this._overlayView.setHeight(t) } }, { key: "setOffsetLeft", value: function (t) { this._element.style.left = "".concat(t, "px") } }, { key: "layout", value: function () { this._element.offsetWidth !== this._width && (this._element.style.width = "".concat(this._width, "px")), this._element.offsetHeight !== this._height && (this._element.style.height = "".concat(this._height, "px")), this._mainView.layout(), this._overlayView.layout() } }, { key: "invalidate", value: function (t) { switch (t) { case pe: this._overlayView.flush(); break; case _e: case ye: this._mainView.flush(), this._overlayView.flush() } } }, { key: "getImage", value: function (t) { var e = Fe("canvas", { width: "".concat(this._width, "px"), height: "".concat(this._height, "px"), boxSizing: "border-box" }), i = e.getContext("2d"), n = Zt(e); return e.width = this._width * n, e.height = this._height * n, i.scale(n, n), i.drawImage(this._mainView.getImage(), 0, 0, this._width, this._height), t && this._overlayView && i.drawImage(this._overlayView.getImage(), 0, 0, this._width, this._height), e } }]), t }(); function He(t) { return window.requestAnimationFrame ? window.requestAnimationFrame(t) : window.setTimeout(t, 20) } var Ne = function () { function t(e, i) { p(this, t), this._chartStore = i, this._initCanvas(e) } return y(t, [{ key: "_initCanvas", value: function (t) { this._canvas = Fe("canvas", { position: "absolute", top: "0", left: "0", zIndex: "2", boxSizing: "border-box" }), this._ctx = this._canvas.getContext("2d"), t.appendChild(this._canvas) } }, { key: "_redraw", value: function (t) { this._ctx.clearRect(0, 0, this._canvas.offsetWidth, this._canvas.offsetHeight), t && t(), this._draw() } }, { key: "_draw", value: function () { } }, { key: "setWidth", value: function (t) { this._width = t } }, { key: "setHeight", value: function (t) { this._height = t } }, { key: "layout", value: function () { var t = this; this._height !== this._canvas.offsetHeight || this._width !== this._canvas.offsetWidth ? this._redraw((function () { var e = Zt(t._canvas); t._canvas.style.width = "".concat(t._width, "px"), t._canvas.style.height = "".concat(t._height, "px"), t._canvas.width = Math.floor(t._width * e), t._canvas.height = Math.floor(t._height * e), t._ctx.scale(e, e) })) : this.flush() } }, { key: "flush", value: function () { var t, e = this; this.requestAnimationId && (t = this.requestAnimationId, window.cancelAnimationFrame || clearTimeout(t), window.cancelAnimationFrame(t), this.requestAnimationId = null), this.requestAnimationId = He((function () { e._redraw() })) } }, { key: "getImage", value: function () { return this._canvas } }]), t }(); function Ye(t) { var e = function () { if ("undefined" == typeof Reflect || !Reflect.construct) return !1; if (Reflect.construct.sham) return !1; if ("function" == typeof Proxy) return !0; try { return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], (function () { }))), !0 } catch (t) { return !1 } }(); return function () { var i, n = pt(t); if (e) { var r = pt(this).constructor; i = Reflect.construct(n, arguments, r) } else i = n.apply(this, arguments); return vt(this, i) } } var We = function (t) { dt(i, t); var e = Ye(i); function i(t, n, r, a, o) { var s; return p(this, i), (s = e.call(this, t, n))._xAxis = r, s._yAxis = a, s._paneId = o, s } return y(i, [{ key: "_draw", value: function () { this._ctx.globalCompositeOperation = "destination-over", this._drawContent() } }, { key: "_drawContent", value: function () { this._drawTechs(), this._drawGrid() } }, { key: "_drawGrid", value: function () { var t = this, e = this._chartStore.styleOptions().grid; if (e.show) { var i = e.horizontal; this._ctx.save(), i.show && (this._ctx.strokeStyle = i.color, this._ctx.lineWidth = i.size, this._ctx.setLineDash(i.style === T ? i.dashValue : []), this._yAxis.ticks().forEach((function (e) { Xt(t._ctx, e.y, 0, t._width) }))); var n = e.vertical; n.show && (this._ctx.strokeStyle = n.color, this._ctx.lineWidth = n.size, this._ctx.setLineDash(n.style === T ? n.dashValue : []), this._xAxis.ticks().forEach((function (e) { Gt(t._ctx, e.x, 0, t._height) }))), this._ctx.restore() } } }, { key: "_drawTechs", value: function () { var t = this; this._ctx.globalCompositeOperation = "source-over"; var e = this._chartStore.styleOptions().technicalIndicator; this._chartStore.technicalIndicatorStore().instances(this._paneId).forEach((function (i) { var n = i.plots, r = [], a = t._chartStore.dataList(), o = i.result, s = i.styles || e; i.render && (t._ctx.save(), i.render({ ctx: t._ctx, dataSource: { from: t._chartStore.timeScaleStore().from(), to: t._chartStore.timeScaleStore().to(), kLineDataList: t._chartStore.dataList(), technicalIndicatorDataList: o }, viewport: { width: t._width, height: t._height, dataSpace: t._chartStore.timeScaleStore().dataSpace(), barSpace: t._chartStore.timeScaleStore().barSpace() }, styles: s, xAxis: t._xAxis, yAxis: t._yAxis }), t._ctx.restore()); var c = s.line.colors || [], h = c.length, l = t._yAxis.isCandleYAxis(); t._ctx.lineWidth = 1, t._drawGraphics((function (e, u, f, d, v) { var p = o[u] || {}, _ = 0; i.shouldOhlc && !l && t._drawCandleBar(e, d, v, u, f, s.bar, H), n.forEach((function (i) { var n = p[i.key], l = t._yAxis.convertToPixel(n); switch (i.type) { case St: if (E(n)) { var f = bt(a, o, u, i, s, { color: s.circle.noChangeColor, isStroke: !0 }); t._drawCircle({ x: e, y: l, radius: d, color: f.color, isStroke: f.isStroke }) } break; case gt: if (E(n)) { var v; v = E(i.baseValue) ? i.baseValue : t._yAxis.min(); var y = t._yAxis.convertToPixel(v), m = Math.abs(y - l), x = { x: e - d, width: 2 * d, height: Math.max(1, m) }; x.y = l > y ? y : 1 > m ? y - 1 : l; var g = bt(a, o, u, i, s, { color: s.bar.noChangeColor }); x.color = g.color, x.isStroke = g.isStroke, t._drawBar(x) } break; case xt: var S = null; if (E(n) && (S = { x: e, y: l }), r[_]) r[_].coordinates.push(S); else { var k = bt(a, o, u, i, s, { color: c[_ % h] }); r[_] = { color: k.color, coordinates: [S] } } _++ } })) }), (function () { t._drawLines(r, s) })) })), this._ctx.globalCompositeOperation = "destination-over" } }, { key: "_drawGraphics", value: function (t, e) { var i = this._chartStore.visibleDataList(), n = this._chartStore.timeScaleStore().barSpace(), r = this._chartStore.timeScaleStore().halfBarSpace(); i.forEach((function (e, i) { t(e.x, e.index, e.data, r, n, i) })), e && e() } }, { key: "_drawLines", value: function (t, e) { var i = this; this._ctx.lineWidth = e.line.size, t.forEach((function (t) { i._ctx.strokeStyle = t.color, Ut(i._ctx, t.coordinates) })) } }, { key: "_drawBar", value: function (t) { t.isStroke ? (this._ctx.strokeStyle = t.color, this._ctx.strokeRect(t.x + .5, t.y, t.width - 1, t.height)) : (this._ctx.fillStyle = t.color, this._ctx.fillRect(t.x, t.y, t.width, t.height)) } }, { key: "_drawCircle", value: function (t) { this._ctx.strokeStyle = t.color, this._ctx.fillStyle = t.color, this._ctx.beginPath(), this._ctx.arc(t.x, t.y, t.radius, 2 * Math.PI, 0, !0), t.isStroke ? this._ctx.stroke() : this._ctx.fill(), this._ctx.closePath() } }, { key: "_drawCandleBar", value: function (t, e, i, n, r, a, o) { var s = r.open, c = r.close, h = r.high, l = r.low; c > s ? (this._ctx.strokeStyle = a.upColor, this._ctx.fillStyle = a.upColor) : s > c ? (this._ctx.strokeStyle = a.downColor, this._ctx.fillStyle = a.downColor) : (this._ctx.strokeStyle = a.noChangeColor, this._ctx.fillStyle = a.noChangeColor); var u = this._yAxis.convertToPixel(s), f = this._yAxis.convertToPixel(c), d = this._yAxis.convertToPixel(h), v = this._yAxis.convertToPixel(l), p = Math.min(u, f), _ = Math.max(u, f); this._ctx.fillRect(t - .5, d, 1, p - d), this._ctx.fillRect(t - .5, _, 1, v - _); var y = Math.max(1, _ - p); switch (o) { case F: this._ctx.fillRect(t - e, p, i, y); break; case z: this._ctx.strokeRect(t - e + .5, p, i - 1, y); break; case V: c > s ? this._ctx.strokeRect(t - e + .5, p, i - 1, y) : this._ctx.fillRect(t - e, p, i, y); break; case j: c > s ? this._ctx.fillRect(t - e, p, i, y) : this._ctx.strokeRect(t - e + .5, p, i - 1, y); break; default: this._ctx.fillRect(t - .5, d, 1, v - d), this._ctx.fillRect(t - e, u - .5, e, 1), this._ctx.fillRect(t, f - .5, e, 1) } } }]), i }(Ne); function Xe(t, e, i, n, r) { t.fillStyle = e, t.fillText(r, i, n) } function Ge(t) { var e = function () { if ("undefined" == typeof Reflect || !Reflect.construct) return !1; if (Reflect.construct.sham) return !1; if ("function" == typeof Proxy) return !0; try { return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], (function () { }))), !0 } catch (t) { return !1 } }(); return function () { var i, n = pt(t); if (e) { var r = pt(this).constructor; i = Reflect.construct(n, arguments, r) } else i = n.apply(this, arguments); return vt(this, i) } } var Ue = function (t) { dt(i, t); var e = Ge(i); function i(t, n, r, a, o) { var s; return p(this, i), (s = e.call(this, t, n))._xAxis = r, s._yAxis = a, s._paneId = o, s } return y(i, [{ key: "_draw", value: function () { this._ctx.textBaseline = "alphabetic", this._drawTag(), this._drawShape(), this._drawAnnotation(); var t = this._chartStore.crosshairStore().get(); if (t.kLineData) { var e = this._chartStore.styleOptions().crosshair; t.paneId === this._paneId && this._drawCrosshairLine(e, "horizontal", t.y, 0, this._width, Xt), t.paneId && this._drawCrosshairLine(e, "vertical", t.realX, 0, this._height, Gt), this._drawTooltip(t, this._chartStore.technicalIndicatorStore().instances(this._paneId)) } } }, { key: "_drawAnnotation", value: function () { var t = this, e = this._chartStore.annotationStore().get(this._paneId); e && e.forEach((function (e) { e.draw(t._ctx) })) } }, { key: "_drawTag", value: function () { var t = this, e = this._chartStore.tagStore().get(this._paneId); e && e.forEach((function (e) { e.drawMarkLine(t._ctx) })) } }, { key: "_drawShape", value: function () { var t = this; this._chartStore.shapeStore().instances(this._paneId).forEach((function (e) { e.draw(t._ctx) })); var e = this._chartStore.shapeStore().progressInstance(); e.paneId === this._paneId && e.instance.draw(this._ctx) } }, { key: "_drawTooltip", value: function (t, e) { var i = this._chartStore.styleOptions().technicalIndicator; this._drawBatchTechToolTip(t, e, i, 0, this._shouldDrawTooltip(t, i.tooltip)) } }, { key: "_drawCrosshairLine", value: function (t, e, i, n, r, a) { var o = t[e], s = o.line; t.show && o.show && s.show && (this._ctx.save(), this._ctx.lineWidth = s.size, this._ctx.strokeStyle = s.color, s.style === T && this._ctx.setLineDash(s.dashValue), a(this._ctx, i, n, r), this._ctx.restore()) } }, { key: "_drawBatchTechToolTip", value: function (t, e, i) { var n = this, r = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0, a = arguments.length > 4 ? arguments[4] : void 0; if (a) { var o = i.tooltip, s = r; e.forEach((function (e) { n._drawTechTooltip(t, e, i, s), s += o.text.marginTop + o.text.size + o.text.marginBottom })) } } }, { key: "_drawTechTooltip", value: function (t, e, i) { var n = this, r = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0, a = i.tooltip, o = a.text, s = o.marginLeft, c = o.marginRight, h = o.size, l = o.color, u = 0, f = o.marginTop + r, d = this._getTechTooltipData(t, e, i); if (this._ctx.textBaseline = "top", this._ctx.font = qt(h, o.weight, o.family), a.showName) { var v = d.name, p = Kt(this._ctx, v); Xe(this._ctx, l, u += s, f, v), u += p, a.showParams || (u += c) } if (a.showParams) { var _ = d.calcParamText, y = Kt(this._ctx, _); a.showName || (u += s), Xe(this._ctx, l, u, f, _), u += y + c } d.values.forEach((function (t) { u += s; var e = "".concat(t.title).concat(t.value), i = Kt(n._ctx, e); Xe(n._ctx, t.color || o.color, u, f, e), u += i + c })) } }, { key: "_shouldDrawTooltip", value: function (t, e) { var i = e.showRule; return i === Y || i === W && !!t.paneId } }, { key: "_getTechTooltipData", value: function (t, e, i) { var n = this._chartStore.dataList(), r = e.result, a = e.calcParams, o = ""; if (a.length > 0) { var s = a.map((function (t) { return b(t) ? t.value : t })); o = "(".concat(s.join(","), ")") } var c = []; if (k(e.createToolTipDataSource)) c = e.createToolTipDataSource({ dataSource: { from: this._chartStore.timeScaleStore().from(), to: this._chartStore.timeScaleStore().to(), kLineDataList: this._chartStore.dataList(), technicalIndicatorDataList: r }, viewport: { width: this._width, height: this._height, dataSpace: this._chartStore.timeScaleStore().dataSpace(), barSpace: this._chartStore.timeScaleStore().barSpace() }, crosshair: t, technicalIndicator: e, xAxis: this._xAxis, yAxis: this._yAxis, defaultStyles: i }) || []; else { var h = e.styles || i, l = r[t.dataIndex], u = e.precision, f = e.shouldFormatBigNumber, d = h.line.colors || [], v = d.length, p = 0; e.plots.forEach((function (e) { var a = {}; switch (e.type) { case St: a = { color: h.circle.noChangeColor }; break; case gt: a = { color: h.bar.noChangeColor }; break; case xt: a = { color: d[p % v] || i.tooltip.text.color }, p++ }var o = bt(n, r, t.dataIndex, e, h, a), s = {}; if (E(e.title)) { var _ = (l || {})[e.key]; E(_) && (_ = rt(_, u), f && (_ = at(_))), s.title = e.title, s.value = _ || i.tooltip.defaultValue, s.color = o.color } c.push(s) })) } var _ = ""; return c.length > 0 && (_ = e.shortName || e.name), { values: c, name: _, calcParamText: o } } }]), i }(Ne); function Ze(t) { var e = function () { if ("undefined" == typeof Reflect || !Reflect.construct) return !1; if (Reflect.construct.sham) return !1; if ("function" == typeof Proxy) return !0; try { return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], (function () { }))), !0 } catch (t) { return !1 } }(); return function () { var i, n = pt(t); if (e) { var r = pt(this).constructor; i = Reflect.construct(n, arguments, r) } else i = n.apply(this, arguments); return vt(this, i) } } var Ke = function (t) { dt(i, t); var e = Ze(i); function i() { return p(this, i), e.apply(this, arguments) } return y(i, [{ key: "_createMainView", value: function (t, e) { return new We(t, e.chartStore, e.xAxis, e.yAxis, e.paneId) } }, { key: "_createOverlayView", value: function (t, e) { return new Ue(t, e.chartStore, e.xAxis, e.yAxis, e.paneId) } }]), i }(je); function qe(t, e, i, n, r, a, o, s, c) { Je(t, e, r, a, o, s, c), $e(t, i, n, r, a, o, s, c) } function $e(t, e, i, n, r, a, o, s) { t.lineWidth = i, t.strokeStyle = e, Qe(t, n, r, a, o, s), t.stroke() } function Je(t, e, i, n, r, a, o) { t.fillStyle = e, Qe(t, i, n, r, a, o), t.fill() } function Qe(t, e, i, n, r, a) { t.beginPath(), t.moveTo(e + a, i), t.arcTo(e + n, i, e + n, i + r, a), t.arcTo(e + n, i + r, e, i + r, a), t.arcTo(e, i + r, e, i, a), t.arcTo(e, i, e + n, i, a), t.closePath() } function ti(t, e) { var i = Object.keys(t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(t); e && (n = n.filter((function (e) { return Object.getOwnPropertyDescriptor(t, e).enumerable }))), i.push.apply(i, n) } return i } function ei(t) { for (var e = 1; arguments.length > e; e++) { var i = null != arguments[e] ? arguments[e] : {}; e % 2 ? ti(Object(i), !0).forEach((function (e) { It(t, e, i[e]) })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(i)) : ti(Object(i)).forEach((function (e) { Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(i, e)) })) } return t } function ii(t) { var e = function () { if ("undefined" == typeof Reflect || !Reflect.construct) return !1; if (Reflect.construct.sham) return !1; if ("function" == typeof Proxy) return !0; try { return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], (function () { }))), !0 } catch (t) { return !1 } }(); return function () { var i, n = pt(t); if (e) { var r = pt(this).constructor; i = Reflect.construct(n, arguments, r) } else i = n.apply(this, arguments); return vt(this, i) } } var ni = function (t) { dt(i, t); var e = ii(i); function i(t, n, r, a) { var o; return p(this, i), (o = e.call(this, t, n))._yAxis = r, o._paneId = a, o } return y(i, [{ key: "_draw", value: function () { var t = this._chartStore.styleOptions().yAxis; t.show && (this._drawAxisLine(t), this._drawTickLines(t), this._drawTickLabels(t), this._drawTechLastValue(), this._drawLastPriceLabel()) } }, { key: "_drawAxisLine", value: function (t) { var e, i = t.axisLine; i.show && (this._ctx.strokeStyle = i.color, this._ctx.lineWidth = i.size, e = this._yAxis.isFromYAxisZero() ? 0 : this._width - 1, Gt(this._ctx, e, 0, this._height)) } }, { key: "_drawTickLines", value: function (t) { var e = this, i = t.tickLine; if (i.show) { this._ctx.lineWidth = i.size, this._ctx.strokeStyle = i.color; var n, r, a = i.length; this._yAxis.isFromYAxisZero() ? (n = 0, t.axisLine.show && (n += t.axisLine.size), r = n + a) : (n = this._width, t.axisLine.show && (n -= t.axisLine.size), r = n - a), this._yAxis.ticks().forEach((function (t) { Xt(e._ctx, t.y, n, r) })) } } }, { key: "_drawTickLabels", value: function (t) { var e = this, i = t.tickText; if (i.show) { var n, r = t.tickLine, a = r.show, o = r.length; this._yAxis.isFromYAxisZero() ? (n = i.paddingLeft, t.axisLine.show && (n += t.axisLine.size), a && (n += o), this._ctx.textAlign = "left") : (n = this._width - i.paddingRight, t.axisLine.show && (n -= t.axisLine.size), a && (n -= o), this._ctx.textAlign = "right"), this._ctx.textBaseline = "middle", this._ctx.font = qt(i.size, i.weight, i.family), this._ctx.fillStyle = i.color, this._yAxis.ticks().forEach((function (t) { e._ctx.fillText(t.v, n, t.y) })), this._ctx.textAlign = "left" } } }, { key: "_drawTechLastValue", value: function () { var t = this, e = this._chartStore.styleOptions().technicalIndicator, i = e.lastValueMark; if (i.show && i.text.show) { var n = this._chartStore.technicalIndicatorStore().instances(this._paneId), r = this._chartStore.dataList(); n.forEach((function (n) { var a = n.result || [], o = a.length, s = a[o - 1] || {}, c = { prev: { kLineData: r[o - 2], technicalIndicatorData: a[o - 2] }, current: { kLineData: r[o - 1], technicalIndicatorData: s }, next: { kLineData: null, technicalIndicatorData: null } }, h = n.precision, l = n.styles || e, u = l.line.colors || [], f = u.length, d = 0; n.plots.forEach((function (e) { var r, a = s[e.key]; switch (e.type) { case St: r = e.color && e.color(c, l) || l.circle.noChangeColor; break; case gt: r = e.color && e.color(c, l) || l.bar.noChangeColor; break; case xt: r = u[d % f], d++ }E(a) && t._drawMarkLabel(a, h, n.shouldFormatBigNumber, ei(ei({}, i.text), {}, { backgroundColor: r })) })) })) } } }, { key: "_drawLastPriceLabel", value: function () { if (this._yAxis.isCandleYAxis()) { var t = this._chartStore.styleOptions().candle.priceMark, e = t.last; if (t.show && e.show && e.text.show) { var i = this._chartStore.dataList(), n = i[i.length - 1]; if (n) { var r, a = n.close, o = n.open; r = a > o ? e.upColor : o > a ? e.downColor : e.noChangeColor, this._drawMarkLabel(a, this._chartStore.pricePrecision(), !1, ei(ei({}, e.text), {}, { backgroundColor: r })) } } } } }, { key: "_drawMarkLabel", value: function (t, e, i, n) { var r, a = n.size, o = n.weight, s = n.family, c = n.color, h = n.backgroundColor, l = n.borderRadius, u = n.paddingLeft, f = n.paddingTop, d = n.paddingRight, v = n.paddingBottom, p = this._yAxis.convertToNicePixel(t); if (this._yAxis.yAxisType() === L) { var _ = ((this._chartStore.visibleDataList()[0] || {}).data || {}).close; r = "".concat(((t - _) / _ * 100).toFixed(2), "%") } else r = rt(t, e), i && (r = at(r)); this._ctx.font = qt(a, o, s); var y, m = Kt(this._ctx, r) + u + d, x = f + a + v; y = this._yAxis.isFromYAxisZero() ? 0 : this._width - m, Je(this._ctx, h, y, p - f - a / 2, m, x, l), this._ctx.textBaseline = "middle", Xe(this._ctx, c, y + u, p, r) } }]), i }(Ne); function ri(t) { var e = function () { if ("undefined" == typeof Reflect || !Reflect.construct) return !1; if (Reflect.construct.sham) return !1; if ("function" == typeof Proxy) return !0; try { return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], (function () { }))), !0 } catch (t) { return !1 } }(); return function () { var i, n = pt(t); if (e) { var r = pt(this).constructor; i = Reflect.construct(n, arguments, r) } else i = n.apply(this, arguments); return vt(this, i) } } var ai = function (t) { dt(i, t); var e = ri(i); function i(t, n, r, a) { var o; return p(this, i), (o = e.call(this, t, n))._yAxis = r, o._paneId = a, o } return y(i, [{ key: "_draw", value: function () { this._ctx.textBaseline = "middle", this._drawTag(), this._drawCrossHairLabel() } }, { key: "_drawTag", value: function () { var t = this, e = this._chartStore.tagStore().get(this._paneId); e && e.forEach((function (e) { e.drawText(t._ctx) })) } }, { key: "_drawCrossHairLabel", value: function () { var t = this._chartStore.crosshairStore().get(); if (t.paneId === this._paneId && 0 !== this._chartStore.dataList().length) { var e = this._chartStore.styleOptions().crosshair, i = e.horizontal, n = i.text; if (e.show && i.show && n.show) { var r, a, o = this._yAxis.convertFromPixel(t.y); if (this._yAxis.yAxisType() === L) { var s = (this._chartStore.visibleDataList()[0] || {}).data || {}; r = "".concat(((o - s.close) / s.close * 100).toFixed(2), "%") } else { var c = this._chartStore.technicalIndicatorStore().instances(this._paneId), h = 0, l = !1; this._yAxis.isCandleYAxis() ? h = this._chartStore.pricePrecision() : c.forEach((function (t) { h = Math.max(t.precision, h), l || (l = t.shouldFormatBigNumber) })), r = rt(o, h), l && (r = at(r)) } var u = n.borderSize, f = $t(this._ctx, r, n), d = Jt(n); a = this._yAxis.isFromYAxisZero() ? 0 : this._width - f, qe(this._ctx, n.backgroundColor, n.borderColor, u, a, t.y - u - n.paddingTop - n.size / 2, f, d, n.borderRadius), Xe(this._ctx, n.color, a + u + n.paddingLeft, t.y, r) } } } }]), i }(Ne); function oi(t) { var e = function () { if ("undefined" == typeof Reflect || !Reflect.construct) return !1; if (Reflect.construct.sham) return !1; if ("function" == typeof Proxy) return !0; try { return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], (function () { }))), !0 } catch (t) { return !1 } }(); return function () { var i, n = pt(t); if (e) { var r = pt(this).constructor; i = Reflect.construct(n, arguments, r) } else i = n.apply(this, arguments); return vt(this, i) } } var si = function (t) { dt(i, t); var e = oi(i); function i() { return p(this, i), e.apply(this, arguments) } return y(i, [{ key: "_createMainView", value: function (t, e) { return new ni(t, e.chartStore, e.yAxis, e.paneId) } }, { key: "_createOverlayView", value: function (t, e) { return new ai(t, e.chartStore, e.yAxis, e.paneId) } }]), i }(je), ci = function () { function t(e) { p(this, t), this._chartStore = e, this._width = 0, this._height = 0, this._cacheMinValue = 0, this._cacheMaxValue = 0, this._minValue = 0, this._maxValue = 0, this._range = 0, this._ticks = [], this._initMeasureCanvas() } return y(t, [{ key: "_initMeasureCanvas", value: function () { var t = Fe("canvas"), e = Zt(t); this._measureCtx = t.getContext("2d"), this._measureCtx.scale(e, e) } }, { key: "min", value: function () { return this._minValue } }, { key: "max", value: function () { return this._maxValue } }, { key: "width", value: function () { return this._width } }, { key: "height", value: function () { return this._height } }, { key: "setWidth", value: function (t) { this._width = t } }, { key: "setHeight", value: function (t) { this._height = t } }, { key: "ticks", value: function () { return this._ticks } }, { key: "computeAxis", value: function (t) { var e = this._optimalMinMax(this._computeMinMax()); return this._minValue = e.min, this._maxValue = e.max, this._range = e.range, !(this._cacheMinValue === e.min && this._cacheMaxValue === e.max && !t) && (this._cacheMinValue = e.min, this._cacheMaxValue = e.max, this._ticks = this._optimalTicks(this._computeTicks()), !0) } }, { key: "_computeMinMax", value: function () { } }, { key: "_optimalMinMax", value: function (t) { } }, { key: "_computeTicks", value: function () { var t = []; if (this._range >= 0) { var e = this._computeInterval(this._range), i = e.interval, n = e.precision, r = ot(Math.ceil(this._minValue / i) * i, n), a = ot(Math.floor(this._maxValue / i) * i, n), o = 0, s = r; if (0 !== i) for (; a >= s;)t[o] = { v: s.toFixed(n) }, ++o, s += i } return t } }, { key: "_optimalTicks", value: function (t) { } }, { key: "_computeInterval", value: function (t) { var e, i, n, r, a = (i = Math.floor(st(e = t / 8)), n = ct(i), e = (1.5 > (r = e / n) ? 1 : 2.5 > r ? 2 : 3.5 > r ? 3 : 4.5 > r ? 4 : 5.5 > r ? 5 : 6.5 > r ? 6 : 8) * n, -20 > i ? e : +e.toFixed(0 > i ? -i : 0)), o = function (t) { var e = "" + t, i = e.indexOf("e"); if (i > 0) { var n = +e.slice(i + 1); return 0 > n ? -n : 0 } var r = e.indexOf("."); return 0 > r ? 0 : e.length - 1 - r }(a); return { interval: a, precision: o } } }]), t }(); function hi(t) { var e = function () { if ("undefined" == typeof Reflect || !Reflect.construct) return !1; if (Reflect.construct.sham) return !1; if ("function" == typeof Proxy) return !0; try { return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], (function () { }))), !0 } catch (t) { return !1 } }(); return function () { var i, n = pt(t); if (e) { var r = pt(this).constructor; i = Reflect.construct(n, arguments, r) } else i = n.apply(this, arguments); return vt(this, i) } } var li = function (t) { dt(i, t); var e = hi(i); function i(t, n, r) { var a; return p(this, i), (a = e.call(this, t))._realRange = 0, a._isCandleYAxis = n, a._paneId = r, a } return y(i, [{ key: "_computeMinMax", value: function () { var t, e = this, i = [Number.MAX_SAFE_INTEGER, Number.MIN_SAFE_INTEGER], n = [], r = !1, a = Number.MAX_SAFE_INTEGER, o = Number.MIN_SAFE_INTEGER, s = Number.MAX_SAFE_INTEGER; this._chartStore.technicalIndicatorStore().instances(this._paneId).forEach((function (i) { if (r || (r = i.shouldOhlc), s = Math.min(s, i.precision), w(i.minValue) && (a = Math.min(a, i.minValue)), w(i.maxValue) && (o = Math.max(o, i.maxValue)), i.styles) { t || (t = { top: 0, bottom: 0 }); var c = i.styles.margin; w(c.top) && (t.top = Math.max(1 > c.top ? c.top : c.top / e._height, t.top)), w(c.bottom) && (t.bottom = Math.max(1 > c.bottom ? c.bottom : c.bottom / e._height, t.bottom)) } n.push({ plots: i.plots, result: i.result }) })); var c = 4; if (this._isCandleYAxis) { var h = this._chartStore.pricePrecision(); c = s !== Number.MAX_SAFE_INTEGER ? Math.min(s, h) : h } else s !== Number.MAX_SAFE_INTEGER && (c = s); var l = this._chartStore.visibleDataList(), u = this._chartStore.styleOptions().candle, f = u.type === N, d = u.area.value, v = this._isCandleYAxis && !f || !this._isCandleYAxis && r; return l.forEach((function (t) { var r = t.index, a = t.data; v && (i[0] = Math.min(i[0], a.low), i[1] = Math.max(i[1], a.high)), e._isCandleYAxis && f && (i[0] = Math.min(i[0], a[d]), i[1] = Math.max(i[1], a[d])), n.forEach((function (t) { var e = t.result[r] || {}; t.plots.forEach((function (t) { var n = e[t.key]; E(n) && (i[0] = Math.min(i[0], n), i[1] = Math.max(i[1], n)) })) })) })), i[0] !== Number.MAX_SAFE_INTEGER && i[1] !== Number.MIN_SAFE_INTEGER ? (i[0] = Math.min(a, i[0]), i[1] = Math.max(o, i[1])) : (i[0] = 0, i[1] = 10), { min: i[0], max: i[1], precision: c, specifyMin: a, specifyMax: o, techGap: t } } }, { key: "_optimalMinMax", value: function (t) { var e, i, n = t.precision, r = t.specifyMin, a = t.specifyMax, o = t.techGap, s = t.min, c = t.max, h = this.yAxisType(); switch (h) { case L: var l = (this._chartStore.visibleDataList()[0] || {}).data || {}; w(l.close) && (s = (s - l.close) / l.close * 100, c = (c - l.close) / l.close * 100), e = .01; break; case B: s = st(s), c = st(c), e = .05 * ct(-n); break; default: e = ct(-n) }if (s === c || e > Math.abs(s - c)) { var u = r === s, f = a === c; s = u ? s : f ? s - 8 * e : s - 4 * e, c = f ? c : u ? c + 8 * e : c + 4 * e } var d, v = .2; w((i = this._isCandleYAxis ? this._chartStore.styleOptions().candle.margin : o ? { top: 0, bottom: 0 } : this._chartStore.styleOptions().technicalIndicator.margin).top) && (d = 1 > i.top ? i.top : i.top / this._height, v = o ? Math.max(o.top, d) : d); var p, _ = .1; w(i.bottom) && (p = 1 > i.bottom ? i.bottom : i.bottom / this._height, _ = o ? Math.max(o.bottom, p) : p); var y = Math.abs(c - s); return y = Math.abs((c += y * v) - (s -= y * _)), this._realRange = h === B ? Math.abs(ct(c) - ct(s)) : y, { min: s, max: c, range: y } } }, { key: "_optimalTicks", value: function (t) { var e = this, i = [], n = this.yAxisType(), r = this._chartStore.technicalIndicatorStore().instances(this._paneId), a = 0, o = !1; this._isCandleYAxis ? a = this._chartStore.pricePrecision() : r.forEach((function (t) { a = Math.max(a, t.precision), o || (o = t.shouldFormatBigNumber) })); var s, c, h = this._chartStore.styleOptions().xAxis.tickText.size; return n === B && (s = this._computeInterval(this._realRange)), t.forEach((function (t) { var r, l = t.v, u = e._innerConvertToPixel(+l); switch (n) { case L: r = "".concat(rt(l, 2), "%"); break; case B: r = ot(ct(l), s.precision), u = e._innerConvertToPixel(st(r)), r = rt(r, a); break; default: r = rt(l, a), o && (r = at(r)) }u > h && e._height - h > u && (c && c - u > 2 * h || !c) && (i.push({ v: r, y: u }), c = u) })), i } }, { key: "_innerConvertToPixel", value: function (t) { return Math.round((1 - (t - this._minValue) / this._range) * this._height) } }, { key: "isCandleYAxis", value: function () { return this._isCandleYAxis } }, { key: "yAxisType", value: function () { return this._isCandleYAxis ? this._chartStore.styleOptions().yAxis.type : R } }, { key: "isFromYAxisZero", value: function () { var t = this._chartStore.styleOptions().yAxis; return t.position === O && t.inside || t.position === D && !t.inside } }, { key: "getSelfWidth", value: function () { var t = this, e = this._chartStore.styleOptions(), i = e.yAxis, n = i.width; if (w(n)) return n; var r = 0; if (i.show && (i.axisLine.show && (r += i.axisLine.size), i.tickLine.show && (r += i.tickLine.length), i.tickText.show)) { var a = 0; this._measureCtx.font = qt(i.tickText.size, i.tickText.weight, i.tickText.family), this._ticks.forEach((function (e) { a = Math.max(a, Kt(t._measureCtx, e.v)) })), r += i.tickText.paddingLeft + i.tickText.paddingRight + a } var o = e.crosshair, s = 0; if (o.show && o.horizontal.show && o.horizontal.text.show) { var c = this._chartStore.technicalIndicatorStore().instances(this._paneId), h = 0, l = !1; c.forEach((function (t) { h = Math.max(t.precision, h), l || (l = t.shouldFormatBigNumber) })), this._measureCtx.font = qt(o.horizontal.text.size, o.horizontal.text.weight, o.horizontal.text.family); var u = 2; if (this.yAxisType() !== L) if (this._isCandleYAxis) { var f = this._chartStore.pricePrecision(), d = e.technicalIndicator.lastValueMark; u = d.show && d.text.show ? Math.max(h, f) : f } else u = h; var v = rt(this._maxValue, u); l && (v = at(v)), s += o.horizontal.text.paddingLeft + o.horizontal.text.paddingRight + 2 * o.horizontal.text.borderSize + Kt(this._measureCtx, v) } return Math.max(r, s) } }, { key: "convertFromPixel", value: function (t) { var e = (1 - t / this._height) * this._range + this._minValue; switch (this.yAxisType()) { case L: var i = (this._chartStore.visibleDataList()[0] || {}).data || {}; if (w(i.close)) return i.close * e / 100 + i.close; break; case B: return ct(e); default: return e } } }, { key: "convertToPixel", value: function (t) { var e; switch (this.yAxisType()) { case L: var i = (this._chartStore.visibleDataList()[0] || {}).data || {}; w(i.close) && (e = (t - i.close) / i.close * 100); break; case B: e = st(t); break; default: e = t }return this._innerConvertToPixel(e) } }, { key: "convertToNicePixel", value: function (t) { var e = this.convertToPixel(t); return Math.round(Math.max(.05 * this._height, Math.min(e, .98 * this._height))) } }]), i }(ci); function ui(t) { var e = function () { if ("undefined" == typeof Reflect || !Reflect.construct) return !1; if (Reflect.construct.sham) return !1; if ("function" == typeof Proxy) return !0; try { return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], (function () { }))), !0 } catch (t) { return !1 } }(); return function () { var i, n = pt(t); if (e) { var r = pt(this).constructor; i = Reflect.construct(n, arguments, r) } else i = n.apply(this, arguments); return vt(this, i) } } var fi = function (t) { dt(i, t); var e = ui(i); function i(t) { var n; return p(this, i), n = e.call(this, t), "height" in t && n.setHeight(t.height), n } return y(i, [{ key: "_initBefore", value: function (t) { this._id = t.id, this._yAxis = this._createYAxis(t) } }, { key: "_createYAxis", value: function (t) { return new li(t.chartStore, !1, t.id) } }, { key: "_createMainWidget", value: function (t, e) { return new Ke({ container: t, chartStore: e.chartStore, xAxis: e.xAxis, yAxis: this._yAxis, paneId: e.id }) } }, { key: "_createYAxisWidget", value: function (t, e) { return new si({ container: t, chartStore: e.chartStore, yAxis: this._yAxis, paneId: e.id }) } }, { key: "setHeight", value: function (t) { Be(pt(i.prototype), "setHeight", this).call(this, t), this._yAxis.setHeight(t) } }, { key: "setWidth", value: function (t, e) { Be(pt(i.prototype), "setWidth", this).call(this, t, e), this._yAxis.setWidth(e) } }, { key: "id", value: function () { return this._id } }, { key: "yAxis", value: function () { return this._yAxis } }]), i }(ze); function di(t) { var e = function () { if ("undefined" == typeof Reflect || !Reflect.construct) return !1; if (Reflect.construct.sham) return !1; if ("function" == typeof Proxy) return !0; try { return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], (function () { }))), !0 } catch (t) { return !1 } }(); return function () { var i, n = pt(t); if (e) { var r = pt(this).constructor; i = Reflect.construct(n, arguments, r) } else i = n.apply(this, arguments); return vt(this, i) } } var vi = function (t) { dt(i, t); var e = di(i); function i() { return p(this, i), e.apply(this, arguments) } return y(i, [{ key: "_drawContent", value: function () { var t = this._chartStore.styleOptions().candle; this._drawLastPriceLine(t.priceMark), t.type === N ? this._drawArea(t) : (this._drawLowHighPrice(t.priceMark, "high", "high", Number.MIN_SAFE_INTEGER, [-2, -5], (function (t, e) { if (t > e) return t })), this._drawLowHighPrice(t.priceMark, "low", "low", Number.MAX_SAFE_INTEGER, [2, 5], (function (t, e) { if (e > t) return t })), this._drawCandle(t)), this._drawTechs(), this._drawGrid() } }, { key: "_drawArea", value: function (t) { var e = this, i = [], n = [], r = Number.MAX_SAFE_INTEGER, a = t.area; this._drawGraphics((function (t, o, s, c, h, l) { var u = s[a.value]; if (w(u)) { var f = e._yAxis.convertToPixel(u); if (0 === l) { var d = t - c; n.push({ x: d, y: e._height }), n.push({ x: d, y: f }), i.push({ x: d, y: f }) } i.push({ x: t, y: f }), n.push({ x: t, y: f }), r = Math.min(r, f) } }), (function () { var t = n.length; if (t > 0) { var o = n[t - 1], s = e._chartStore.timeScaleStore().halfBarSpace(), c = o.x + s; i.push({ x: c, y: o.y }), n.push({ x: c, y: o.y }), n.push({ x: c, y: e._height }) } if (i.length > 0 && (e._ctx.lineWidth = a.lineSize, e._ctx.strokeStyle = a.lineColor, Ut(e._ctx, i)), n.length > 0) { var h = a.backgroundColor; if (S(h)) { var l = e._ctx.createLinearGradient(0, e._height, 0, r); try { h.forEach((function (t) { l.addColorStop(t.offset, t.color) })) } catch (t) { } e._ctx.fillStyle = l } else e._ctx.fillStyle = h; Wt(e._ctx, n) } })) } }, { key: "_drawCandle", value: function (t) { var e = this; this._drawGraphics((function (i, n, r, a, o) { e._drawCandleBar(i, a, o, n, r, t.bar, t.type) })) } }, { key: "_drawLowHighPrice", value: function (t, e, i, n, r, a) { var o = t[e]; if (t.show && o.show) { var s = this._chartStore.visibleDataList(), c = n, h = -1; s.forEach((function (t) { var e = t.index, r = a(it(t.data, i, n), c); r && (c = r, h = e) })); var l = this._chartStore.pricePrecision(), u = this._yAxis.convertToPixel(c), f = this._xAxis.convertToPixel(h), d = u + r[0]; this._ctx.textAlign = "left", this._ctx.lineWidth = 1, this._ctx.strokeStyle = o.color, this._ctx.fillStyle = o.color, Ut(this._ctx, [{ x: f - 2, y: d + r[0] }, { x: f, y: d }, { x: f + 2, y: d + r[0] }]); var v = d + r[1]; Ut(this._ctx, [{ x: f, y: d }, { x: f, y: v }, { x: f + 5, y: v }]), this._ctx.font = qt(o.textSize, o.textWeight, o.textFamily); var p = rt(c, l); this._ctx.textBaseline = "middle", this._ctx.fillText(p, f + 5 + o.textMargin, v) } } }, { key: "_drawLastPriceLine", value: function (t) { var e = t.last; if (t.show && e.show && e.line.show) { var i = this._chartStore.dataList(), n = i[i.length - 1]; if (n) { var r, a = n.close, o = n.open, s = this._yAxis.convertToNicePixel(a); r = a > o ? e.upColor : o > a ? e.downColor : e.noChangeColor, this._ctx.save(), this._ctx.strokeStyle = r, this._ctx.lineWidth = e.line.size, e.line.style === T && this._ctx.setLineDash(e.line.dashValue), Xt(this._ctx, s, 0, this._width), this._ctx.restore() } } } }]), i }(We); function pi(t) { var e = function () { if ("undefined" == typeof Reflect || !Reflect.construct) return !1; if (Reflect.construct.sham) return !1; if ("function" == typeof Proxy) return !0; try { return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], (function () { }))), !0 } catch (t) { return !1 } }(); return function () { var i, n = pt(t); if (e) { var r = pt(this).constructor; i = Reflect.construct(n, arguments, r) } else i = n.apply(this, arguments); return vt(this, i) } } var _i = function (t) { dt(i, t); var e = pi(i); function i() { return p(this, i), e.apply(this, arguments) } return y(i, [{ key: "_drawTooltip", value: function (t, e) { var i = this._chartStore.styleOptions(), n = i.candle, r = n.tooltip, a = i.technicalIndicator, o = a.tooltip, s = this._shouldDrawTooltip(t, r), c = this._shouldDrawTooltip(t, o); r.showType === X && o.showType === X ? this._drawCandleTooltipWithRect(t, e, n, s, a, c) : r.showType === G ? (this._drawCandleTooltipWithStandard(t.kLineData, n, s), o.showType === G ? this._drawBatchTechToolTip(t, e, a, s ? r.text.size + r.text.marginTop : 0, c) : this._drawCandleTooltipWithRect(t, e, n, !1, a, c)) : (this._drawCandleTooltipWithRect(t, e, n, s, a, !1), this._drawBatchTechToolTip(t, e, a, 0, c)) } }, { key: "_drawCandleTooltipWithStandard", value: function (t, e, i) { var n = this; if (i) { var r = this._getCandleTooltipData(t, e), a = e.tooltip, o = a.text.marginLeft, s = a.text.marginRight, c = a.text.size, h = a.text.color, l = a.labels; this._ctx.textBaseline = "top", this._ctx.font = qt(c, a.text.weight, a.text.family); var u = o, f = a.text.marginTop; l.forEach((function (t, e) { var i = Kt(n._ctx, t); Xe(n._ctx, h, u, f, t), u += i; var c, l, d = r[e] || a.defaultValue; b(d) ? (c = d.value || a.defaultValue, l = d.color || h) : (l = h, c = d); var v = Kt(n._ctx, c); Xe(n._ctx, l, u, f, c), u += v + o + s })) } } }, { key: "_drawCandleTooltipWithRect", value: function (t, e, i, n, r, a) { var o = this; if (n || a) { var s = i.tooltip, c = s.labels, h = this._getCandleTooltipData(t.kLineData, i), l = s.text.marginLeft, u = s.text.marginRight, f = s.text.marginTop, d = s.text.marginBottom, v = s.text.size, p = s.text.color, _ = s.rect, y = _.borderSize, m = _.paddingLeft, x = _.paddingRight, g = _.paddingTop, S = _.paddingBottom, k = _.offsetLeft, w = _.offsetRight, P = 0, C = 0, A = 0; this._ctx.save(), this._ctx.textBaseline = "top", n && (this._ctx.font = qt(v, s.text.weight, s.text.family), c.forEach((function (t, e) { var i, n = h[e]; i = b(n) ? n.value || s.defaultValue : n; var r = "".concat(t).concat(i), a = Kt(o._ctx, r) + l + u; P = Math.max(P, a) })), A += (d + f + v) * c.length); var I = r.tooltip, T = I.text.marginLeft, M = I.text.marginRight, O = I.text.marginTop, D = I.text.marginBottom, R = I.text.size, L = []; if (e.forEach((function (e) { L.push(o._getTechTooltipData(t, e, r)) })), a && (this._ctx.font = qt(R, I.text.weight, I.text.family), L.forEach((function (t) { t.values.forEach((function (t) { var e = t.title, i = t.value; if (E(e)) { var n = "".concat(e).concat(i), r = Kt(o._ctx, n) + T + M; P = Math.max(P, r), A += O + D + R } })) }))), 0 !== (C += P) && 0 !== A) { var B; C += 2 * y + m + x; var F = _.offsetTop, z = _.borderRadius; Je(this._ctx, _.backgroundColor, B = this._width / 2 > t.realX ? this._width - w - C : k, F, C, A += 2 * y + g + S, z), $e(this._ctx, _.borderColor, y, B, F, C, A, z); var V = B + y + m + l, j = F + y + g; if (n && (this._ctx.font = qt(v, s.text.weight, s.text.family), c.forEach((function (t, e) { j += f, o._ctx.textAlign = "left", Xe(o._ctx, p, V, j, t); var i, n, r = h[e]; b(r) ? (n = r.color || p, i = r.value || s.defaultValue) : (n = p, i = r || s.defaultValue), o._ctx.textAlign = "right", Xe(o._ctx, n, B + C - y - u - x, j, i), j += v + d }))), a) { var H = B + y + m + T; this._ctx.font = qt(R, I.text.weight, I.text.family), L.forEach((function (t) { t.values.forEach((function (t) { j += O, o._ctx.textAlign = "left", o._ctx.fillStyle = t.color || I.text.color, o._ctx.fillText(t.title, H, j), o._ctx.textAlign = "right", o._ctx.fillText(t.value, B + C - y - M - x, j), j += R + D })) })) } this._ctx.restore() } } } }, { key: "_getCandleTooltipData", value: function (t, e) { var i = this, n = e.tooltip.values, r = []; if (n) k(n) ? r = n(t, e) || [] : S(n) && (r = n); else { var a = this._chartStore.pricePrecision(), o = this._chartStore.volumePrecision(); (r = [it(t, "timestamp"), it(t, "open"), it(t, "close"), it(t, "high"), it(t, "low"), it(t, "volume")]).forEach((function (t, e) { switch (e) { case 0: r[e] = nt(i._chartStore.timeScaleStore().dateTimeFormat(), t, "YYYY-MM-DD hh:mm"); break; case r.length - 1: r[e] = at(rt(t, o)); break; default: r[e] = rt(t, a) } })) } return r } }]), i }(Ue); function yi(t) { var e = function () { if ("undefined" == typeof Reflect || !Reflect.construct) return !1; if (Reflect.construct.sham) return !1; if ("function" == typeof Proxy) return !0; try { return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], (function () { }))), !0 } catch (t) { return !1 } }(); return function () { var i, n = pt(t); if (e) { var r = pt(this).constructor; i = Reflect.construct(n, arguments, r) } else i = n.apply(this, arguments); return vt(this, i) } } var mi = function (t) { dt(i, t); var e = yi(i); function i() { return p(this, i), e.apply(this, arguments) } return y(i, [{ key: "_createMainView", value: function (t, e) { return new vi(t, e.chartStore, e.xAxis, e.yAxis, e.paneId) } }, { key: "_createOverlayView", value: function (t, e) { return new _i(t, e.chartStore, e.xAxis, e.yAxis, e.paneId) } }]), i }(Ke); function xi(t) { var e = function () { if ("undefined" == typeof Reflect || !Reflect.construct) return !1; if (Reflect.construct.sham) return !1; if ("function" == typeof Proxy) return !0; try { return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], (function () { }))), !0 } catch (t) { return !1 } }(); return function () { var i, n = pt(t); if (e) { var r = pt(this).constructor; i = Reflect.construct(n, arguments, r) } else i = n.apply(this, arguments); return vt(this, i) } } var gi = function (t) { dt(i, t); var e = xi(i); function i() { return p(this, i), e.apply(this, arguments) } return y(i, [{ key: "_createYAxis", value: function (t) { return new li(t.chartStore, !0, t.id) } }, { key: "_createMainWidget", value: function (t, e) { return new mi({ container: t, chartStore: e.chartStore, xAxis: e.xAxis, yAxis: this._yAxis, paneId: e.id }) } }]), i }(fi); function Si(t) { var e = function () { if ("undefined" == typeof Reflect || !Reflect.construct) return !1; if (Reflect.construct.sham) return !1; if ("function" == typeof Proxy) return !0; try { return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], (function () { }))), !0 } catch (t) { return !1 } }(); return function () { var i, n = pt(t); if (e) { var r = pt(this).constructor; i = Reflect.construct(n, arguments, r) } else i = n.apply(this, arguments); return vt(this, i) } } var ki = function (t) { dt(i, t); var e = Si(i); function i(t, n, r) { var a; return p(this, i), (a = e.call(this, t, n))._xAxis = r, a } return y(i, [{ key: "_draw", value: function () { var t = this._chartStore.styleOptions().xAxis; t.show && (this._drawAxisLine(t), this._drawTickLines(t), this._drawTickLabels(t)) } }, { key: "_drawAxisLine", value: function (t) { var e = t.axisLine; e.show && (this._ctx.strokeStyle = e.color, this._ctx.lineWidth = e.size, Xt(this._ctx, 0, 0, this._width)) } }, { key: "_drawTickLines", value: function (t) { var e = this, i = t.tickLine; if (i.show) { this._ctx.lineWidth = i.size, this._ctx.strokeStyle = i.color; var n = t.axisLine.show ? t.axisLine.size : 0, r = n + i.length; this._xAxis.ticks().forEach((function (t) { Gt(e._ctx, t.x, n, r) })) } } }, { key: "_drawTickLabels", value: function (t) { var e = t.tickText; if (e.show) { var i = t.tickLine; this._ctx.textBaseline = "top", this._ctx.font = qt(e.size, e.weight, e.family), this._ctx.textAlign = "center", this._ctx.fillStyle = e.color; var n = e.paddingTop; t.axisLine.show && (n += t.axisLine.size), i.show && (n += i.length); for (var r = this._xAxis.ticks(), a = r.length, o = 0; a > o; o++)this._ctx.fillText(r[o].v, r[o].x, n) } } }]), i }(Ne); function bi(t) { var e = function () { if ("undefined" == typeof Reflect || !Reflect.construct) return !1; if (Reflect.construct.sham) return !1; if ("function" == typeof Proxy) return !0; try { return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], (function () { }))), !0 } catch (t) { return !1 } }(); return function () { var i, n = pt(t); if (e) { var r = pt(this).constructor; i = Reflect.construct(n, arguments, r) } else i = n.apply(this, arguments); return vt(this, i) } } var wi = function (t) { dt(i, t); var e = bi(i); function i(t, n, r) { var a; return p(this, i), (a = e.call(this, t, n))._xAxis = r, a } return y(i, [{ key: "_draw", value: function () { this._drawCrosshairLabel() } }, { key: "_drawCrosshairLabel", value: function () { var t = this._chartStore.crosshairStore().get(); if (t.paneId) { var e = this._chartStore.styleOptions().crosshair, i = e.vertical, n = i.text; if (e.show && i.show && n.show && t.dataIndex === t.realDataIndex) { var r = t.kLineData.timestamp, a = nt(this._chartStore.timeScaleStore().dateTimeFormat(), r, "YYYY-MM-DD hh:mm"), o = n.paddingLeft, s = n.paddingRight, c = n.paddingTop, h = n.borderSize, l = $t(this._ctx, a, n), u = Jt(n), f = l - 2 * h - o - s, d = t.realX - f / 2; o + h > d ? d = o + h : d > this._width - f - h - s && (d = this._width - f - h - s), qe(this._ctx, n.backgroundColor, n.borderColor, h, d - h - o, 0, l, u, n.borderRadius), this._ctx.textBaseline = "top", Xe(this._ctx, n.color, d, h + c, a) } } } }]), i }(Ne); function Ei(t) { var e = function () { if ("undefined" == typeof Reflect || !Reflect.construct) return !1; if (Reflect.construct.sham) return !1; if ("function" == typeof Proxy) return !0; try { return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], (function () { }))), !0 } catch (t) { return !1 } }(); return function () { var i, n = pt(t); if (e) { var r = pt(this).constructor; i = Reflect.construct(n, arguments, r) } else i = n.apply(this, arguments); return vt(this, i) } } var Pi = function (t) { dt(i, t); var e = Ei(i); function i() { return p(this, i), e.apply(this, arguments) } return y(i, [{ key: "_createMainView", value: function (t, e) { return new ki(t, e.chartStore, e.xAxis) } }, { key: "_createOverlayView", value: function (t, e) { return new wi(t, e.chartStore, e.xAxis) } }]), i }(je); function Ci(t) { var e = function () { if ("undefined" == typeof Reflect || !Reflect.construct) return !1; if (Reflect.construct.sham) return !1; if ("function" == typeof Proxy) return !0; try { return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], (function () { }))), !0 } catch (t) { return !1 } }(); return function () { var i, n = pt(t); if (e) { var r = pt(this).constructor; i = Reflect.construct(n, arguments, r) } else i = n.apply(this, arguments); return vt(this, i) } } var Ai = function (t) { dt(i, t); var e = Ci(i); function i() { return p(this, i), e.apply(this, arguments) } return y(i, [{ key: "_computeMinMax", value: function () { return { min: this._chartStore.timeScaleStore().from(), max: this._chartStore.timeScaleStore().to() - 1 } } }, { key: "_optimalMinMax", value: function (t) { var e = t.min, i = t.max; return { min: e, max: i, range: i - e + 1 } } }, { key: "_optimalTicks", value: function (t) { var e = [], i = t.length, n = this._chartStore.dataList(); if (i > 0) { var r = this._chartStore.timeScaleStore().dateTimeFormat(), a = this._chartStore.styleOptions().xAxis.tickText; this._measureCtx.font = qt(a.size, a.weight, a.family); var o = Kt(this._measureCtx, "00-00 00:00"), s = this.convertToPixel(parseInt(t[0].v, 10)), c = 1; if (i > 1) { var h = this.convertToPixel(parseInt(t[1].v, 10)), l = Math.abs(h - s); o > l && (c = Math.ceil(o / l)) } for (var u = 0; i > u; u += c) { var f = parseInt(t[u].v, 10), d = n[f].timestamp, v = nt(r, d, "hh:mm"); if (0 !== u) v = this._optimalTickLabel(r, d, n[parseInt(t[u - c].v, 10)].timestamp) || v; var p = this.convertToPixel(f); e.push({ v: v, x: p, oV: d }) } if (1 === e.length) e[0].v = nt(r, e[0].oV, "YYYY-MM-DD hh:mm"); else { var _ = e[0].oV, y = e[1].oV; if (e[2]) { var m = e[2].v; /^[0-9]{2}-[0-9]{2}$/.test(m) ? e[0].v = nt(r, _, "MM-DD") : /^[0-9]{4}-[0-9]{2}$/.test(m) ? e[0].v = nt(r, _, "YYYY-MM") : /^[0-9]{4}$/.test(m) && (e[0].v = nt(r, _, "YYYY")) } else e[0].v = this._optimalTickLabel(r, _, y) || e[0].v } } return e } }, { key: "_optimalTickLabel", value: function (t, e, i) { var n = nt(t, e, "YYYY"), r = nt(t, e, "YYYY-MM"), a = nt(t, e, "MM-DD"); return n !== nt(t, i, "YYYY") ? n : r !== nt(t, i, "YYYY-MM") ? r : a !== nt(t, i, "MM-DD") ? a : null } }, { key: "getSelfHeight", value: function () { var t = this._chartStore.styleOptions(), e = t.xAxis, i = e.height; if (w(i)) return i; var n = t.crosshair, r = 0; e.show && (e.axisLine.show && (r += e.axisLine.size), e.tickLine.show && (r += e.tickLine.length), e.tickText.show && (r += e.tickText.paddingTop + e.tickText.paddingBottom + e.tickText.size)); var a = 0; return n.show && n.vertical.show && n.vertical.text.show && (a += n.vertical.text.paddingTop + n.vertical.text.paddingBottom + 2 * n.vertical.text.borderSize + n.vertical.text.size), Math.max(r, a) } }, { key: "convertFromPixel", value: function (t) { return this._chartStore.timeScaleStore().coordinateToDataIndex(t) } }, { key: "convertToPixel", value: function (t) { return this._chartStore.timeScaleStore().dataIndexToCoordinate(t) } }]), i }(ci); function Ii(t) { var e = function () { if ("undefined" == typeof Reflect || !Reflect.construct) return !1; if (Reflect.construct.sham) return !1; if ("function" == typeof Proxy) return !0; try { return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], (function () { }))), !0 } catch (t) { return !1 } }(); return function () { var i, n = pt(t); if (e) { var r = pt(this).constructor; i = Reflect.construct(n, arguments, r) } else i = n.apply(this, arguments); return vt(this, i) } } var Ti = function (t) { dt(i, t); var e = Ii(i); function i() { return p(this, i), e.apply(this, arguments) } return y(i, [{ key: "_initBefore", value: function () { this._xAxis = new Ai(this._chartStore) } }, { key: "_createMainWidget", value: function (t, e) { return new Pi({ container: t, chartStore: e.chartStore, xAxis: this._xAxis }) } }, { key: "xAxis", value: function () { return this._xAxis } }, { key: "setWidth", value: function (t, e) { Be(pt(i.prototype), "setWidth", this).call(this, t, e), this._xAxis.setWidth(t) } }, { key: "setHeight", value: function (t) { Be(pt(i.prototype), "setHeight", this).call(this, t), this._xAxis.setHeight(t) } }]), i }(ze), Mi = "mouse", Oi = "touch"; function Di(t) { return t.type === Oi } function Ri(t) { return t.type === Mi } function Li(t, e) { var i = Object.keys(t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(t); e && (n = n.filter((function (e) { return Object.getOwnPropertyDescriptor(t, e).enumerable }))), i.push.apply(i, n) } return i } function Bi(t) { for (var e = 1; arguments.length > e; e++) { var i = null != arguments[e] ? arguments[e] : {}; e % 2 ? Li(Object(i), !0).forEach((function (e) { It(t, e, i[e]) })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(i)) : Li(Object(i)).forEach((function (e) { Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(i, e)) })) } return t } var Fi = 0, zi = 2; function Vi(t) { return t.getBoundingClientRect() || { left: 0, top: 0 } } function ji(t) { return !!t.touches } function Hi(t) { t.cancelable && t.preventDefault() } function Ni(t, e) { var i = t.clientX - e.clientX, n = t.clientY - e.clientY; return Math.sqrt(i * i + n * n) } var Yi = function () { function t(e, i, n) { p(this, t), this._target = e, this._handler = i, this._options = n, this._clickCount = 0, this._clickTimeoutId = null, this._longTapTimeoutId = null, this._longTapActive = !1, this._mouseMoveStartPosition = null, this._moveExceededManhattanDistance = !1, this._cancelClick = !1, this._unsubscribeOutsideEvents = null, this._unsubscribeMousemove = null, this._unsubscribeRoot = null, this._startPinchMiddleCoordinate = null, this._startPinchDistance = 0, this._pinchPrevented = !1, this._preventDragProcess = !1, this._mousePressed = !1, this._init() } return y(t, [{ key: "setOptions", value: function () { var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}; this._options = Bi(Bi({}, this.options), t) } }, { key: "destroy", value: function () { null !== this._unsubscribeOutsideEvents && (this._unsubscribeOutsideEvents(), this._unsubscribeOutsideEvents = null), null !== this._unsubscribeMousemove && (this._unsubscribeMousemove(), this._unsubscribeMousemove = null), null !== this._unsubscribeRoot && (this._unsubscribeRoot(), this._unsubscribeRoot = null), this._clearLongTapTimeout(), this._resetClickTimeout() } }, { key: "_mouseEnterHandler", value: function (t) { var e = this; this._unsubscribeMousemove && this._unsubscribeMousemove(); var i = this._mouseMoveHandler.bind(this), n = this._mouseWheelHandler.bind(this); this._unsubscribeMousemove = function () { e._target.removeEventListener("mousemove", i), e._target.removeEventListener("wheel", n) }, this._target.addEventListener("mousemove", i), this._target.addEventListener("wheel", n, { passive: !1 }), ji(t) && this._mouseMoveHandler(t); var r = this._makeCompatEvent(t); this._processEvent(r, this._handler.mouseEnterEvent) } }, { key: "_resetClickTimeout", value: function () { null !== this._clickTimeoutId && clearTimeout(this._clickTimeoutId), this._clickCount = 0, this._clickTimeoutId = null } }, { key: "_mouseMoveHandler", value: function (t) { if (!this._mousePressed || ji(t)) { var e = this._makeCompatEvent(t); this._processEvent(e, this._handler.mouseMoveEvent) } } }, { key: "_mouseWheelHandler", value: function (t) { var e = this._makeCompatEvent(t); t.localX = e.localX, t.localY = e.localY, this._processEvent(t, this._handler.mouseWheelEvent) } }, { key: "_mouseMoveWithDownHandler", value: function (t) { if ((!("button" in t) || t.button === Fi) && null === this._startPinchMiddleCoordinate) { var e = ji(t); if (!this._preventDragProcess || !e) { this._pinchPrevented = !0; var i = this._makeCompatEvent(t), n = this._mouseMoveStartPosition, r = Math.abs(n.x - i.pageX), a = Math.abs(n.y - i.pageY), o = r + a > 5; if (o || !e) { if (o && !this._moveExceededManhattanDistance && e) { var s = .5 * r; a >= s && !this._options.treatVertTouchDragAsPageScroll || s > a && !this._options.treatHorzTouchDragAsPageScroll || (this._preventDragProcess = !0) } o && (this._moveExceededManhattanDistance = !0, this._cancelClick = !0, e && this._clearLongTapTimeout()), this._preventDragProcess || (this._processEvent(i, this._handler.pressedMouseMoveEvent), e && Hi(t)) } } } } }, { key: "_mouseUpHandler", value: function (t) { if (!("button" in t) || t.button === Fi) { var e = this._makeCompatEvent(t); this._clearLongTapTimeout(), this._mouseMoveStartPosition = null, this._mousePressed = !1, this._unsubscribeRoot && (this._unsubscribeRoot(), this._unsubscribeRoot = null), ji(t) && this._mouseLeaveHandler(t), this._processEvent(e, this._handler.mouseUpEvent), ++this._clickCount, this._clickTimeoutId && this._clickCount > 1 ? (this._processEvent(e, this._handler.mouseDoubleClickEvent), this._resetClickTimeout()) : this._cancelClick || this._processEvent(e, this._handler.mouseClickEvent), ji(t) && (Hi(t), this._mouseLeaveHandler(t), 0 === t.touches.length && (this._longTapActive = !1)) } } }, { key: "_clearLongTapTimeout", value: function () { null !== this._longTapTimeoutId && (clearTimeout(this._longTapTimeoutId), this._longTapTimeoutId = null) } }, { key: "_mouseDownHandler", value: function (t) { if (!("button" in t) || t.button === Fi || t.button === zi) { var e = this._makeCompatEvent(t); if ("button" in t && t.button === zi) this._processEvent(e, this._handler.mouseRightDownEvent); else { this._cancelClick = !1, this._moveExceededManhattanDistance = !1, this._preventDragProcess = !1, ji(t) && this._mouseEnterHandler(t), this._mouseMoveStartPosition = { x: e.pageX, y: e.pageY }, this._unsubscribeRoot && (this._unsubscribeRoot(), this._unsubscribeRoot = null); var i = this._mouseMoveWithDownHandler.bind(this), n = this._mouseUpHandler.bind(this), r = this._target.ownerDocument.documentElement; this._unsubscribeRoot = function () { r.removeEventListener("touchmove", i), r.removeEventListener("touchend", n), r.removeEventListener("mousemove", i), r.removeEventListener("mouseup", n) }, r.addEventListener("touchmove", i, { passive: !1 }), r.addEventListener("touchend", n, { passive: !1 }), this._clearLongTapTimeout(), ji(t) && 1 === t.touches.length ? this._longTapTimeoutId = setTimeout(this._longTapHandler.bind(this, t), 600) : (r.addEventListener("mousemove", i), r.addEventListener("mouseup", n)), this._mousePressed = !0, this._processEvent(e, this._handler.mouseDownEvent), this._clickTimeoutId || (this._clickCount = 0, this._clickTimeoutId = setTimeout(this._resetClickTimeout.bind(this), 500)) } } } }, { key: "_init", value: function () { var t = this; this._target.addEventListener("mouseenter", this._mouseEnterHandler.bind(this)), this._target.addEventListener("touchcancel", this._clearLongTapTimeout.bind(this)); var e, i = this._target.ownerDocument, n = function (e) { t._handler.mouseDownOutsideEvent && (e.target && t._target.contains(e.target) || t._handler.mouseDownOutsideEvent()) }; this._unsubscribeOutsideEvents = function () { i.removeEventListener("mousedown", n), i.removeEventListener("touchstart", n) }, i.addEventListener("mousedown", n), i.addEventListener("touchstart", n, { passive: !0 }), this._target.addEventListener("mouseleave", this._mouseLeaveHandler.bind(this)), this._target.addEventListener("touchstart", this._mouseDownHandler.bind(this), { passive: !0 }), e = "ontouchstart" in window || !!(window.DocumentTouch && document instanceof window.DocumentTouch), "onorientationchange" in window && (navigator.maxTouchPoints || navigator.msMaxTouchPoints || e) || this._target.addEventListener("mousedown", this._mouseDownHandler.bind(this)), this._initPinch(), this._target.addEventListener("touchmove", (function () { }), { passive: !1 }) } }, { key: "_initPinch", value: function () { var t = this; void 0 === this._handler.pinchStartEvent && void 0 === this._handler.pinchEvent && void 0 === this._handler.pinchEndEvent || (this._target.addEventListener("touchstart", (function (e) { return t._checkPinchState(e.touches) }), { passive: !0 }), this._target.addEventListener("touchmove", (function (e) { if (2 === e.touches.length && null !== t._startPinchMiddleCoordinate && void 0 !== t._handler.pinchEvent) { var i = Ni(e.touches[0], e.touches[1]); t._handler.pinchEvent(t._startPinchMiddleCoordinate, i / t._startPinchDistance), Hi(e) } }), { passive: !1 }), this._target.addEventListener("touchend", (function (e) { t._checkPinchState(e.touches) }))) } }, { key: "_checkPinchState", value: function (t) { 1 === t.length && (this._pinchPrevented = !1), 2 !== t.length || this._pinchPrevented || this._longTapActive ? this._stopPinch() : this._startPinch(t) } }, { key: "_startPinch", value: function (t) { var e = Vi(this._target); this._startPinchMiddleCoordinate = { x: (t[0].clientX - e.left + (t[1].clientX - e.left)) / 2, y: (t[0].clientY - e.top + (t[1].clientY - e.top)) / 2 }, this._startPinchDistance = Ni(t[0], t[1]), void 0 !== this._handler.pinchStartEvent && this._handler.pinchStartEvent(), this._clearLongTapTimeout() } }, { key: "_stopPinch", value: function () { null !== this._startPinchMiddleCoordinate && (this._startPinchMiddleCoordinate = null, void 0 !== this._handler.pinchEndEvent && this._handler.pinchEndEvent()) } }, { key: "_mouseLeaveHandler", value: function (t) { this._unsubscribeMousemove && this._unsubscribeMousemove(); var e = this._makeCompatEvent(t); this._processEvent(e, this._handler.mouseLeaveEvent) } }, { key: "_longTapHandler", value: function (t) { var e = this._makeCompatEvent(t); this._processEvent(e, this._handler.longTapEvent), this._cancelClick = !0, this._longTapActive = !0 } }, { key: "_processEvent", value: function (t, e) { e && e.call(this._handler, t) } }, { key: "_makeCompatEvent", value: function (t) { var e; e = "touches" in t && t.touches.length ? t.touches[0] : "changedTouches" in t && t.changedTouches.length ? t.changedTouches[0] : t; var i = Vi(this._target); return { clientX: e.clientX, clientY: e.clientY, pageX: e.pageX, pageY: e.pageY, screenX: e.screenX, screenY: e.screenY, localX: e.clientX - i.left, localY: e.clientY - i.top, ctrlKey: t.ctrlKey, altKey: t.altKey, shiftKey: t.shiftKey, metaKey: t.metaKey, type: t.type.startsWith("mouse") ? Mi : Oi, target: e.target, view: t.view } } }]), t }(), Wi = function () { function t(e, i, n, r, a, o) { p(this, t), this._chartStore = i, this._topPaneId = n, this._bottomPaneId = r, this._dragEnabled = a, this._width = 0, this._offsetLeft = 0, this._dragEventHandler = o, this._dragFlag = !1, this._initElement(e), this._initEvent(a) } return y(t, [{ key: "_initElement", value: function (t) { this._container = t, this._wrapper = Fe("div", { margin: "0", padding: "0", position: "relative", boxSizing: "border-box" }), this._element = Fe("div", { width: "100%", height: "7px", margin: "0", padding: "0", position: "absolute", top: "-3px", zIndex: "20", boxSizing: "border-box" }), this._wrapper.appendChild(this._element); var e = t.lastChild; e ? t.insertBefore(this._wrapper, e) : t.appendChild(this._wrapper) } }, { key: "_initEvent", value: function (t) { t && (this._element.style.cursor = "ns-resize", this._dragEvent = new Yi(this._element, { mouseDownEvent: this._mouseDownEvent.bind(this), mouseUpEvent: this._mouseUpEvent.bind(this), pressedMouseMoveEvent: this._pressedMouseMoveEvent.bind(this), mouseEnterEvent: this._mouseEnterEvent.bind(this), mouseLeaveEvent: this._mouseLeaveEvent.bind(this) }, { treatVertTouchDragAsPageScroll: !1, treatHorzTouchDragAsPageScroll: !0 })) } }, { key: "_mouseDownEvent", value: function (t) { this._dragFlag = !0, this._startY = t.pageY, this._dragEventHandler.startDrag(this._topPaneId, this._bottomPaneId) } }, { key: "_mouseUpEvent", value: function () { this._dragFlag = !1, this._chartStore.setDragPaneFlag(!1) } }, { key: "_pressedMouseMoveEvent", value: function (t) { this._dragEventHandler.drag(t.pageY - this._startY, this._topPaneId, this._bottomPaneId), this._chartStore.setDragPaneFlag(!0), this._chartStore.crosshairStore().set() } }, { key: "_mouseEnterEvent", value: function () { var t = this._chartStore.styleOptions().separator; this._element.style.background = t.activeBackgroundColor, this._chartStore.crosshairStore().set() } }, { key: "_mouseLeaveEvent", value: function () { this._dragFlag || (this._element.style.background = null, this._chartStore.setDragPaneFlag(!1)) } }, { key: "height", value: function () { return this._wrapper.offsetHeight } }, { key: "setSize", value: function (t, e) { this._offsetLeft = t, this._width = e, this.invalidate() } }, { key: "setDragEnabled", value: function (t) { t !== this._dragEnabled && (this._dragEnabled = t, t ? !this._dragEvent && this._initEvent(t) : (this._element.style.cursor = "default", this._dragEvent && this._dragEvent.destroy(), this._dragEvent = null)) } }, { key: "topPaneId", value: function () { return this._topPaneId } }, { key: "bottomPaneId", value: function () { return this._bottomPaneId } }, { key: "updatePaneId", value: function (t, e) { E(t) && (this._topPaneId = t), E(e) && (this._bottomPaneId = e) } }, { key: "invalidate", value: function () { var t = this._chartStore.styleOptions().separator; this._element.style.top = "".concat(-Math.floor((7 - t.size) / 2), "px"), this._wrapper.style.backgroundColor = t.color, this._wrapper.style.height = "".concat(t.size, "px"), this._wrapper.style.marginLeft = "".concat(t.fill ? 0 : this._offsetLeft, "px"), this._wrapper.style.width = t.fill ? "100%" : "".concat(this._width, "px") } }, { key: "getImage", value: function () { var t = this._chartStore.styleOptions().separator, e = this._wrapper.offsetWidth, i = t.size, n = Fe("canvas", { width: "".concat(e, "px"), height: "".concat(i, "px"), boxSizing: "border-box" }), r = n.getContext("2d"), a = Zt(n); return n.width = e * a, n.height = i * a, r.scale(a, a), r.fillStyle = t.color, r.fillRect(this._offsetLeft, 0, e, i), n } }, { key: "destroy", value: function () { this._dragEvent && this._dragEvent.destroy(), this._container.removeChild(this._wrapper) } }]), t }(), Xi = y((function t(e) { p(this, t), this._chartStore = e })); function Gi(t) { var e = function () { if ("undefined" == typeof Reflect || !Reflect.construct) return !1; if (Reflect.construct.sham) return !1; if ("function" == typeof Proxy) return !0; try { return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], (function () { }))), !0 } catch (t) { return !1 } }(); return function () { var i, n = pt(t); if (e) { var r = pt(this).constructor; i = Reflect.construct(n, arguments, r) } else i = n.apply(this, arguments); return vt(this, i) } } var Ui = function (t) { dt(i, t); var e = Gi(i); function i(t) { var n; return p(this, i), (n = e.call(this, t))._startScrollCoordinate = null, n._touchCoordinate = null, n._touchCancelCrosshair = !1, n._touchZoomed = !1, n._pinchScale = 1, n } return y(i, [{ key: "pinchStartEvent", value: function () { this._pinchScale = 1, this._touchZoomed = !0 } }, { key: "pinchEvent", value: function (t, e) { var i = 5 * (e - this._pinchScale); this._pinchScale = e, this._chartStore.timeScaleStore().zoom(i, t) } }, { key: "mouseUpEvent", value: function () { this._startScrollCoordinate = null } }, { key: "mouseLeaveEvent", value: function (t) { this._startScrollCoordinate = null, Ri(t) && this._chartStore.crosshairStore().set() } }, { key: "mouseMoveEvent", value: function (t) { Ri(t) && this._chartStore.crosshairStore().set({ x: t.localX, y: t.paneY, paneId: t.paneId }) } }, { key: "mouseWheelEvent", value: function (t) { if (Math.abs(t.deltaX) > Math.abs(t.deltaY)) { if (t.cancelable && t.preventDefault(), 0 === Math.abs(t.deltaX)) return; this._chartStore.timeScaleStore().startScroll(), this._chartStore.timeScaleStore().scroll(-t.deltaX) } else { var e = -t.deltaY / 100; if (0 === e) return; switch (t.cancelable && t.preventDefault(), t.deltaMode) { case t.DOM_DELTA_PAGE: e *= 120; break; case t.DOM_DELTA_LINE: e *= 32 }if (0 !== e) { var i = Math.sign(e) * Math.min(1, Math.abs(e)); this._chartStore.timeScaleStore().zoom(i, { x: t.localX, y: t.localY }) } } } }, { key: "mouseClickEvent", value: function (t) { Di(t) && (this._touchCoordinate || this._touchCancelCrosshair || this._touchZoomed || (this._touchCoordinate = { x: t.localX, y: t.localY }, this._chartStore.crosshairStore().set({ x: t.localX, y: t.paneY, paneId: t.paneId }))) } }, { key: "mouseDownEvent", value: function (t) { if (this._startScrollCoordinate = { x: t.localX, y: t.localY }, this._chartStore.timeScaleStore().startScroll(), Di(t)) if (this._touchZoomed = !1, this._touchCoordinate) { var e = t.localX - this._touchCoordinate.x, i = t.localY - this._touchCoordinate.y; 10 > Math.sqrt(e * e + i * i) ? (this._touchCoordinate = { x: t.localX, y: t.localY }, this._chartStore.crosshairStore().set({ x: t.localX, y: t.paneY, paneId: t.paneId })) : (this._touchCancelCrosshair = !0, this._touchCoordinate = null, this._chartStore.crosshairStore().set()) } else this._touchCancelCrosshair = !1 } }, { key: "pressedMouseMoveEvent", value: function (t) { var e = { x: t.localX, y: t.paneY, paneId: t.paneId }; if (Di(t)) { if (this._touchCoordinate) return this._touchCoordinate = { x: t.localX, y: t.localY }, void this._chartStore.crosshairStore().set(e); e = null } if (this._startScrollCoordinate) { var i = t.localX - this._startScrollCoordinate.x; this._chartStore.timeScaleStore().scroll(i, e) } } }, { key: "longTapEvent", value: function (t) { Di(t) && (this._touchCoordinate = { x: t.localX, y: t.localY }, this._chartStore.crosshairStore().set({ x: t.localX, y: t.paneY, paneId: t.paneId })) } }]), i }(Xi); function Zi(t, e) { var i = Object.keys(t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(t); e && (n = n.filter((function (e) { return Object.getOwnPropertyDescriptor(t, e).enumerable }))), i.push.apply(i, n) } return i } function Ki(t) { for (var e = 1; arguments.length > e; e++) { var i = null != arguments[e] ? arguments[e] : {}; e % 2 ? Zi(Object(i), !0).forEach((function (e) { It(t, e, i[e]) })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(i)) : Zi(Object(i)).forEach((function (e) { Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(i, e)) })) } return t } function qi(t, e) { var i = "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"]; if (!i) { if (Array.isArray(t) || (i = function (t, e) { if (!t) return; if ("string" == typeof t) return $i(t, e); var i = Object.prototype.toString.call(t).slice(8, -1); "Object" === i && t.constructor && (i = t.constructor.name); if ("Map" === i || "Set" === i) return Array.from(t); if ("Arguments" === i || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)) return $i(t, e) }(t)) || e && t && "number" == typeof t.length) { i && (t = i); var n = 0, r = function () { }; return { s: r, n: function () { return t.length > n ? { done: !1, value: t[n++] } : { done: !0 } }, e: function (t) { throw t }, f: r } } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.") } var a, o = !0, s = !1; return { s: function () { i = i.call(t) }, n: function () { var t = i.next(); return o = t.done, t }, e: function (t) { s = !0, a = t }, f: function () { try { o || null == i.return || i.return() } finally { if (s) throw a } } } } function $i(t, e) { (null == e || e > t.length) && (e = t.length); for (var i = 0, n = Array(e); e > i; i++)n[i] = t[i]; return n } function Ji(t) { var e = function () { if ("undefined" == typeof Reflect || !Reflect.construct) return !1; if (Reflect.construct.sham) return !1; if ("function" == typeof Proxy) return !0; try { return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], (function () { }))), !0 } catch (t) { return !1 } }(); return function () { var i, n = pt(t); if (e) { var r = pt(this).constructor; i = Reflect.construct(n, arguments, r) } else i = n.apply(this, arguments); return vt(this, i) } } var Qi = function (t) { dt(i, t); var e = Ji(i); function i(t, n) { var r; return p(this, i), (r = e.call(this, t))._yAxis = n, r } return y(i, [{ key: "_performOverlayMouseHover", value: function (t, e, i, n) { var r; if (t) { var a, o = qi(t); try { for (o.s(); !(a = o.n()).done;) { if (r = a.value.checkEventCoordinateOn(i)) break } } catch (t) { o.e(t) } finally { o.f() } r && e.id === r.id || (e.id && e.instance && Ri(n) && e.instance.onMouseLeave({ id: e.id, points: e.instance.points(), event: n }), r && r.id !== e.id && r.instance && Ri(n) && r.instance.onMouseEnter({ id: r.id, points: r.instance.points(), event: n })) } return r } }, { key: "mouseUpEvent", value: function () { this._chartStore.shapeStore().updatePressedInstance() } }, { key: "mouseMoveEvent", value: function (t) { if (this._waitingForMouseMove) return !1; this._waitingForMouseMove = !0; var e, i, n, r = { x: t.localX, y: t.paneY }, a = this._chartStore.shapeStore().progressInstance(), o = a.paneId, s = a.instance; if (s && s.isDrawing()) t.paneId && (s.isStart() && this._chartStore.shapeStore().updateProgressInstance(this._yAxis(t.paneId), t.paneId), o === t.paneId && s.mouseMoveForDrawing(r, t), e = s.checkEventCoordinateOn(r)), i = { id: "", element: re, elementIndex: -1 }; else { var c = this._chartStore.annotationStore().get(t.paneId), h = this._chartStore.shapeStore().instances(t.paneId), l = this._chartStore.shapeStore().mouseOperate().hover, u = this._chartStore.annotationStore().mouseOperate(); e = this._performOverlayMouseHover(h, l, r, t), n = this._performOverlayMouseHover(c, u, r, t) } this._chartStore.shapeStore().setMouseOperate({ hover: e || { id: "", element: re, elementIndex: -1 }, click: i }), this._chartStore.annotationStore().setMouseOperate(n || { id: "" }), this._waitingForMouseMove = !1 } }, { key: "mouseDownEvent", value: function (t) { var e, i = { x: t.localX, y: t.paneY }, n = this._chartStore.shapeStore().progressInstance(), r = n.instance, a = n.paneId, o = { id: "", element: re, elementIndex: -1 }; if (r && r.isDrawing() && a === t.paneId) r.mouseLeftButtonDownForDrawing(), e = r.checkEventCoordinateOn(i); else { var s, c = qi(this._chartStore.shapeStore().instances(t.paneId)); try { for (c.s(); !(s = c.n()).done;) { var h = s.value; if (e = h.checkEventCoordinateOn(i)) { this._chartStore.shapeStore().updatePressedInstance(h, t.paneId, e.element), e.element === ne ? o = Ki({}, e) : h.startPressedOtherMove(i), h.onClick({ id: e.id, points: h.points(), event: t }); break } } } catch (t) { c.e(t) } finally { c.f() } var l = this._chartStore.annotationStore().get(t.paneId); if (l) { var u, f = qi(l); try { for (f.s(); !(u = f.n()).done;) { var d = u.value, v = d.checkEventCoordinateOn(i); if (v) { d.onClick({ id: v.id, points: d.points(), event: t }); break } } } catch (t) { f.e(t) } finally { f.f() } } } this._chartStore.shapeStore().setMouseOperate({ hover: o, click: e || { id: "", element: re, elementIndex: -1 } }) && this._chartStore.invalidate(pe) } }, { key: "mouseRightDownEvent", value: function (t) { var e, i = this._chartStore.shapeStore().progressInstance().instance; i ? e = i : e = this._chartStore.shapeStore().instances(t.paneId).find((function (e) { return e.checkEventCoordinateOn({ x: t.localX, y: t.paneY }) })); e && !e.onRightClick({ id: e.id(), points: e.points(), event: t }) && this._chartStore.shapeStore().removeInstance(e.id()); var n = this._chartStore.annotationStore().get(t.paneId); if (n) { var r = n.find((function (e) { return e.checkEventCoordinateOn({ x: t.localX, y: t.paneY }) })); r && r.onRightClick({ id: r.id(), points: r.points(), event: t }) } } }, { key: "pressedMouseMoveEvent", value: function (t) { var e = this._chartStore.shapeStore().pressedInstance(), i = e.instance; if (i && e.paneId === t.paneId) { var n = { x: t.localX, y: t.paneY }; e.element === ne ? i.mousePressedPointMove(n, t) : i.mousePressedOtherMove(n, t), this._chartStore.crosshairStore().set({ x: t.localX, y: t.paneY, paneId: t.paneId }) } } }]), i }(Xi); function tn(t) { var e = function () { if ("undefined" == typeof Reflect || !Reflect.construct) return !1; if (Reflect.construct.sham) return !1; if ("function" == typeof Proxy) return !0; try { return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], (function () { }))), !0 } catch (t) { return !1 } }(); return function () { var i, n = pt(t); if (e) { var r = pt(this).constructor; i = Reflect.construct(n, arguments, r) } else i = n.apply(this, arguments); return vt(this, i) } } var en = "Equal", nn = "Minus", rn = "ArrowLeft", an = "ArrowRight", on = function (t) { dt(i, t); var e = tn(i); function i() { return p(this, i), e.apply(this, arguments) } return y(i, [{ key: "keyBoardDownEvent", value: function (t) { if (t.shiftKey) switch (t.code) { case en: this._chartStore.timeScaleStore().zoom(.5); break; case nn: this._chartStore.timeScaleStore().zoom(-.5); break; case rn: this._chartStore.timeScaleStore().startScroll(), this._chartStore.timeScaleStore().scroll(-3 * this._chartStore.timeScaleStore().dataSpace()); break; case an: this._chartStore.timeScaleStore().startScroll(), this._chartStore.timeScaleStore().scroll(3 * this._chartStore.timeScaleStore().dataSpace()) } } }]), i }(Xi), sn = function () { function t(e, i, n) { p(this, t), this._target = e, this._chartStore = i, this._chartContentLeftRight = {}, this._chartContentTopBottom = {}, this._paneContentSize = {}, this._event = new Yi(this._target, { pinchStartEvent: this._pinchStartEvent.bind(this), pinchEvent: this._pinchEvent.bind(this), mouseUpEvent: this._mouseUpEvent.bind(this), mouseClickEvent: this._mouseClickEvent.bind(this), mouseDownEvent: this._mouseDownEvent.bind(this), mouseRightDownEvent: this._mouseRightDownEvent.bind(this), mouseLeaveEvent: this._mouseLeaveEvent.bind(this), mouseMoveEvent: this._mouseMoveEvent.bind(this), mouseWheelEvent: this._mouseWheelEvent.bind(this), pressedMouseMoveEvent: this._pressedMouseMoveEvent.bind(this), longTapEvent: this._longTapEvent.bind(this) }, { treatVertTouchDragAsPageScroll: !0, treatHorzTouchDragAsPageScroll: !1 }), this._boundKeyBoardDownEvent = this._keyBoardDownEvent.bind(this), this._target.addEventListener("keydown", this._boundKeyBoardDownEvent), this._boundContextMenuEvent = function (t) { t.preventDefault() }, this._target.addEventListener("contextmenu", this._boundContextMenuEvent, !1), this._zoomScrollEventHandler = new Ui(i), this._overlayEventHandler = new Qi(i, n), this._keyBoardEventHandler = new on(i) } return y(t, [{ key: "_keyBoardDownEvent", value: function (t) { this._keyBoardEventHandler.keyBoardDownEvent(t) } }, { key: "_pinchStartEvent", value: function () { this._zoomScrollEventHandler.pinchStartEvent() } }, { key: "_pinchEvent", value: function (t, e) { this._zoomScrollEventHandler.pinchEvent(t, e) } }, { key: "_mouseUpEvent", value: function (t) { this._checkEventInChartContent(t) && (this._target.style.cursor = "crosshair"), this._zoomScrollEventHandler.mouseUpEvent(t), this._shouldPerformOverlayEvent() && this._overlayEventHandler.mouseUpEvent(t) } }, { key: "_mouseLeaveEvent", value: function (t) { this._zoomScrollEventHandler.mouseLeaveEvent(t) } }, { key: "_mouseMoveEvent", value: function (t) { if (t.target instanceof HTMLCanvasElement) if (this._checkEventInChartContent(t)) { this._target.style.cursor = "crosshair"; var e = this._compatChartEvent(t, !0); this._shouldPerformOverlayEvent() && this._overlayEventHandler.mouseMoveEvent(e), this._chartStore.dragPaneFlag() || this._zoomScrollEventHandler.mouseMoveEvent(e) } else this._target.style.cursor = "default", this._zoomScrollEventHandler.mouseLeaveEvent(t); else this._target.style.cursor = "default", this._chartStore.crosshairStore().set() } }, { key: "_mouseWheelEvent", value: function (t) { this._checkZoomScroll() && this._checkEventInChartContent(t) && this._zoomScrollEventHandler.mouseWheelEvent(this._compatChartEvent(t)) } }, { key: "_mouseClickEvent", value: function (t) { this._checkZoomScroll() && this._checkEventInChartContent(t) && (this._zoomScrollEventHandler.mouseClickEvent(this._compatChartEvent(t, !0)), this._modifyEventOptions(t)) } }, { key: "_mouseDownEvent", value: function (t) { if (this._checkEventInChartContent(t)) { this._target.style.cursor = "pointer"; var e = this._compatChartEvent(t, !0); this._shouldPerformOverlayEvent() && this._overlayEventHandler.mouseDownEvent(e), this._checkZoomScroll() && (this._zoomScrollEventHandler.mouseDownEvent(e), this._modifyEventOptions(t)) } } }, { key: "_mouseRightDownEvent", value: function (t) { this._shouldPerformOverlayEvent() && this._checkEventInChartContent(t) && this._overlayEventHandler.mouseRightDownEvent(this._compatChartEvent(t, !0)) } }, { key: "_pressedMouseMoveEvent", value: function (t) { if (this._checkEventInChartContent(t)) { var e = this._compatChartEvent(t, !0); this._checkZoomScroll() ? (this._zoomScrollEventHandler.pressedMouseMoveEvent(e), this._modifyEventOptions(t)) : this._overlayEventHandler.pressedMouseMoveEvent(e) } } }, { key: "_longTapEvent", value: function (t) { this._checkZoomScroll() && this._checkEventInChartContent(t) && (this._zoomScrollEventHandler.longTapEvent(this._compatChartEvent(t, !0)), this._modifyEventOptions(t)) } }, { key: "_checkZoomScroll", value: function () { return !this._chartStore.dragPaneFlag() && !this._chartStore.shapeStore().isPressed() && !this._chartStore.shapeStore().isDrawing() } }, { key: "_shouldPerformOverlayEvent", value: function () { return !this._chartStore.shapeStore().isEmpty() || !this._chartStore.annotationStore().isEmpty() } }, { key: "_modifyEventOptions", value: function (t) { Di(t) && this._chartStore.crosshairStore().get().paneId ? this._event.setOptions({ treatVertTouchDragAsPageScroll: !1 }) : this._event.setOptions({ treatVertTouchDragAsPageScroll: !0 }) } }, { key: "_compatChartEvent", value: function (t, e) { if (e) for (var i in this._paneContentSize) if (Object.prototype.hasOwnProperty.call(this._paneContentSize, i)) { var n = this._paneContentSize[i]; if (t.localY > n.contentTop && n.contentBottom > t.localY) { t.paneY = t.localY - n.contentTop, t.paneId = i; break } } return t.localX -= this._chartContentLeftRight.contentLeft, t } }, { key: "_checkEventInChartContent", value: function (t) { return t.localX > this._chartContentLeftRight.contentLeft && this._chartContentLeftRight.contentRight > t.localX && t.localY > this._chartContentTopBottom.contentTop && this._chartContentTopBottom.contentBottom > t.localY } }, { key: "setChartContentLeftRight", value: function (t) { this._chartContentLeftRight = t } }, { key: "setChartContentTopBottom", value: function (t) { this._chartContentTopBottom = t } }, { key: "setPaneContentSize", value: function (t) { this._paneContentSize = t } }, { key: "destroy", value: function () { this._event.destroy(), this._target.removeEventListener("keydown", this._boundKeyBoardDownEvent), this._target.removeEventListener("contextmenu", this._boundContextMenuEvent) } }]), t }(); function cn(t) { var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 20, i = 0; return function () { var n = Date.now(), r = this, a = arguments; n - i > e && (t.apply(r, a), i = n) } } function hn(t) { var e = function () { if ("undefined" == typeof Reflect || !Reflect.construct) return !1; if (Reflect.construct.sham) return !1; if ("function" == typeof Proxy) return !0; try { return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], (function () { }))), !0 } catch (t) { return !1 } }(); return function () { var i, n = pt(t); if (e) { var r = pt(this).constructor; i = Reflect.construct(n, arguments, r) } else i = n.apply(this, arguments); return vt(this, i) } } var ln = function (t) { dt(i, t); var e = hn(i); function i(t) { var n, r = t.id, a = t.point, o = t.chartStore, s = t.xAxis, c = t.yAxis, h = t.styles; return p(this, i), (n = e.call(this, { id: r, chartStore: o, xAxis: s, yAxis: c }))._point = a, n._symbolCoordinate = {}, n.setStyles(h, o.styleOptions().annotation), n } return y(i, [{ key: "_drawSymbol", value: function (t, e, i) { var n = this._chartStore.timeScaleStore().barSpace(), r = i.symbol, a = r.size, o = r.activeSize, s = e ? w(o) ? o : n : w(a) ? a : n, c = e ? r.activeColor : r.color; switch (r.type) { case U: Ot(t, c, this._symbolCoordinate, s / 2); break; case Z: !function (t, e, i, n, r, a) { t.fillStyle = e, t.fillRect(i, n, r, a) }(t, c, this._symbolCoordinate.x - s / 2, this._symbolCoordinate.y - s / 2, s, s); break; case q: !function (t, e, i, n, r) { t.fillStyle = e, t.beginPath(), t.moveTo(i.x - n / 2, i.y), t.lineTo(i.x, i.y - r / 2), t.lineTo(i.x + n / 2, i.y), t.lineTo(i.x, i.y + r / 2), t.closePath(), t.fill() }(t, c, this._symbolCoordinate, s, s); break; case K: !function (t, e, i, n, r) { t.fillStyle = e, t.beginPath(), t.moveTo(i.x - n / 2, i.y + r / 2), t.lineTo(i.x, i.y - r / 2), t.lineTo(i.x + n / 2, i.y + r / 2), t.closePath(), t.fill() }(t, c, this._symbolCoordinate, s, s); break; case $: t.save(), this.drawCustomSymbol({ ctx: t, point: this._point, coordinate: this._symbolCoordinate, viewport: { width: this._xAxis.width(), height: this._yAxis.height(), barSpace: n }, styles: r, isActive: e }), t.restore() } } }, { key: "draw", value: function (t) { var e = this._styles || this._chartStore.styleOptions().annotation, i = e.offset || [0, 0], n = 0; switch (e.position) { case J: n = this._yAxis.convertToPixel(this._point.value); break; case Q: n = 0; break; case tt: n = this._yAxis.height() }this._symbolCoordinate.y = n + i[0]; var r = this._id === this._chartStore.annotationStore().mouseOperate().id; this._drawSymbol(t, r, e), this.drawExtend && (t.save(), this.drawExtend({ ctx: t, point: this._point, coordinate: this._symbolCoordinate, viewport: { width: this._xAxis.width(), height: this._yAxis.height() }, styles: e, isActive: r }), t.restore()) } }, { key: "checkEventCoordinateOn", value: function (t) { var e, i, n, r, a, o = this._chartStore.timeScaleStore().barSpace(), s = (this._styles || this._chartStore.styleOptions().annotation).symbol, c = w(s.size) ? s.size : o; switch (s.type) { case U: e = jt(this._symbolCoordinate, c / 2, t); break; case Z: e = function (t, e, i) { return !(t.x > i.x || i.x > e.x || t.y > i.y || i.y > e.y) }({ x: this._symbolCoordinate.x - c / 2, y: this._symbolCoordinate.y - c / 2 }, { x: this._symbolCoordinate.x + c / 2, y: this._symbolCoordinate.y + c / 2 }, t); break; case q: e = (n = c) * (r = c) / 2 + 2 > Math.abs((i = this._symbolCoordinate).x - (a = t).x) * r + Math.abs(i.y - a.y) * n; break; case K: e = function (t, e) { var i = Dt(t[0], t[1], t[2]), n = Dt(t[0], t[1], e) + Dt(t[0], t[2], e) + Dt(t[1], t[2], e); return 2 > Math.abs(i - n) }([{ x: this._symbolCoordinate.x - c / 2, y: this._symbolCoordinate.y + c / 2 }, { x: this._symbolCoordinate.x, y: this._symbolCoordinate.y - c / 2 }, { x: this._symbolCoordinate.x + c / 2, y: this._symbolCoordinate.y + c / 2 }], t); break; case $: e = this.checkEventCoordinateOnCustomSymbol({ eventCoordinate: t, coordinate: this._symbolCoordinate, size: c }) }if (e) return { id: this._id, instance: this } } }, { key: "createSymbolCoordinate", value: function (t) { var e = this._styles || this._chartStore.styleOptions().annotation; this._symbolCoordinate = { x: t + (e.offset || [0, 0])[1] } } }, { key: "points", value: function () { return this._point } }, { key: "checkEventCoordinateOnCustomSymbol", value: function (t) { } }, { key: "drawCustomSymbol", value: function (t) { } }]), i }(Mt); function un(t) { var e = function () { if ("undefined" == typeof Reflect || !Reflect.construct) return !1; if (Reflect.construct.sham) return !1; if ("function" == typeof Proxy) return !0; try { return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], (function () { }))), !0 } catch (t) { return !1 } }(); return function () { var i, n = pt(t); if (e) { var r = pt(this).constructor; i = Reflect.construct(n, arguments, r) } else i = n.apply(this, arguments); return vt(this, i) } } var fn = function (t) { dt(i, t); var e = un(i); function i(t) { var n, r = t.id, a = t.point, o = t.text, s = t.mark, c = t.chartStore, h = t.xAxis, l = t.yAxis, u = t.styles; return p(this, i), (n = e.call(this, { id: r, chartStore: c, xAxis: h, yAxis: l }))._point = a || {}, n._text = o, n._mark = s, n.setStyles(u, c.styleOptions().tag), n } return y(i, [{ key: "update", value: function (t) { var e = t.point, i = t.text, n = t.mark, r = t.styles, a = !1; return b(e) && (this._point = e, a = !0), E(i) && (this._text = i, a = !0), E(n) && (this._mark = n, a = !0), this.setStyles(r, this._chartStore.styleOptions().tag) && (a = !0), a } }, { key: "drawMarkLine", value: function (t) { var e = this._chartStore.styleOptions(), i = e.yAxis, n = this._styles || e.tag, r = this._getY(n); t.save(), this._drawLine(t, r, n, i), this._drawMark(t, r, n, i), t.restore() } }, { key: "drawText", value: function (t) { if (E(this._text)) { var e = this._chartStore.styleOptions(), i = this._styles || e.tag, n = i.text; t.save(); var r, a = $t(t, this._text, n), o = Jt(n); r = this._yAxis.isFromYAxisZero() ? 0 : this._yAxis.width() - a; var s = this._getY(i); qe(t, n.backgroundColor, n.borderColor, n.borderSize, r, s - o / 2, a, o, n.borderRadius), Xe(t, n.color, r + n.paddingLeft, s, this._text), t.restore() } } }, { key: "_drawLine", value: function (t, e, i, n) { var r = i.line; if (r.show) { t.save(); var a = $t(t, this._text, i.text), o = $t(t, this._mark, i.mark); t.strokeStyle = r.color, t.lineWidth = r.size, r.style === T && t.setLineDash(r.dashValue); var s = i.mark.offset, c = [], h = E(this._text), l = E(this._mark); n.inside ? n.position === O ? h && l ? s > 0 ? (c.push([a, a + s]), c.push([a + s + o, this._xAxis.width()])) : c.push(Math.min(a, o) > Math.abs(s) ? [a + s + o, this._xAxis.width()] : [Math.max(a, o), this._xAxis.width()]) : h ? c.push([a, this._xAxis.width()]) : l ? s > 0 ? (c.push([0, s]), c.push([s + o, this._xAxis.width()])) : c.push(o > Math.abs(s) ? [s + o, this._xAxis.width()] : [0, this._xAxis.width()]) : c.push([0, this._xAxis.width()]) : h && l ? 0 > s ? (c.push([0, this._xAxis.width() - a + s - o]), c.push([this._xAxis.width() - a + s, this._xAxis.width() - a])) : c.push(Math.min(a, o) > s ? [0, this._xAxis.width() - a - o + s] : [0, this._xAxis.width() - Math.max(a, o)]) : h ? c.push([0, this._xAxis.width() - a]) : l ? 0 > s ? (c.push([0, this._xAxis.width() + s - o]), c.push([this._xAxis.width() + s, this._xAxis.width()])) : c.push(o > s ? [0, this._xAxis.width() - o + s] : [0, this._xAxis.width()]) : c.push([0, this._xAxis.width()]) : n.position === O ? l ? s > 0 ? (c.push([0, s]), c.push([s + o, this._xAxis.width()])) : c.push(o > Math.abs(s) ? [o + s, this._xAxis.width()] : [0, this._xAxis.width()]) : c.push([0, this._xAxis.width()]) : l ? 0 > s ? (c.push([0, this._xAxis.width() - o + s]), c.push([this._xAxis.width() + s, this._xAxis.width()])) : c.push(o > s ? [0, this._xAxis.width() - o + s] : [0, this._xAxis.width()]) : c.push([0, this._xAxis.width()]), c.forEach((function (i) { Xt(t, e, i[0], i[1]) })), t.restore() } } }, { key: "_drawMark", value: function (t, e, i, n) { if (E(this._mark)) { var r, a = i.mark, o = $t(t, this._mark, a), s = Jt(a); if (n.inside) { var c = 0; E(this._text) && (c = $t(t, this._text, i.text)), r = n.position === O ? c : this._xAxis.width() - c - o } else r = n.position === O ? 0 : this._xAxis.width() - o; qe(t, a.backgroundColor, a.borderColor, a.borderSize, r += a.offset, e - s / 2, o, s, a.borderRadius), t.textBaseline = "middle", t.font = qt(a.size, a.weight, a.family), Xe(t, a.color, r + a.paddingLeft, e, this._mark) } } }, { key: "_getY", value: function (t) { var e = t.offset; switch (t.position) { case Q: return e; case tt: return this._yAxis.height() + e; default: return this._yAxis.convertToNicePixel(this._point.value) + e } } }]), i }(Mt); function dn(t, e) { var i = "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"]; if (!i) { if (Array.isArray(t) || (i = function (t, e) { if (!t) return; if ("string" == typeof t) return vn(t, e); var i = Object.prototype.toString.call(t).slice(8, -1); "Object" === i && t.constructor && (i = t.constructor.name); if ("Map" === i || "Set" === i) return Array.from(t); if ("Arguments" === i || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)) return vn(t, e) }(t)) || e && t && "number" == typeof t.length) { i && (t = i); var n = 0, r = function () { }; return { s: r, n: function () { return t.length > n ? { done: !1, value: t[n++] } : { done: !0 } }, e: function (t) { throw t }, f: r } } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.") } var a, o = !0, s = !1; return { s: function () { i = i.call(t) }, n: function () { var t = i.next(); return o = t.done, t }, e: function (t) { s = !0, a = t }, f: function () { try { o || null == i.return || i.return() } finally { if (s) throw a } } } } function vn(t, e) { (null == e || e > t.length) && (e = t.length); for (var i = 0, n = Array(e); e > i; i++)n[i] = t[i]; return n } var pn = "technical_indicator_pane_", _n = "candle_pane", yn = function () { function t(e, i) { var n = this; p(this, t), this._initChartContainer(e), this._shapeBaseId = 0, this._paneBaseId = 0, this._separatorDragStartTopPaneHeight = 0, this._separatorDragStartBottomPaneHeight = 0, this._chartStore = new Re(i, { invalidate: this._invalidatePane.bind(this), crosshair: this._crosshairObserver.bind(this) }), this._xAxisPane = new Ti({ id: "x_axis_pane", container: this._chartContainer, chartStore: this._chartStore }), this._panes = new Map([[_n, new gi({ container: this._chartContainer, chartStore: this._chartStore, xAxis: this._xAxisPane.xAxis(), id: _n })]]), this._separators = new Map, this._chartWidth = {}, this._chartHeight = {}, this._chartEvent = new sn(this._chartContainer, this._chartStore, (function (t) { return n._panes.get(t).yAxis() })), this.adjustPaneViewport(!0, !0, !0) } return y(t, [{ key: "_initChartContainer", value: function (t) { this._container = t, this._chartContainer = Fe("div", { userSelect: "none", webkitUserSelect: "none", msUserSelect: "none", MozUserSelect: "none", webkitTapHighlightColor: "transparent", position: "relative", outline: "none", borderStyle: "none", width: "100%", cursor: "crosshair", boxSizing: "border-box" }), this._chartContainer.tabIndex = 1, t.appendChild(this._chartContainer) } }, { key: "_crosshairObserver", value: function (t) { var e = this, i = t.paneId, n = t.dataIndex, r = t.kLineData, a = t.x, o = t.y; if (this._chartStore.actionStore().has(ht.CROSSHAIR) || this._chartStore.actionStore().has(ht.TOOLTIP)) { var s = {}; this._panes.forEach((function (t, i) { var a = {}, o = []; e.chartStore().technicalIndicatorStore().instances(i).forEach((function (t) { var e = t.result[n]; a[t.name] = e, o.push({ name: t.name, data: e }) })), s[i] = a, e._chartStore.actionStore().execute(ht.TOOLTIP, { paneId: i, dataIndex: n, kLineData: r, technicalIndicatorData: o }) })), i && this._chartStore.actionStore().execute(ht.CROSSHAIR, { paneId: i, coordinate: { x: a, y: o }, dataIndex: n, kLineData: r, technicalIndicatorData: s }) } } }, { key: "_separatorStartDrag", value: function (t, e) { this._separatorDragStartTopPaneHeight = this._panes.get(t).height(), this._separatorDragStartBottomPaneHeight = this._panes.get(e).height() } }, { key: "_separatorDrag", value: function (t, e, i) { var n = this._separatorDragStartTopPaneHeight + t, r = this._separatorDragStartBottomPaneHeight - t; n > this._separatorDragStartTopPaneHeight + this._separatorDragStartBottomPaneHeight && (n = this._separatorDragStartTopPaneHeight + this._separatorDragStartBottomPaneHeight, r = 0), 0 > n && (n = 0, r = this._separatorDragStartTopPaneHeight + this._separatorDragStartBottomPaneHeight), this._panes.get(e).setHeight(n), this._panes.get(i).setHeight(r), this._chartStore.actionStore().execute(ht.PANE_DRAG, { topPaneId: e, bottomPaneId: i, topPaneHeight: n, bottomPaneHeight: r }), this.adjustPaneViewport(!0, !0, !0, !0, !0) } }, { key: "_invalidatePane", value: function () { var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : ye; if (t === pe) this._xAxisPane.invalidate(t), this._panes.forEach((function (e) { e.invalidate(t) })); else { var e = !1; this._panes.forEach((function (t) { var i = t.yAxis().computeAxis(); i && (e = i) })), this.adjustPaneViewport(!1, e, !0) } } }, { key: "_measurePaneHeight", value: function () { var t = this, e = this._chartStore.styleOptions(), i = this._container.offsetHeight, n = e.separator.size, r = n * this._separators.size, a = this._xAxisPane.xAxis().getSelfHeight(), o = i - a - r, s = 0; this._panes.forEach((function (t) { if (t.id() !== _n) { var e = t.height(); s + e > o ? (t.setHeight(o - s), s = o) : s += e } })); var c = o - s, h = {}; h.candle_pane = { contentTop: 0, contentBottom: c }; var l = c, u = c; this._panes.get(_n).setHeight(c), this._chartHeight.candle_pane = c, this._panes.forEach((function (e) { if (e.id() !== _n) { var i = e.height(); u += i + n, h[e.id()] = { contentTop: l, contentBottom: u }, t._chartHeight[e.id()] = i, l = u } })), this._xAxisPane.setHeight(a), this._chartHeight.xAxis = a, this._chartHeight.total = i, this._chartEvent.setPaneContentSize(h), this._chartEvent.setChartContentTopBottom({ contentTop: 0, contentBottom: u }) } }, { key: "_measurePaneWidth", value: function () { var t, e, i, n = this, r = this._chartStore.styleOptions().yAxis, a = r.position === O, o = this._container.offsetWidth, s = Number.MIN_SAFE_INTEGER; !r.inside ? (this._panes.forEach((function (t) { s = Math.max(s, t.yAxis().getSelfWidth()) })), t = o - s, a ? (e = 0, i = s) : (i = 0, e = o - s)) : (t = o, s = o, e = 0, i = 0), this._chartStore.timeScaleStore().setTotalDataSpace(t), this._panes.forEach((function (r, a) { r.setWidth(t, s), r.setOffsetLeft(i, e); var o = n._separators.get(a); o && o.setSize(i, t) })), this._chartWidth = { content: t, yAxis: s, total: o }, this._xAxisPane.setWidth(t, s), this._xAxisPane.setOffsetLeft(i, e), this._chartEvent.setChartContentLeftRight({ contentLeft: i, contentRight: i + t }) } }, { key: "adjustPaneViewport", value: function (t, e, i, n, r) { t && this._measurePaneHeight(); var a = !1; n && this._panes.forEach((function (t) { var e = t.yAxis().computeAxis(r); a || (a = e) })), (!n && e || n && a) && this._measurePaneWidth(), i && (this._xAxisPane.xAxis().computeAxis(!0), this._xAxisPane.layout(), this._panes.forEach((function (t) { t.layout() }))) } }, { key: "hasPane", value: function (t) { return this._panes.has(t) } }, { key: "getPane", value: function (t) { return this._panes.get(t) } }, { key: "chartStore", value: function () { return this._chartStore } }, { key: "removeTechnicalIndicator", value: function (t, e) { var i = this; if (this._chartStore.technicalIndicatorStore().removeInstance(t, e)) { var n = !1; if (t !== _n && !this._chartStore.technicalIndicatorStore().hasInstance(t)) { n = !0, this._panes.get(t).destroy(); var r = this._separators.get(t).topPaneId(); this._separators.get(t).destroy(), this._panes.delete(t), this._separators.delete(t), this._separators.forEach((function (t) { var e = t.topPaneId(); i._separators.has(e) || t.updatePaneId(r) })) } this.adjustPaneViewport(n, !0, !0, !0, !0) } } }, { key: "createTechnicalIndicator", value: function (t, e) { var i = this, n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {}; if (this._panes.has(n.id)) { var r = this._chartStore.technicalIndicatorStore().addInstance(n.id, t, e); return r && r.finally((function (t) { i.setPaneOptions(n, i._panes.get(n.id).yAxis().computeAxis()) })), n.id } var a = n.id || "".concat(pn).concat(++this._paneBaseId), o = !P(n.dragEnabled) || n.dragEnabled; this._separators.set(a, new Wi(this._chartContainer, this._chartStore, Array.from(this._panes.keys()).pop(), a, o, { startDrag: this._separatorStartDrag.bind(this), drag: cn(this._separatorDrag.bind(this), 50) })); var s = new fi({ container: this._chartContainer, chartStore: this._chartStore, xAxis: this._xAxisPane.xAxis(), id: a, height: n.height || 100 }); this._panes.set(a, s); var c = this._chartStore.technicalIndicatorStore().addInstance(a, t, e); return c && c.finally((function (t) { i.adjustPaneViewport(!0, !0, !0, !0, !0) })), a } }, { key: "createShape", value: function (t, e, i) { var n = e.points, r = e.styles, a = e.lock, o = e.data, s = e.onDrawStart, c = e.onDrawing, h = e.onDrawEnd, l = e.onClick, u = e.onRightClick, f = e.onPressedMove, d = e.onMouseEnter, v = e.onMouseLeave, p = e.onRemove, _ = e.id || "".concat("shape_").concat(++this._shapeBaseId); if (!this._chartStore.shapeStore().hasInstance(_)) { var y = null; this.hasPane(i) ? y = this._panes.get(i).yAxis() : n && n.length > 0 && (i = _n, y = this._panes.get(_n).yAxis()); var m = new t({ id: _, chartStore: this._chartStore, xAxis: this._xAxisPane.xAxis(), yAxis: y, points: n, styles: r, lock: a, data: o }); return k(s) && s({ id: _ }), Tt(m, [{ key: "onDrawing", fn: c }, { key: "onDrawEnd", fn: h }, { key: "onClick", fn: l }, { key: "onRightClick", fn: u }, { key: "onPressedMove", fn: f }, { key: "onMouseEnter", fn: d }, { key: "onMouseLeave", fn: v }, { key: "onRemove", fn: p }]), this._chartStore.shapeStore().addInstance(m, i), _ } return null } }, { key: "createAnnotation", value: function (t, e) { var i = this, n = []; t.forEach((function (t) { var r = t.point, a = t.styles, o = t.checkEventCoordinateOnCustomSymbol, s = t.drawCustomSymbol, c = t.drawExtend, h = t.onClick, l = t.onRightClick, u = t.onMouseEnter, f = t.onMouseLeave; if (r && r.timestamp) { var d = new ln({ id: r.timestamp, chartStore: i._chartStore, point: r, xAxis: i._xAxisPane.xAxis(), yAxis: i._panes.get(e).yAxis(), styles: a }); Tt(d, [{ key: "drawExtend", fn: c }, { key: "drawCustomSymbol", fn: s }, { key: "checkEventCoordinateOnCustomSymbol", fn: o }, { key: "onClick", fn: h }, { key: "onRightClick", fn: l }, { key: "onMouseEnter", fn: u }, { key: "onMouseLeave", fn: f }]), n.push(d) } })), n.length > 0 && this._chartStore.annotationStore().add(n, e) } }, { key: "createTag", value: function (t, e) { var i = this, n = [], r = !1, a = !1; t.forEach((function (t) { var o = t.id, s = t.point, c = t.text, h = t.mark, l = t.styles; if (E(o)) if (i._chartStore.tagStore().has(o, e)) { var u = i._chartStore.tagStore().update(o, e, { point: s, text: c, mark: h, styles: l }); r || (r = u) } else a = !0, n.push(new fn({ id: o, point: s, text: c, mark: h, styles: l, chartStore: i._chartStore, xAxis: i._xAxisPane.xAxis(), yAxis: i._panes.get(e).yAxis() })) })), a ? this._chartStore.tagStore().add(n, e) : r && this._invalidatePane(pe) } }, { key: "removeAllHtml", value: function () { this._panes.forEach((function (t) { t.removeHtml() })), this._xAxisPane.removeHtml() } }, { key: "setPaneOptions", value: function (t, e) { var i = e, n = !1; if (t.id !== _n) { var r = this._panes.get(t.id); r && (w(t.height) && t.height > 0 && r.height() !== t.height && (i = !0, r.setHeight(t.height), n = !0), P(t.dragEnabled) && this._separators.get(t.id).setDragEnabled(t.dragEnabled)) } i && this.adjustPaneViewport(n, !0, !0, !0, !0) } }, { key: "setTimezone", value: function (t) { this._chartStore.timeScaleStore().setTimezone(t), this._xAxisPane.xAxis().computeAxis(!0), this._xAxisPane.invalidate(ye) } }, { key: "convertToPixel", value: function (t, e) { var i, n = this, r = e.paneId, a = void 0 === r ? _n : r, o = e.absoluteYAxis, s = [].concat(t), c = [], h = this._chartStore.styleOptions().separator.size, l = 0, u = dn(this._panes.values()); try { var f = function () { var t = i.value; if (t.id() === a) return c = s.map((function (e) { var i = e.timestamp, r = e.value, a = {}, s = e.dataIndex; if (E(i) && (s = n._chartStore.timeScaleStore().timestampToDataIndex(i)), E(s) && (a.x = n._xAxisPane.xAxis().convertToPixel(s)), E(r)) { var c = t.yAxis().convertToPixel(r); a.y = o ? l + c : c } return a })), "break"; l += t.height() + h }; for (u.s(); !(i = u.n()).done;) { if ("break" === f()) break } } catch (t) { u.e(t) } finally { u.f() } return S(t) ? c : c[0] || {} } }, { key: "convertFromPixel", value: function (t, e) { var i, n = this, r = e.paneId, a = void 0 === r ? _n : r, o = e.absoluteYAxis, s = [].concat(t), c = [], h = this._chartStore.styleOptions().separator.size, l = 0, u = dn(this._panes.values()); try { var f = function () { var t = i.value; if (t.id() === a) return c = s.map((function (e) { var i = e.x, r = e.y, a = {}; if (E(i) && (a.dataIndex = n._xAxisPane.xAxis().convertFromPixel(i), a.timestamp = n._chartStore.timeScaleStore().dataIndexToTimestamp(a.dataIndex)), E(r)) { var s = o ? r - l : r; a.value = t.yAxis().convertFromPixel(s) } return a })), "break"; l += t.height() + h }; for (u.s(); !(i = u.n()).done;) { if ("break" === f()) break } } catch (t) { u.e(t) } finally { u.f() } return S(t) ? c : c[0] || {} } }, { key: "chartWidth", value: function () { return this._chartWidth } }, { key: "chartHeight", value: function () { return this._chartHeight } }, { key: "getConvertPictureUrl", value: function (t, e, i) { var n = this, r = this._chartContainer.offsetWidth, a = this._chartContainer.offsetHeight, o = Fe("canvas", { width: "".concat(r, "px"), height: "".concat(a, "px"), boxSizing: "border-box" }), s = o.getContext("2d"), c = Zt(o); o.width = r * c, o.height = a * c, s.scale(c, c), s.fillStyle = i, s.fillRect(0, 0, r, a); var h = 0; return this._panes.forEach((function (e, i) { if (i !== _n) { var a = n._separators.get(i); s.drawImage(a.getImage(), 0, h, r, a.height()), h += a.height() } s.drawImage(e.getImage(t), 0, h, r, e.height()), h += e.height() })), s.drawImage(this._xAxisPane.getImage(t), 0, h, r, this._xAxisPane.height()), o.toDataURL("image/".concat(e)) } }, { key: "destroy", value: function () { this._panes.forEach((function (t) { t.destroy() })), this._separators.forEach((function (t) { t.destroy() })), this._panes.clear(), this._separators.clear(), this._xAxisPane.destroy(), this._container.removeChild(this._chartContainer), this._chartEvent.destroy() } }]), t }(), mn = function () { function t(e, i) { p(this, t), this._chartPane = new yn(e, i) } return y(t, [{ key: "getWidth", value: function () { return this._chartPane.chartWidth() } }, { key: "getHeight", value: function () { return this._chartPane.chartHeight() } }, { key: "setStyleOptions", value: function (t) { b(t) && (this._chartPane.chartStore().applyStyleOptions(t), this._chartPane.adjustPaneViewport(!0, !0, !0, !0, !0)) } }, { key: "getStyleOptions", value: function () { return g(this._chartPane.chartStore().styleOptions()) } }, { key: "setPriceVolumePrecision", value: function (t, e) { w(t) && t >= 0 && w(e) && e >= 0 && this._chartPane.chartStore().setPriceVolumePrecision(t, e) } }, { key: "setTimezone", value: function (t) { this._chartPane.setTimezone(t) } }, { key: "getTimezone", value: function () { return this._chartPane.chartStore().timeScaleStore().timezone() } }, { key: "resize", value: function () { this._chartPane.adjustPaneViewport(!0, !0, !0, !0, !0) } }, { key: "setOffsetRightSpace", value: function (t) { w(t) && this._chartPane.chartStore().timeScaleStore().setOffsetRightSpace(t, !0) } }, { key: "setLeftMinVisibleBarCount", value: function (t) { w(t) && t > 0 && this._chartPane.chartStore().timeScaleStore().setLeftMinVisibleBarCount(Math.ceil(t)) } }, { key: "setRightMinVisibleBarCount", value: function (t) { w(t) && t > 0 && this._chartPane.chartStore().timeScaleStore().setRightMinVisibleBarCount(Math.ceil(t)) } }, { key: "setDataSpace", value: function (t) { w(t) && this._chartPane.chartStore().timeScaleStore().setDataSpace(t) } }, { key: "getDataSpace", value: function () { return this._chartPane.chartStore().timeScaleStore().dataSpace() } }, { key: "getBarSpace", value: function () { return this._chartPane.chartStore().timeScaleStore().barSpace() } }, { key: "clearData", value: function () { this._chartPane.chartStore().clearDataList() } }, { key: "getDataList", value: function () { return this._chartPane.chartStore().dataList() } }, { key: "applyNewData", value: function (t, e) { var i = this; if (S(t)) { var n = this._chartPane.chartStore(); n.clearDataList(), n.addData(t, 0, e), n.technicalIndicatorStore().calcInstance().finally((function (t) { i._chartPane.adjustPaneViewport(!1, !0, !0, !0) })) } } }, { key: "applyMoreData", value: function (t, e) { var i = this; if (S(t)) { var n = this._chartPane.chartStore(); n.addData(t, 0, e), n.technicalIndicatorStore().calcInstance().finally((function (t) { i._chartPane.adjustPaneViewport(!1, !0, !0, !0) })) } } }, { key: "updateData", value: function (t) { var e = this; if (b(t) && !S(t)) { var i = this._chartPane.chartStore(), n = i.dataList(), r = n.length, a = it(t, "timestamp", 0), o = it(n[r - 1], "timestamp", 0); if (a >= o) { var s = r; a === o && (s = r - 1), i.addData(t, s), i.technicalIndicatorStore().calcInstance().finally((function (t) { e._chartPane.adjustPaneViewport(!1, !0, !0, !0) })) } } } }, { key: "loadMore", value: function (t) { k(t) && this._chartPane.chartStore().timeScaleStore().setLoadMoreCallback(t) } }, { key: "createTechnicalIndicator", value: function (t, e, i) { if (!E(t)) return null; var n = b(t) && !S(t) ? t : { name: t }; return this._chartPane.chartStore().technicalIndicatorStore().hasTemplate(n.name) ? this._chartPane.createTechnicalIndicator(n, e, i) : null } }, { key: "addTechnicalIndicatorTemplate", value: function (t) { if (b(t)) { var e = [].concat(t); this._chartPane.chartStore().technicalIndicatorStore().addTemplate(e) } } }, { key: "overrideTechnicalIndicator", value: function (t, e) { var i = this; if (b(t) && !S(t)) { var n = this._chartPane.chartStore().technicalIndicatorStore().override(t, e); n && n.then((function (t) { i._chartPane.adjustPaneViewport(!1, !0, !0, !0) })) } } }, { key: "getTechnicalIndicatorTemplate", value: function (t) { return this._chartPane.chartStore().technicalIndicatorStore().getTemplateInfo(t) } }, { key: "getTechnicalIndicatorByPaneId", value: function (t, e) { return this._chartPane.chartStore().technicalIndicatorStore().getInstanceInfo(t, e) } }, { key: "removeTechnicalIndicator", value: function (t, e) { this._chartPane.removeTechnicalIndicator(t, e) } }, { key: "addShapeTemplate", value: function (t) { if (b(t)) { var e = [].concat(t); this._chartPane.chartStore().shapeStore().addTemplate(e) } } }, { key: "createShape", value: function (t, e) { if (!E(t)) return null; var i = b(t) && !S(t) ? t : { name: t }, n = this._chartPane.chartStore().shapeStore().getTemplate(i.name); return n ? this._chartPane.createShape(n, i, e) : null } }, { key: "getShape", value: function (t) { return this._chartPane.chartStore().shapeStore().getInstanceInfo(t) } }, { key: "setShapeOptions", value: function (t) { b(t) && !S(t) && this._chartPane.chartStore().shapeStore().setInstanceOptions(t) } }, { key: "removeShape", value: function (t) { this._chartPane.chartStore().shapeStore().removeInstance(t) } }, { key: "createAnnotation", value: function (t) { var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : _n; if (b(t) && this._chartPane.hasPane(e)) { var i = [].concat(t); this._chartPane.createAnnotation(i, e) } } }, { key: "removeAnnotation", value: function (t, e) { this._chartPane.chartStore().annotationStore().remove(t, e) } }, { key: "createTag", value: function (t) { var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : _n; if (b(t) && this._chartPane.hasPane(e)) { var i = [].concat(t); this._chartPane.createTag(i, e) } } }, { key: "removeTag", value: function (t, e) { this._chartPane.chartStore().tagStore().remove(t, e) } }, { key: "createHtml", value: function (t) { var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : _n; if (!b(t)) return null; if (!(C(t.content) || t.content instanceof HTMLElement)) return null; var i = this._chartPane.getPane(e); return i ? i.createHtml(t) : null } }, { key: "removeHtml", value: function (t, e) { if (t) { var i = this._chartPane.getPane(t); i && i.removeHtml(e) } else this._chartPane.removeAllHtml() } }, { key: "setPaneOptions", value: function (t) { b(t) && this._chartPane.setPaneOptions(t, !1) } }, { key: "setZoomEnabled", value: function (t) { this._chartPane.chartStore().timeScaleStore().setZoomEnabled(t) } }, { key: "isZoomEnabled", value: function () { return this._chartPane.chartStore().timeScaleStore().zoomEnabled() } }, { key: "setScrollEnabled", value: function (t) { this._chartPane.chartStore().timeScaleStore().setScrollEnabled(t) } }, { key: "isScrollEnabled", value: function () { return this._chartPane.chartStore().timeScaleStore().scrollEnabled() } }, { key: "scrollByDistance", value: function (t, e) { var i = this; if (w(t)) if (w(e) && e > 0) { this._chartPane.chartStore().timeScaleStore().startScroll(); var n = (new Date).getTime(); !function r() { var a = ((new Date).getTime() - n) / e, o = a >= 1, s = o ? t : t * a; i._chartPane.chartStore().timeScaleStore().scroll(s), o || He(r) }() } else this._chartPane.chartStore().timeScaleStore().startScroll(), this._chartPane.chartStore().timeScaleStore().scroll(t) } }, { key: "scrollToRealTime", value: function (t) { var e = (this._chartPane.chartStore().timeScaleStore().offsetRightBarCount() - this._chartPane.chartStore().timeScaleStore().offsetRightSpace() / this._chartPane.chartStore().timeScaleStore().dataSpace()) * this._chartPane.chartStore().timeScaleStore().dataSpace(); this.scrollByDistance(e, t) } }, { key: "scrollToDataIndex", value: function (t, e) { if (w(t)) { var i = (this._chartPane.chartStore().dataList().length - 1 - t) * this._chartPane.chartStore().timeScaleStore().dataSpace(); this.scrollByDistance(i, e) } } }, { key: "zoomAtCoordinate", value: function (t, e, i) { var n = this; if (w(t)) if (w(i) && i > 0) { var r = this._chartPane.chartStore().timeScaleStore().dataSpace(), a = r * t - r, o = (new Date).getTime(); !function t() { var s = ((new Date).getTime() - o) / i, c = s >= 1, h = c ? a : a * s; n._chartPane.chartStore().timeScaleStore().zoom(h / r, e), c || He(t) }() } else this._chartPane.chartStore().timeScaleStore().zoom(t, e) } }, { key: "zoomAtDataIndex", value: function (t, e, i) { if (w(t) && w(e)) { var n = this._chartPane.chartStore().timeScaleStore().dataIndexToCoordinate(e); this.zoomAtCoordinate(t, { x: n }, i) } } }, { key: "convertToPixel", value: function (t, e) { return this._chartPane.convertToPixel(t, e) } }, { key: "convertFromPixel", value: function (t, e) { return this._chartPane.convertFromPixel(t, e) } }, { key: "subscribeAction", value: function (t, e) { this._chartPane.chartStore().actionStore().subscribe(t, e) } }, { key: "unsubscribeAction", value: function (t, e) { this._chartPane.chartStore().actionStore().unsubscribe(t, e) } }, { key: "getConvertPictureUrl", value: function (t) { var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "jpeg", i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : "#FFFFFF"; if ("png" === e || "jpeg" === e || "bmp" === e) return this._chartPane.getConvertPictureUrl(t, e, i) } }, { key: "destroy", value: function () { this._chartPane.destroy() } }]), t }(), xn = {}, gn = 1, Sn = "k_line_chart_"; var kn = { clone: g, merge: x, isString: C, isNumber: w, isValid: E, isObject: b, isArray: S, isFunction: k, isBoolean: P, formatValue: it, formatPrecision: rt, formatBigNumber: at }; v.addTechnicalIndicatorTemplate([{ name: "AVP", shortName: "AVP", series: "price", precision: 2, plots: [{ key: "avp", title: "AVP: ", type: "line" }], calcTechnicalIndicator: function (t) { var e = 0, i = 0; return t.map((function (t) { var n = {}; return e += t.turnover || 0, 0 !== (i += t.volume || 0) && (n.avp = e / i), n })) } }, e, i, n, { name: "EMV", shortName: "EMV", calcParams: [14, 9], plots: [{ key: "emv", title: "EMV: ", type: "line" }, { key: "maEmv", title: "MAEMV: ", type: "line" }], calcTechnicalIndicator: function (t, e) { var i = e.params, n = 0, r = 0, a = [], o = []; return t.forEach((function (e, s) { var c = {}, h = t[s - 1] || e, l = e.high, u = e.low, f = e.turnover || 0, d = 0; 0 !== f && (d = ((l + u) / 2 - (h.high + h.low) / 2) * (l - u) / f), a.push(d), n += d, i[0] - 1 > s || (c.emv = n, n -= a[s - (i[0] - 1)], r += c.emv, i[0] + i[1] - 2 > s || (c.maEmv = r / i[1], r -= o[s - (i[1] - 1)].emv)), o.push(c) })), o } }, { name: "EMA", shortName: "EMA", series: "price", calcParams: [6, 12, 20], precision: 2, shouldCheckParamCount: !1, shouldOhlc: !0, plots: [{ key: "ema6", title: "EMA6: ", type: "line" }, { key: "ema12", title: "EMA12: ", type: "line" }, { key: "ema20", title: "EMA20: ", type: "line" }], regeneratePlots: function (t) { return t.map((function (t) { return { key: "ema".concat(t), title: "EMA".concat(t, ": "), type: "line" } })) }, calcTechnicalIndicator: function (t, e) { var i = e.params, n = e.plots, r = 0, a = []; return t.map((function (t, e) { var o = {}, s = t.close; return r += s, i.forEach((function (t, i) { t - 1 > e || (a[i] = e > t - 1 ? (2 * s + (t - 1) * a[i]) / (t + 1) : r / t, o[n[i].key] = a[i]) })), o })) } }, { name: "MA", shortName: "MA", series: "price", calcParams: [5, 10, 30, 60], precision: 2, shouldCheckParamCount: !1, shouldOhlc: !0, plots: [{ key: "ma5", title: "MA5: ", type: "line" }, { key: "ma10", title: "MA10: ", type: "line" }, { key: "ma30", title: "MA30: ", type: "line" }, { key: "ma60", title: "MA60: ", type: "line" }], regeneratePlots: function (t) { return t.map((function (t) { return { key: "ma".concat(t), title: "MA".concat(t, ": "), type: "line" } })) }, calcTechnicalIndicator: function (t, e) { var i = e.params, n = e.plots, r = []; return t.map((function (e, a) { var o = {}, s = e.close; return i.forEach((function (e, i) { r[i] = (r[i] || 0) + s, e - 1 > a || (o[n[i].key] = r[i] / e, r[i] -= t[a - (e - 1)].close) })), o })) } }, r, { name: "SMA", shortName: "SMA", series: "price", calcParams: [12, 2], precision: 2, plots: [{ key: "sma", title: "SMA: ", type: "line" }], shouldCheckParamCount: !0, shouldOhlc: !0, calcTechnicalIndicator: function (t, e) { var i = e.params, n = 0, r = 0; return t.map((function (t, e) { var a = {}, o = t.close; return n += o, i[0] - 1 > e || (a.sma = r = e > i[0] - 1 ? (o * i[1] + r * (i[0] - i[1] + 1)) / (i[0] + 1) : n / i[0]), a })) } }, { name: "TRIX", shortName: "TRIX", calcParams: [12, 9], plots: [{ key: "trix", title: "TRIX: ", type: "line" }, { key: "maTrix", title: "MATRIX: ", type: "line" }], calcTechnicalIndicator: function (t, e) { var i, n, r, a = e.params, o = 0, s = 0, c = 0, h = 0, l = []; return t.forEach((function (t, e) { var u = {}, f = t.close; if (o += f, e >= a[0] - 1 && (s += i = e > a[0] - 1 ? (2 * f + (a[0] - 1) * i) / (a[0] + 1) : o / a[0], e >= 2 * a[0] - 2 && (c += n = e > 2 * a[0] - 2 ? (2 * i + (a[0] - 1) * n) / (a[0] + 1) : s / a[0], e >= 3 * a[0] - 3))) { var d, v = 0; e > 3 * a[0] - 3 ? v = ((d = (2 * n + (a[0] - 1) * r) / (a[0] + 1)) - r) / r * 100 : d = c / a[0], r = d, u.trix = v, h += v, 3 * a[0] + a[1] - 4 > e || (u.maTrix = h / a[1], h -= l[e - (a[1] - 1)].trix) } l.push(u) })), l } }, { name: "BRAR", shortName: "BRAR", calcParams: [26], plots: [{ key: "br", title: "BR: ", type: "line" }, { key: "ar", title: "AR: ", type: "line" }], calcTechnicalIndicator: function (t, e) { var i = e.params, n = 0, r = 0, a = 0, o = 0; return t.map((function (e, s) { var c = {}, h = e.high, l = e.low, u = e.open, f = (t[s - 1] || e).close; if (a += h - u, o += u - l, n += h - f, r += f - l, s >= i[0] - 1) { c.ar = 0 !== o ? a / o * 100 : 0, c.br = 0 !== r ? n / r * 100 : 0; var d = t[s - (i[0] - 1)], v = d.high, p = d.low, _ = d.open, y = (t[s - i[0]] || t[s - (i[0] - 1)]).close; n -= v - y, r -= y - p, a -= v - _, o -= _ - p } return c })) } }, a, { name: "MTM", shortName: "MTM", calcParams: [12, 6], plots: [{ key: "mtm", title: "MTM: ", type: "line" }, { key: "maMtm", title: "MAMTM: ", type: "line" }], calcTechnicalIndicator: function (t, e) { var i = e.params, n = 0, r = []; return t.forEach((function (e, a) { var o = {}; a < i[0] || (o.mtm = e.close - t[a - i[0]].close, n += o.mtm, i[0] + i[1] - 1 > a || (o.maMtm = n / i[1], n -= r[a - (i[1] - 1)].mtm)); r.push(o) })), r } }, { name: "PSY", shortName: "PSY", calcParams: [12, 6], plots: [{ key: "psy", title: "PSY: ", type: "line" }, { key: "maPsy", title: "MAPSY: ", type: "line" }], calcTechnicalIndicator: function (t, e) { var i = e.params, n = 0, r = 0, a = [], o = []; return t.forEach((function (e, s) { var c = {}, h = e.close - (t[s - 1] || e).close > 0 ? 1 : 0; a.push(h), n += h, i[0] - 1 > s || (c.psy = n / i[0] * 100, r += c.psy, i[0] + i[1] - 2 > s || (c.maPsy = r / i[1], r -= o[s - (i[1] - 1)].psy), n -= a[s - (i[0] - 1)]), o.push(c) })), o } }, { name: "ROC", shortName: "ROC", calcParams: [12, 6], shouldCheckParamCount: !0, plots: [{ key: "roc", title: "ROC: ", type: "line" }, { key: "maRoc", title: "MAROC: ", type: "line" }], calcTechnicalIndicator: function (t, e) { var i = e.params, n = [], r = 0; return t.forEach((function (e, a) { var o = {}; if (a >= i[0] - 1) { var s = (t[a - i[0]] || t[a - (i[0] - 1)]).close; o.roc = 0 !== s ? (e.close - s) / s * 100 : 0, r += o.roc, i[0] - 1 + i[1] - 1 > a || (o.maRoc = r / i[1], r -= n[a - (i[1] - 1)].roc) } n.push(o) })), n } }, { name: "VR", shortName: "VR", calcParams: [26, 6], plots: [{ key: "vr", title: "VR: ", type: "line" }, { key: "maVr", title: "MAVR: ", type: "line" }], calcTechnicalIndicator: function (t, e) { var i = e.params, n = 0, r = 0, a = 0, o = 0, s = []; return t.forEach((function (e, c) { var h = {}, l = e.close, u = (t[c - 1] || e).close, f = e.volume; if (l > u ? n += f : u > l ? r += f : a += f, c >= i[0] - 1) { var d = a / 2; h.vr = r + d === 0 ? 0 : (n + d) / (r + d) * 100, o += h.vr, i[0] + i[1] - 2 > c || (h.maVr = o / i[1], o -= s[c - (i[1] - 1)].vr); var v = t[c - (i[0] - 1)], p = t[c - i[0]] || v, _ = v.close, y = v.volume; _ > p.close ? n -= y : p.close > _ ? r -= y : a -= y } s.push(h) })), s } }, o, { name: "BIAS", shortName: "BIAS", calcParams: [6, 12, 24], shouldCheckParamCount: !1, plots: [{ key: "bias6", title: "BIAS6: ", type: "line" }, { key: "bias12", title: "BIAS12: ", type: "line" }, { key: "bias24", title: "BIAS24: ", type: "line" }], regeneratePlots: function (t) { return t.map((function (t) { return { key: "bias".concat(t), title: "BIAS".concat(t, ": "), type: "line" } })) }, calcTechnicalIndicator: function (t, e) { var i = e.params, n = e.plots, r = []; return t.map((function (e, a) { var o = {}, s = e.close; return i.forEach((function (e, c) { if (r[c] = (r[c] || 0) + s, a >= e - 1) { var h = r[c] / i[c]; o[n[c].key] = (s - h) / h * 100, r[c] -= t[a - (e - 1)].close } })), o })) } }, s, c, l, u, f, d, { name: "OBV", shortName: "OBV", calcParams: [30], plots: [{ key: "obv", title: "OBV: ", type: "line" }, { key: "maObv", title: "MAOBV: ", type: "line" }], calcTechnicalIndicator: function (t, e) { var i = e.params, n = 0, r = 0, a = []; return t.forEach((function (e, o) { var s = t[o - 1] || e; s.close > e.close ? r -= e.volume : e.close > s.close && (r += e.volume); var c = { obv: r }; n += r, i[0] - 1 > o || (c.maObv = n / i[0], n -= a[o - (i[0] - 1)].obv), a.push(c) })), a } }, { name: "PVT", shortName: "PVT", plots: [{ key: "pvt", title: "PVT: ", type: "line" }], calcTechnicalIndicator: function (t) { var e = 0; return t.map((function (i, n) { var r = {}, a = (t[n - 1] || i).close, o = 0; return 0 !== a && (o = (i.close - a) / a * i.volume), r.pvt = e += o, r })) } }, { name: "VOL", shortName: "VOL", series: "volume", calcParams: [5, 10, 20], shouldCheckParamCount: !1, shouldFormatBigNumber: !0, precision: 0, minValue: 0, plots: [{ key: "ma5", title: "MA5: ", type: "line" }, { key: "ma10", title: "MA10: ", type: "line" }, { key: "ma20", title: "MA20: ", type: "line" }, { key: "volume", title: "VOLUME: ", type: "bar", baseValue: 0, color: function (t, e) { var i = t.current.kLineData || {}; return i.close > i.open ? e.bar.upColor : i.open > i.close ? e.bar.downColor : e.bar.noChangeColor } }], regeneratePlots: function (t) { var e = t.map((function (t) { return { key: "ma".concat(t), title: "MA".concat(t, ": "), type: "line" } })); return e.push({ key: "volume", title: "VOLUME: ", type: "bar", baseValue: 0, color: function (t, e) { var i = t.current.kLineData || {}; return i.close > i.open ? e.bar.upColor : i.open > i.close ? e.bar.downColor : e.bar.noChangeColor } }), e }, calcTechnicalIndicator: function (t, e) { var i = e.params, n = e.plots, r = []; return t.map((function (e, a) { var o = e.volume || 0, s = { volume: o }; return i.forEach((function (e, i) { r[i] = (r[i] || 0) + o, e - 1 > a || (s[n[i].key] = r[i] / e, r[i] -= t[a - (e - 1)].volume) })), s })) } }]), v.addShapeTemplate([{ name: "horizontalRayLine", totalStep: 3, checkEventCoordinateOnShape: function (t) { var e = t.dataSource; return zt(e[0], e[1], t.eventCoordinate) }, createShapeDataSource: function (t) { var e = t.coordinates, i = { x: 0, y: e[0].y }; return e[1] && e[1].x > e[0].x && (i.x = t.viewport.width), [{ type: "line", isDraw: !0, isCheck: !0, dataSource: [[e[0], i]] }] }, performEventPressedMove: function (t) { var e = t.points, i = t.pressPoint; e[0].value = i.value, e[1].value = i.value }, performEventMoveForDrawing: function (t) { 2 === t.step && (t.points[0].value = t.movePoint.value) } }, { name: "horizontalSegment", totalStep: 3, checkEventCoordinateOnShape: function (t) { var e = t.dataSource; return Vt(e[0], e[1], t.eventCoordinate) }, createShapeDataSource: function (t) { var e = t.coordinates, i = []; return 2 === e.length && (i = [e]), [{ type: "line", isDraw: !0, isCheck: !0, dataSource: i }] }, performEventPressedMove: function (t) { var e = t.points, i = t.pressPoint; e[0].value = i.value, e[1].value = i.value }, performEventMoveForDrawing: function (t) { 2 === t.step && (t.points[0].value = t.movePoint.value) } }, { name: "horizontalStraightLine", totalStep: 2, checkEventCoordinateOnShape: function (t) { var e = t.dataSource; return Ft(e[0], e[1], t.eventCoordinate) }, createShapeDataSource: function (t) { var e = t.coordinates; return [{ type: "line", isDraw: !0, isCheck: !0, dataSource: [[{ x: 0, y: e[0].y }, { x: t.viewport.width, y: e[0].y }]] }] } }, { name: "verticalRayLine", totalStep: 3, checkEventCoordinateOnShape: function (t) { var e = t.dataSource; return zt(e[0], e[1], t.eventCoordinate) }, createShapeDataSource: function (t) { var e = t.coordinates, i = { x: e[0].x, y: 0 }; return e[1] && e[1].y > e[0].y && (i.y = t.viewport.height), [{ type: "line", isDraw: !0, isCheck: !0, dataSource: [[e[0], i]] }] }, performEventPressedMove: function (t) { var e = t.points, i = t.pressPoint; e[0].timestamp = i.timestamp, e[0].dataIndex = i.dataIndex, e[1].timestamp = i.timestamp, e[1].dataIndex = i.dataIndex }, performEventMoveForDrawing: function (t) { var e = t.points, i = t.movePoint; 2 === t.step && (e[0].timestamp = i.timestamp, e[0].dataIndex = i.dataIndex) } }, { name: "verticalSegment", totalStep: 3, checkEventCoordinateOnShape: function (t) { var e = t.dataSource; return Vt(e[0], e[1], t.eventCoordinate) }, createShapeDataSource: function (t) { var e = t.coordinates, i = []; return 2 === e.length && (i = [e]), [{ type: "line", isDraw: !0, isCheck: !0, dataSource: i }] }, performEventPressedMove: function (t) { var e = t.points, i = t.pressPoint; e[0].timestamp = i.timestamp, e[0].dataIndex = i.dataIndex, e[1].timestamp = i.timestamp, e[1].dataIndex = i.dataIndex }, performEventMoveForDrawing: function (t) { var e = t.points, i = t.movePoint; 2 === t.step && (e[0].timestamp = i.timestamp, e[0].dataIndex = i.dataIndex) } }, { name: "verticalStraightLine", totalStep: 2, checkEventCoordinateOnShape: function (t) { var e = t.dataSource; return Ft(e[0], e[1], t.eventCoordinate) }, createShapeDataSource: function (t) { var e = t.coordinates; return [{ type: "line", isDraw: !0, isCheck: !0, dataSource: [[{ x: e[0].x, y: 0 }, { x: e[0].x, y: t.viewport.height }]] }] } }, { name: "rayLine", totalStep: 3, checkEventCoordinateOnShape: function (t) { var e = t.dataSource; return zt(e[0], e[1], t.eventCoordinate) }, createShapeDataSource: function (t) { var e, i, n, r = t.coordinates, a = t.viewport; return [{ type: "line", isDraw: !0, isCheck: !0, dataSource: [(e = r[0], i = r[1], n = { x: a.width, y: a.height }, e && i ? [e, e.x === i.x && e.y !== i.y ? i.y > e.y ? { x: e.x, y: n.y } : { x: e.x, y: 0 } : e.x > i.x ? { x: 0, y: Lt(e, i, { x: 0, y: e.y }) } : { x: n.x, y: Lt(e, i, { x: n.x, y: e.y }) }] : [])] }] } }, { name: "segment", totalStep: 3, checkEventCoordinateOnShape: function (t) { var e = t.dataSource; return Vt(e[0], e[1], t.eventCoordinate) }, createShapeDataSource: function (t) { var e = t.coordinates, i = []; return 2 === e.length && (i = [e]), [{ type: "line", isDraw: !0, isCheck: !0, dataSource: i }] } }, { name: "straightLine", totalStep: 3, checkEventCoordinateOnShape: function (t) { var e = t.dataSource; return Ft(e[0], e[1], t.eventCoordinate) }, createShapeDataSource: function (t) { var e = t.coordinates, i = t.viewport; return 2 > e.length || e[0].x === e[1].x ? [{ type: "line", isDraw: !0, isCheck: !0, dataSource: [[{ x: e[0].x, y: 0 }, { x: e[0].x, y: i.height }]] }] : [{ type: "line", isDraw: !0, isCheck: !0, dataSource: [[{ x: 0, y: Lt(e[0], e[1], { x: 0, y: e[0].y }) }, { x: i.width, y: Lt(e[0], e[1], { x: i.width, y: e[0].y }) }]] }] } }, { name: "parallelStraightLine", totalStep: 4, checkEventCoordinateOnShape: function (t) { var e = t.dataSource; return Ft(e[0], e[1], t.eventCoordinate) }, createShapeDataSource: function (t) { var e = t.viewport; return [{ type: "line", isDraw: !0, isCheck: !0, dataSource: Ht(t.coordinates, { x: e.width, y: e.height }) }] } }, { name: "priceChannelLine", totalStep: 4, checkEventCoordinateOnShape: function (t) { var e = t.dataSource; return Ft(e[0], e[1], t.eventCoordinate) }, createShapeDataSource: function (t) { var e = t.viewport; return [{ type: "line", isDraw: !0, isCheck: !0, dataSource: Ht(t.coordinates, { x: e.width, y: e.height }, 1) }] } }, { name: "priceLine", totalStep: 2, checkEventCoordinateOnShape: function (t) { var e = t.dataSource; return zt(e[0], e[1], t.eventCoordinate) }, createShapeDataSource: function (t) { var e = t.coordinates, i = t.precision; return [{ type: "line", isDraw: !0, isCheck: !0, dataSource: [[e[0], { x: t.viewport.width, y: e[0].y }]] }, { type: "text", isDraw: !0, isCheck: !1, dataSource: [{ x: e[0].x, y: e[0].y, text: t.yAxis.convertFromPixel(e[0].y).toFixed(i.price) }] }] } }, { name: "fibonacciLine", totalStep: 3, checkEventCoordinateOnShape: function (t) { var e = t.dataSource; return Ft(e[0], e[1], t.eventCoordinate) }, createShapeDataSource: function (t) { var e = t.points, i = t.coordinates, n = t.precision; if (i.length > 0) { var r = [], a = [], o = t.viewport.width; if (i.length > 1) { var s = i[0].y - i[1].y, c = e[0].value - e[1].value;[1, .786, .618, .5, .382, .236, 0].forEach((function (t) { var h = i[1].y + s * t, l = (e[1].value + c * t).toFixed(n.price); r.push([{ x: 0, y: h }, { x: o, y: h }]), a.push({ x: 0, y: h, text: "".concat(l, " (").concat((100 * t).toFixed(1), "%)") }) })) } return [{ type: "line", isDraw: !0, isCheck: !0, dataSource: r }, { type: "text", isDraw: !0, isCheck: !1, dataSource: a }] } return [] } }]), t.dispose = function (t) { if (t) { var e; if (C(t)) { var i = document.getElementById(t); e = i && i.chartId } else e = t instanceof mn ? t.id : t && t.chartId; e && (xn[e].destroy(), delete xn[e]) } }, t.extension = v, t.init = function (t) { var e, i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}; if (!t) return null; if (!(e = C(t) ? document.getElementById(t) : t)) return null; var n = xn[e.chartId || ""]; if (n) return n; var r = "".concat(Sn).concat(gn++); return (n = new mn(e, i)).id = r, e.chartId = r, xn[r] = n, n }, t.utils = kn, t.version = function () { return "8.3.0" }, Object.defineProperty(t, "__esModule", { value: !0 }) }));


var kLineDataList = [
    [
        "2020-10-31T19:17:00.000Z",
        "13614",
        "13618.8",
        "13613.3",
        "13614.7",
        "2.39064408"
    ],
    [
        "2020-10-31T19:18:00.000Z",
        "13615",
        "13629.7",
        "13613.4",
        "13629.7",
        "3.76857896"
    ],
    [
        "2020-10-31T19:19:00.000Z",
        "13629.7",
        "13629.7",
        "13622.8",
        "13626.2",
        "6.18084937"
    ],
    [
        "2020-10-31T19:20:00.000Z",
        "13624.4",
        "13624.4",
        "13616.3",
        "13616.3",
        "50.5041919"
    ],
    [
        "2020-10-31T19:21:00.000Z",
        "13616.4",
        "13626.2",
        "13616.4",
        "13626.2",
        "8.82978139"
    ],
    [
        "2020-10-31T19:22:00.000Z",
        "13623",
        "13625.1",
        "13619.3",
        "13620.1",
        "12.66756203"
    ],
    [
        "2020-10-31T19:23:00.000Z",
        "13623.4",
        "13625.1",
        "13620.1",
        "13623.5",
        "5.91390321"
    ],
    [
        "2020-10-31T19:24:00.000Z",
        "13623.2",
        "13624.4",
        "13617.5",
        "13623.7",
        "0.14215502"
    ],
    [
        "2020-10-31T19:25:00.000Z",
        "13624.2",
        "13637.9",
        "13623.5",
        "13637.9",
        "6.967448"
    ],
    [
        "2020-10-31T19:26:00.000Z",
        "13638.6",
        "13643.4",
        "13638.2",
        "13642.2",
        "2.66816239"
    ],
    [
        "2020-10-31T19:27:00.000Z",
        "13643.8",
        "13649.8",
        "13643.8",
        "13644.8",
        "0.46486417"
    ],
    [
        "2020-10-31T19:28:00.000Z",
        "13647.1",
        "13648.9",
        "13647.1",
        "13648.9",
        "4.88564514"
    ],
    [
        "2020-10-31T19:29:00.000Z",
        "13644.7",
        "13646.4",
        "13639.2",
        "13642",
        "10.33805777"
    ],
    [
        "2020-10-31T19:30:00.000Z",
        "13642",
        "13642",
        "13636.6",
        "13639.9",
        "52.96247978"
    ],
    [
        "2020-10-31T19:31:00.000Z",
        "13642.3",
        "13642.3",
        "13639",
        "13640",
        "0.0745357"
    ],
    [
        "2020-10-31T19:32:00.000Z",
        "13643.2",
        "13649.8",
        "13643.2",
        "13644.3",
        "23.42521808"
    ],
    [
        "2020-10-31T19:33:00.000Z",
        "13644.5",
        "13645.6",
        "13643.2",
        "13644.6",
        "0.78188052"
    ],
    [
        "2020-10-31T19:34:00.000Z",
        "13644.6",
        "13644.8",
        "13640",
        "13644.5",
        "7.44326236"
    ],
    [
        "2020-10-31T19:35:00.000Z",
        "13646.1",
        "13651.4",
        "13646.1",
        "13651.4",
        "13.13607701"
    ],
    [
        "2020-10-31T19:36:00.000Z",
        "13651.5",
        "13653.9",
        "13651.5",
        "13652.1",
        "5.8518783"
    ],
    [
        "2020-10-31T19:37:00.000Z",
        "13650.1",
        "13650.1",
        "13647.4",
        "13647.4",
        "7.60259773"
    ],
    [
        "2020-10-31T19:38:00.000Z",
        "13647.4",
        "13647.4",
        "13638",
        "13638",
        "0.63819945"
    ],
    [
        "2020-10-31T19:39:00.000Z",
        "13638.1",
        "13644.7",
        "13638.1",
        "13643.2",
        "9.09249825"
    ],
    [
        "2020-10-31T19:40:00.000Z",
        "13643.2",
        "13648.8",
        "13638",
        "13638.5",
        "7.88003467"
    ],
    [
        "2020-10-31T19:41:00.000Z",
        "13641",
        "13652.8",
        "13641",
        "13652.8",
        "2.90083767"
    ],
    [
        "2020-10-31T19:42:00.000Z",
        "13650",
        "13651.7",
        "13647.6",
        "13649.2",
        "8.66071917"
    ],
    [
        "2020-10-31T19:43:00.000Z",
        "13647.5",
        "13647.5",
        "13644.8",
        "13644.8",
        "3.66017404"
    ],
    [
        "2020-10-31T19:44:00.000Z",
        "13646.6",
        "13650.9",
        "13646.6",
        "13648.5",
        "10.82026373"
    ],
    [
        "2020-10-31T19:45:00.000Z",
        "13651.2",
        "13651.2",
        "13642.1",
        "13642.1",
        "37.03309348"
    ],
    [
        "2020-10-31T19:46:00.000Z",
        "13642.2",
        "13642.2",
        "13640.1",
        "13640.1",
        "73.39122019"
    ],
    [
        "2020-10-31T19:47:00.000Z",
        "13640.2",
        "13640.2",
        "13640",
        "13640",
        "2.85629807"
    ],
    [
        "2020-10-31T19:48:00.000Z",
        "13640.1",
        "13652.3",
        "13640.1",
        "13652.3",
        "12.22712067"
    ],
    [
        "2020-10-31T19:49:00.000Z",
        "13650.2",
        "13651.5",
        "13650.2",
        "13651.5",
        "0.06938382"
    ],
    [
        "2020-10-31T19:50:00.000Z",
        "13651.5",
        "13652.9",
        "13651.5",
        "13652.9",
        "2.58032735"
    ],
    [
        "2020-10-31T19:51:00.000Z",
        "13651.7",
        "13655.3",
        "13650.9",
        "13655.3",
        "5.04574785"
    ],
    [
        "2020-10-31T19:52:00.000Z",
        "13655.4",
        "13669.9",
        "13655.4",
        "13667.6",
        "1.23519026"
    ],
    [
        "2020-10-31T19:53:00.000Z",
        "13668.5",
        "13680",
        "13666.7",
        "13674.5",
        "19.37793377"
    ],
    [
        "2020-10-31T19:54:00.000Z",
        "13676.2",
        "13678.3",
        "13669.3",
        "13674.6",
        "1.25773554"
    ],
    [
        "2020-10-31T19:55:00.000Z",
        "13673.5",
        "13673.5",
        "13662.5",
        "13665.1",
        "2.86551835"
    ],
    [
        "2020-10-31T19:56:00.000Z",
        "13666",
        "13670.2",
        "13662.5",
        "13665.5",
        "4.802016"
    ],
    [
        "2020-10-31T19:57:00.000Z",
        "13664.5",
        "13666.5",
        "13662.5",
        "13664.9",
        "5.35241338"
    ],
    [
        "2020-10-31T19:58:00.000Z",
        "13665.5",
        "13665.5",
        "13657.2",
        "13657.2",
        "0.87367409"
    ],
    [
        "2020-10-31T19:59:00.000Z",
        "13655.7",
        "13656.3",
        "13647.1",
        "13656.3",
        "2.23877279"
    ],
    [
        "2020-10-31T20:00:00.000Z",
        "13655.3",
        "13655.3",
        "13640.2",
        "13640.4",
        "4.3742131"
    ],
    [
        "2020-10-31T20:01:00.000Z",
        "13641.3",
        "13641.3",
        "13635.2",
        "13639",
        "44.69743882"
    ],
    [
        "2020-10-31T20:02:00.000Z",
        "13637.3",
        "13647.7",
        "13626.6",
        "13640.1",
        "5.26519572"
    ],
    [
        "2020-10-31T20:03:00.000Z",
        "13639.5",
        "13643.5",
        "13632.2",
        "13632.2",
        "9.46111697"
    ],
    [
        "2020-10-31T20:04:00.000Z",
        "13635.8",
        "13647.6",
        "13635.8",
        "13647.6",
        "3.14347462"
    ],
    [
        "2020-10-31T20:05:00.000Z",
        "13649.2",
        "13649.2",
        "13645.3",
        "13646.5",
        "10.23622328"
    ],
    [
        "2020-10-31T20:06:00.000Z",
        "13645.4",
        "13651.9",
        "13645.4",
        "13651.9",
        "4.94225466"
    ],
    [
        "2020-10-31T20:07:00.000Z",
        "13652",
        "13662.4",
        "13652",
        "13661.1",
        "6.59984119"
    ],
    [
        "2020-10-31T20:08:00.000Z",
        "13662.4",
        "13669.3",
        "13662.4",
        "13667",
        "1.01903216"
    ],
    [
        "2020-10-31T20:09:00.000Z",
        "13664.7",
        "13666",
        "13662.7",
        "13665",
        "1.78137663"
    ],
    [
        "2020-10-31T20:10:00.000Z",
        "13665",
        "13665.1",
        "13657.7",
        "13663.3",
        "3.68342625"
    ],
    [
        "2020-10-31T20:11:00.000Z",
        "13660.1",
        "13661.2",
        "13658",
        "13658",
        "0.05389025"
    ],
    [
        "2020-10-31T20:12:00.000Z",
        "13658.1",
        "13658.1",
        "13651.7",
        "13651.7",
        "23.76885899"
    ],
    [
        "2020-10-31T20:13:00.000Z",
        "13653.7",
        "13662",
        "13652",
        "13662",
        "11.9840952"
    ],
    [
        "2020-10-31T20:14:00.000Z",
        "13662.3",
        "13667",
        "13662.3",
        "13667",
        "3.81386204"
    ],
    [
        "2020-10-31T20:15:00.000Z",
        "13667",
        "13673.1",
        "13667",
        "13673.1",
        "2.50647097"
    ],
    [
        "2020-10-31T20:16:00.000Z",
        "13673.6",
        "13676.7",
        "13663.1",
        "13663.1",
        "1.06302788"
    ],
    [
        "2020-10-31T20:17:00.000Z",
        "13662.4",
        "13671.4",
        "13655.6",
        "13656",
        "3.47499074"
    ],
    [
        "2020-10-31T20:18:00.000Z",
        "13656.1",
        "13656.3",
        "13647.6",
        "13649.5",
        "29.63343101"
    ],
    [
        "2020-10-31T20:19:00.000Z",
        "13649.5",
        "13655",
        "13646.8",
        "13652.7",
        "6.27671186"
    ],
    [
        "2020-10-31T20:20:00.000Z",
        "13652.7",
        "13668.7",
        "13652.7",
        "13662.3",
        "14.56048318"
    ],
    [
        "2020-10-31T20:21:00.000Z",
        "13663.4",
        "13668.7",
        "13653.7",
        "13653.7",
        "10.35350219"
    ],
    [
        "2020-10-31T20:22:00.000Z",
        "13649",
        "13656.7",
        "13647.4",
        "13656.7",
        "10.36674603"
    ],
    [
        "2020-10-31T20:23:00.000Z",
        "13653.3",
        "13662.4",
        "13653.3",
        "13657.9",
        "2.75367594"
    ],
    [
        "2020-10-31T20:24:00.000Z",
        "13656.7",
        "13667.6",
        "13654.4",
        "13667.3",
        "14.51351839"
    ],
    [
        "2020-10-31T20:25:00.000Z",
        "13667.3",
        "13676.2",
        "13662.3",
        "13674.9",
        "2.44270509"
    ],
    [
        "2020-10-31T20:26:00.000Z",
        "13676.1",
        "13676.1",
        "13671.5",
        "13671.5",
        "41.62133259"
    ],
    [
        "2020-10-31T20:27:00.000Z",
        "13671.5",
        "13678.1",
        "13667.1",
        "13675.5",
        "38.88814838"
    ],
    [
        "2020-10-31T20:28:00.000Z",
        "13673.2",
        "13678.4",
        "13672.4",
        "13678.4",
        "6.24733004"
    ],
    [
        "2020-10-31T20:29:00.000Z",
        "13679.2",
        "13684.3",
        "13679.2",
        "13684.2",
        "1.51678875"
    ],
    [
        "2020-10-31T20:30:00.000Z",
        "13683.2",
        "13696.3",
        "13683.2",
        "13690.6",
        "9.46981397"
    ],
    [
        "2020-10-31T20:31:00.000Z",
        "13689.5",
        "13693.6",
        "13685.7",
        "13692.2",
        "4.0619406"
    ],
    [
        "2020-10-31T20:32:00.000Z",
        "13690.5",
        "13695.1",
        "13690.5",
        "13694.6",
        "7.92157844"
    ],
    [
        "2020-10-31T20:33:00.000Z",
        "13696.4",
        "13696.4",
        "13688.1",
        "13693.6",
        "6.31254896"
    ],
    [
        "2020-10-31T20:34:00.000Z",
        "13693.7",
        "13694",
        "13689.6",
        "13689.6",
        "5.92305951"
    ],
    [
        "2020-10-31T20:35:00.000Z",
        "13689.7",
        "13691.3",
        "13689.7",
        "13691.3",
        "4.8327475"
    ],
    [
        "2020-10-31T20:36:00.000Z",
        "13693.7",
        "13693.7",
        "13693.6",
        "13693.7",
        "19.98017408"
    ],
    [
        "2020-10-31T20:37:00.000Z",
        "13694.6",
        "13696.4",
        "13694.5",
        "13696.3",
        "64.16924256"
    ],
    [
        "2020-10-31T20:38:00.000Z",
        "13696.3",
        "13696.3",
        "13691.9",
        "13692",
        "49.47717726"
    ],
    [
        "2020-10-31T20:39:00.000Z",
        "13692",
        "13692",
        "13691.9",
        "13691.9",
        "35.58384617"
    ],
    [
        "2020-10-31T20:40:00.000Z",
        "13691.2",
        "13691.2",
        "13688.3",
        "13688.4",
        "0.32073395"
    ],
    [
        "2020-10-31T20:41:00.000Z",
        "13688.3",
        "13689.1",
        "13676.1",
        "13689.1",
        "8.74560666"
    ],
    [
        "2020-10-31T20:42:00.000Z",
        "13687.5",
        "13692",
        "13685.3",
        "13685.3",
        "1.08477368"
    ],
    [
        "2020-10-31T20:43:00.000Z",
        "13685.3",
        "13685.4",
        "13671.7",
        "13671.7",
        "5.75217586"
    ],
    [
        "2020-10-31T20:44:00.000Z",
        "13671.7",
        "13673.4",
        "13671.7",
        "13672.5",
        "4.95901128"
    ],
    [
        "2020-10-31T20:45:00.000Z",
        "13670.5",
        "13676.7",
        "13670.5",
        "13671.1",
        "22.96310629"
    ],
    [
        "2020-10-31T20:46:00.000Z",
        "13671.2",
        "13686.3",
        "13671.2",
        "13686.3",
        "91.90841967"
    ],
    [
        "2020-10-31T20:47:00.000Z",
        "13682.2",
        "13694.8",
        "13680",
        "13689.4",
        "2.81224051"
    ],
    [
        "2020-10-31T20:48:00.000Z",
        "13692.6",
        "13698.8",
        "13692.5",
        "13697.9",
        "6.08487195"
    ],
    [
        "2020-10-31T20:49:00.000Z",
        "13698.9",
        "13705.6",
        "13698.9",
        "13705.6",
        "7.08757634"
    ],
    [
        "2020-10-31T20:50:00.000Z",
        "13705.5",
        "13706.7",
        "13693.2",
        "13701.3",
        "11.75453853"
    ],
    [
        "2020-10-31T20:51:00.000Z",
        "13699.7",
        "13700",
        "13696.5",
        "13696.5",
        "157.62031331"
    ],
    [
        "2020-10-31T20:52:00.000Z",
        "13699.9",
        "13700.5",
        "13697.8",
        "13700.5",
        "54.80743634"
    ],
    [
        "2020-10-31T20:53:00.000Z",
        "13701.1",
        "13703.1",
        "13699.2",
        "13699.8",
        "12.29206933"
    ],
    [
        "2020-10-31T20:54:00.000Z",
        "13697.5",
        "13702.5",
        "13697.5",
        "13702.4",
        "7.54320225"
    ],
    [
        "2020-10-31T20:55:00.000Z",
        "13702.3",
        "13702.3",
        "13699.7",
        "13699.7",
        "4.47683922"
    ],
    [
        "2020-10-31T20:56:00.000Z",
        "13699.8",
        "13699.8",
        "13693.2",
        "13697.2",
        "0.40936376"
    ],
    [
        "2020-10-31T20:57:00.000Z",
        "13697.3",
        "13700.7",
        "13697.3",
        "13698.4",
        "4.04163941"
    ],
    [
        "2020-10-31T20:58:00.000Z",
        "13698.4",
        "13709.8",
        "13698.4",
        "13709.7",
        "9.13119741"
    ],
    [
        "2020-10-31T20:59:00.000Z",
        "13709.7",
        "13710.3",
        "13708.7",
        "13710.2",
        "1.23642596"
    ],
    [
        "2020-10-31T21:00:00.000Z",
        "13710.2",
        "13717.2",
        "13709.8",
        "13711",
        "20.60809023"
    ],
    [
        "2020-10-31T21:01:00.000Z",
        "13711",
        "13711.6",
        "13704.8",
        "13704.9",
        "0.54912559"
    ],
    [
        "2020-10-31T21:02:00.000Z",
        "13704.9",
        "13704.9",
        "13701.4",
        "13701.4",
        "5.71593534"
    ],
    [
        "2020-10-31T21:03:00.000Z",
        "13700.2",
        "13700.2",
        "13698.3",
        "13698.3",
        "0.5970661"
    ],
    [
        "2020-10-31T21:04:00.000Z",
        "13698.4",
        "13698.4",
        "13695",
        "13695",
        "3.39251143"
    ],
    [
        "2020-10-31T21:05:00.000Z",
        "13695",
        "13715.2",
        "13693.4",
        "13701.5",
        "7.14507772"
    ],
    [
        "2020-10-31T21:06:00.000Z",
        "13701.5",
        "13701.5",
        "13690.1",
        "13690.1",
        "2.99801045"
    ],
    [
        "2020-10-31T21:07:00.000Z",
        "13690.1",
        "13690.1",
        "13690.1",
        "13690.1",
        "0"
    ],
    [
        "2020-10-31T21:08:00.000Z",
        "13690.9",
        "13694.9",
        "13690.9",
        "13694.9",
        "0.07985385"
    ],
    [
        "2020-10-31T21:09:00.000Z",
        "13693.3",
        "13702.1",
        "13693.3",
        "13702.1",
        "2.71376772"
    ],
    [
        "2020-10-31T21:10:00.000Z",
        "13702",
        "13711.3",
        "13702",
        "13711.3",
        "55.60561848"
    ],
    [
        "2020-10-31T21:11:00.000Z",
        "13711.4",
        "13714.3",
        "13711.4",
        "13714.3",
        "0.09845211"
    ],
    [
        "2020-10-31T21:12:00.000Z",
        "13714.2",
        "13714.2",
        "13714.2",
        "13714.2",
        "5.51920984"
    ],
    [
        "2020-10-31T21:13:00.000Z",
        "13714.2",
        "13716.3",
        "13714.2",
        "13716.2",
        "7.67608575"
    ],
    [
        "2020-10-31T21:14:00.000Z",
        "13716.2",
        "13716.2",
        "13714.8",
        "13715.6",
        "9.38915051"
    ],
    [
        "2020-10-31T21:15:00.000Z",
        "13715.5",
        "13715.5",
        "13710.1",
        "13711.4",
        "1.56293342"
    ],
    [
        "2020-10-31T21:16:00.000Z",
        "13711.4",
        "13711.4",
        "13711.4",
        "13711.4",
        "0.00425504"
    ],
    [
        "2020-10-31T21:17:00.000Z",
        "13711.4",
        "13711.4",
        "13709.4",
        "13710.2",
        "44.11960825"
    ],
    [
        "2020-10-31T21:18:00.000Z",
        "13711.5",
        "13712.3",
        "13711.5",
        "13711.9",
        "0.10910853"
    ],
    [
        "2020-10-31T21:19:00.000Z",
        "13711.8",
        "13711.8",
        "13710.9",
        "13710.9",
        "0.12141939"
    ],
    [
        "2020-10-31T21:20:00.000Z",
        "13711",
        "13712",
        "13711",
        "13711.3",
        "4.34273833"
    ],
    [
        "2020-10-31T21:21:00.000Z",
        "13711.3",
        "13711.4",
        "13711.3",
        "13711.4",
        "5.89204374"
    ],
    [
        "2020-10-31T21:22:00.000Z",
        "13711.3",
        "13711.4",
        "13711.3",
        "13711.4",
        "132.22965107"
    ],
    [
        "2020-10-31T21:23:00.000Z",
        "13711",
        "13711",
        "13707.2",
        "13707.2",
        "0.5621851"
    ],
    [
        "2020-10-31T21:24:00.000Z",
        "13703.8",
        "13703.8",
        "13702.3",
        "13703.2",
        "0.21541027"
    ],
    [
        "2020-10-31T21:25:00.000Z",
        "13700",
        "13700",
        "13696.9",
        "13696.9",
        "1.52042762"
    ],
    [
        "2020-10-31T21:26:00.000Z",
        "13696.9",
        "13696.9",
        "13696.9",
        "13696.9",
        "0"
    ],
    [
        "2020-10-31T21:27:00.000Z",
        "13696.9",
        "13696.9",
        "13696.9",
        "13696.9",
        "0"
    ],
    [
        "2020-10-31T21:28:00.000Z",
        "13697",
        "13702.5",
        "13697",
        "13702.5",
        "12.8597982"
    ],
    [
        "2020-10-31T21:29:00.000Z",
        "13702.5",
        "13705.5",
        "13702.5",
        "13705.2",
        "21.13299552"
    ],
    [
        "2020-10-31T21:30:00.000Z",
        "13706.2",
        "13713.3",
        "13706.1",
        "13713.2",
        "79.03055663"
    ],
    [
        "2020-10-31T21:31:00.000Z",
        "13713",
        "13713.1",
        "13712.9",
        "13712.9",
        "87.37728691"
    ],
    [
        "2020-10-31T21:32:00.000Z",
        "13712.9",
        "13713",
        "13711.5",
        "13711.6",
        "191.85036116"
    ],
    [
        "2020-10-31T21:33:00.000Z",
        "13711.6",
        "13711.6",
        "13710.7",
        "13710.8",
        "0.04915929"
    ],
    [
        "2020-10-31T21:34:00.000Z",
        "13710",
        "13710",
        "13710",
        "13710",
        "6.23584174"
    ],
    [
        "2020-10-31T21:35:00.000Z",
        "13710",
        "13710",
        "13704.2",
        "13704.2",
        "0.05758229"
    ],
    [
        "2020-10-31T21:36:00.000Z",
        "13704.1",
        "13704.1",
        "13692",
        "13692.8",
        "0.7214329"
    ],
    [
        "2020-10-31T21:37:00.000Z",
        "13691.9",
        "13697",
        "13691.9",
        "13697",
        "56.72584974"
    ],
    [
        "2020-10-31T21:38:00.000Z",
        "13697",
        "13697.8",
        "13697",
        "13697.8",
        "24.31631859"
    ],
    [
        "2020-10-31T21:39:00.000Z",
        "13698.9",
        "13698.9",
        "13698.8",
        "13698.9",
        "2.04914634"
    ],
    [
        "2020-10-31T21:40:00.000Z",
        "13698.8",
        "13698.9",
        "13698.8",
        "13698.9",
        "0.85003725"
    ],
    [
        "2020-10-31T21:41:00.000Z",
        "13698.8",
        "13698.9",
        "13698.8",
        "13698.8",
        "2.43397875"
    ],
    [
        "2020-10-31T21:42:00.000Z",
        "13698.8",
        "13699",
        "13698.8",
        "13699",
        "3.21862972"
    ],
    [
        "2020-10-31T21:43:00.000Z",
        "13700",
        "13709.8",
        "13700",
        "13709.8",
        "5.43353905"
    ],
    [
        "2020-10-31T21:44:00.000Z",
        "13709.9",
        "13710.3",
        "13709.9",
        "13710.2",
        "6.36620596"
    ],
    [
        "2020-10-31T21:45:00.000Z",
        "13710.2",
        "13712.6",
        "13710.2",
        "13712.6",
        "5.43806168"
    ],
    [
        "2020-10-31T21:46:00.000Z",
        "13712.5",
        "13716.3",
        "13709.9",
        "13709.9",
        "1.25087349"
    ],
    [
        "2020-10-31T21:47:00.000Z",
        "13715.2",
        "13715.2",
        "13713.6",
        "13713.6",
        "0.45640918"
    ],
    [
        "2020-10-31T21:48:00.000Z",
        "13713.8",
        "13713.8",
        "13713.8",
        "13713.8",
        "0.00437942"
    ],
    [
        "2020-10-31T21:49:00.000Z",
        "13714.3",
        "13714.3",
        "13714.3",
        "13714.3",
        "0.01848286"
    ],
    [
        "2020-10-31T21:50:00.000Z",
        "13715.3",
        "13715.3",
        "13715.2",
        "13715.2",
        "0.01109146"
    ],
    [
        "2020-10-31T21:51:00.000Z",
        "13715.2",
        "13715.2",
        "13715.2",
        "13715.2",
        "0.13422515"
    ],
    [
        "2020-10-31T21:52:00.000Z",
        "13715.3",
        "13715.4",
        "13715.3",
        "13715.4",
        "3.83345078"
    ],
    [
        "2020-10-31T21:53:00.000Z",
        "13715.3",
        "13717.2",
        "13715.3",
        "13715.4",
        "18.4781922"
    ],
    [
        "2020-10-31T21:54:00.000Z",
        "13715.5",
        "13715.5",
        "13715.4",
        "13715.4",
        "2.61560083"
    ],
    [
        "2020-10-31T21:55:00.000Z",
        "13714.5",
        "13714.5",
        "13714.4",
        "13714.4",
        "0.00319082"
    ],
    [
        "2020-10-31T21:56:00.000Z",
        "13714.5",
        "13715.7",
        "13714.5",
        "13715.5",
        "1.25373899"
    ],
    [
        "2020-10-31T21:57:00.000Z",
        "13715.4",
        "13715.4",
        "13713.6",
        "13713.6",
        "0.54261455"
    ],
    [
        "2020-10-31T21:58:00.000Z",
        "13712.1",
        "13712.2",
        "13710.5",
        "13711.7",
        "34.17010541"
    ],
    [
        "2020-10-31T21:59:00.000Z",
        "13711.7",
        "13711.7",
        "13711.7",
        "13711.7",
        "0"
    ],
    [
        "2020-10-31T22:00:00.000Z",
        "13711.8",
        "13712.7",
        "13707.6",
        "13707.6",
        "0.18132781"
    ],
    [
        "2020-10-31T22:01:00.000Z",
        "13709.7",
        "13710",
        "13709.7",
        "13710",
        "0.04206651"
    ],
    [
        "2020-10-31T22:02:00.000Z",
        "13707.3",
        "13707.4",
        "13701.6",
        "13701.6",
        "4.38652679"
    ],
    [
        "2020-10-31T22:03:00.000Z",
        "13701.5",
        "13701.5",
        "13698.1",
        "13698.2",
        "53.46309362"
    ],
    [
        "2020-10-31T22:04:00.000Z",
        "13700.1",
        "13700.1",
        "13700.1",
        "13700.1",
        "0.00219"
    ],
    [
        "2020-10-31T22:05:00.000Z",
        "13699",
        "13703",
        "13699",
        "13703",
        "0.62124275"
    ],
    [
        "2020-10-31T22:06:00.000Z",
        "13703",
        "13703",
        "13703",
        "13703",
        "133.10922945"
    ],
    [
        "2020-10-31T22:07:00.000Z",
        "13703",
        "13703",
        "13702.9",
        "13703",
        "1.59111072"
    ],
    [
        "2020-10-31T22:08:00.000Z",
        "13703",
        "13703",
        "13702.9",
        "13702.9",
        "0.00946482"
    ],
    [
        "2020-10-31T22:09:00.000Z",
        "13702.9",
        "13702.9",
        "13702.9",
        "13702.9",
        "0"
    ],
    [
        "2020-10-31T22:10:00.000Z",
        "13702.9",
        "13703",
        "13702.9",
        "13703",
        "0.07174391"
    ],
    [
        "2020-10-31T22:11:00.000Z",
        "13702.9",
        "13702.9",
        "13699.6",
        "13699.7",
        "60.10632281"
    ],
    [
        "2020-10-31T22:12:00.000Z",
        "13699.7",
        "13699.7",
        "13698.4",
        "13698.5",
        "78.16537725"
    ],
    [
        "2020-10-31T22:13:00.000Z",
        "13698.4",
        "13698.5",
        "13698.4",
        "13698.5",
        "49.13916046"
    ],
    [
        "2020-10-31T22:14:00.000Z",
        "13698.4",
        "13701.3",
        "13696.6",
        "13698.4",
        "7.70736452"
    ],
    [
        "2020-10-31T22:15:00.000Z",
        "13698.4",
        "13698.4",
        "13693.6",
        "13694.9",
        "20.85844634"
    ],
    [
        "2020-10-31T22:16:00.000Z",
        "13694.9",
        "13700.2",
        "13694.9",
        "13698.7",
        "11.6395507"
    ],
    [
        "2020-10-31T22:17:00.000Z",
        "13699.5",
        "13703.4",
        "13699.4",
        "13703.4",
        "15.72880476"
    ],
    [
        "2020-10-31T22:18:00.000Z",
        "13703.4",
        "13709.4",
        "13703.4",
        "13709.4",
        "0.16186091"
    ],
    [
        "2020-10-31T22:19:00.000Z",
        "13709.9",
        "13711.4",
        "13709.9",
        "13711.4",
        "21.32194071"
    ],
    [
        "2020-10-31T22:20:00.000Z",
        "13711.5",
        "13711.9",
        "13711.5",
        "13711.9",
        "8.52600138"
    ],
    [
        "2020-10-31T22:21:00.000Z",
        "13712",
        "13712.1",
        "13712",
        "13712",
        "0.04001491"
    ],
    [
        "2020-10-31T22:22:00.000Z",
        "13712.1",
        "13717.2",
        "13712",
        "13717.1",
        "0.52767014"
    ],
    [
        "2020-10-31T22:23:00.000Z",
        "13717.2",
        "13719.4",
        "13717.2",
        "13719.3",
        "0.41148246"
    ],
    [
        "2020-10-31T22:24:00.000Z",
        "13719.3",
        "13724",
        "13719.3",
        "13723.9",
        "0.69378591"
    ],
    [
        "2020-10-31T22:25:00.000Z",
        "13723.9",
        "13724.8",
        "13722.2",
        "13724.8",
        "2.75807296"
    ],
    [
        "2020-10-31T22:26:00.000Z",
        "13725.7",
        "13727.5",
        "13725.4",
        "13727.4",
        "6.96015383"
    ],
    [
        "2020-10-31T22:27:00.000Z",
        "13726.3",
        "13726.4",
        "13719",
        "13719",
        "27.55845902"
    ],
    [
        "2020-10-31T22:28:00.000Z",
        "13718",
        "13725.7",
        "13717.9",
        "13724.5",
        "67.39854641"
    ],
    [
        "2020-10-31T22:29:00.000Z",
        "13724.5",
        "13724.6",
        "13719.3",
        "13723.6",
        "6.87032817"
    ],
    [
        "2020-10-31T22:30:00.000Z",
        "13723.5",
        "13726",
        "13723.5",
        "13726",
        "10.64320157"
    ],
    [
        "2020-10-31T22:31:00.000Z",
        "13726.2",
        "13728.2",
        "13726.2",
        "13728.2",
        "0.14956798"
    ],
    [
        "2020-10-31T22:32:00.000Z",
        "13728.2",
        "13731.7",
        "13728.2",
        "13728.4",
        "24.22939107"
    ],
    [
        "2020-10-31T22:33:00.000Z",
        "13728.5",
        "13736.3",
        "13728.5",
        "13736.1",
        "256.14827485"
    ],
    [
        "2020-10-31T22:34:00.000Z",
        "13736.1",
        "13742.7",
        "13736",
        "13740.6",
        "51.15548271"
    ],
    [
        "2020-10-31T22:35:00.000Z",
        "13740.6",
        "13745.2",
        "13740.6",
        "13744.4",
        "0.45356455"
    ],
    [
        "2020-10-31T22:36:00.000Z",
        "13744.4",
        "13747.6",
        "13742.3",
        "13742.3",
        "59.14085383"
    ],
    [
        "2020-10-31T22:37:00.000Z",
        "13742.3",
        "13742.3",
        "13740.6",
        "13740.6",
        "65.03306517"
    ],
    [
        "2020-10-31T22:38:00.000Z",
        "13740.6",
        "13740.7",
        "13740.6",
        "13740.6",
        "0.64089712"
    ],
    [
        "2020-10-31T22:39:00.000Z",
        "13740.6",
        "13741.9",
        "13740.6",
        "13740.7",
        "7.03575466"
    ],
    [
        "2020-10-31T22:40:00.000Z",
        "13740.6",
        "13743.9",
        "13740.6",
        "13743.9",
        "3.00688593"
    ],
    [
        "2020-10-31T22:41:00.000Z",
        "13743.9",
        "13743.9",
        "13743.8",
        "13743.8",
        "0.02089353"
    ],
    [
        "2020-10-31T22:42:00.000Z",
        "13743.9",
        "13746.7",
        "13743.9",
        "13746.4",
        "0.65438898"
    ],
    [
        "2020-10-31T22:43:00.000Z",
        "13745.7",
        "13747.7",
        "13745",
        "13747.7",
        "23.94440066"
    ],
    [
        "2020-10-31T22:44:00.000Z",
        "13747.6",
        "13756.4",
        "13747.6",
        "13754.7",
        "9.8976393"
    ],
    [
        "2020-10-31T22:45:00.000Z",
        "13753.1",
        "13764",
        "13753.1",
        "13763.1",
        "6.48351011"
    ],
    [
        "2020-10-31T22:46:00.000Z",
        "13763",
        "13763",
        "13755.3",
        "13759",
        "6.68220463"
    ],
    [
        "2020-10-31T22:47:00.000Z",
        "13759.1",
        "13761.8",
        "13753.2",
        "13753.2",
        "1.55689803"
    ],
    [
        "2020-10-31T22:48:00.000Z",
        "13752.4",
        "13752.4",
        "13745",
        "13745",
        "6.55487771"
    ],
    [
        "2020-10-31T22:49:00.000Z",
        "13745",
        "13745",
        "13736",
        "13736",
        "105.84457544"
    ],
    [
        "2020-10-31T22:50:00.000Z",
        "13735.9",
        "13801.1",
        "13734.1",
        "13760.9",
        "164.33885055"
    ],
    [
        "2020-10-31T22:51:00.000Z",
        "13760.9",
        "13760.9",
        "13752",
        "13752",
        "5.4104534"
    ],
    [
        "2020-10-31T22:52:00.000Z",
        "13751.6",
        "13760.5",
        "13750.6",
        "13760.5",
        "0.48695713"
    ],
    [
        "2020-10-31T22:53:00.000Z",
        "13760.4",
        "13760.4",
        "13753.6",
        "13753.6",
        "0.17115157"
    ],
    [
        "2020-10-31T22:54:00.000Z",
        "13753.6",
        "13753.6",
        "13752.4",
        "13752.4",
        "5.59362299"
    ],
    [
        "2020-10-31T22:55:00.000Z",
        "13752.4",
        "13752.4",
        "13738.8",
        "13749.9",
        "8.62886839"
    ],
    [
        "2020-10-31T22:56:00.000Z",
        "13751.5",
        "13758.3",
        "13751.5",
        "13757.1",
        "1.18758927"
    ],
    [
        "2020-10-31T22:57:00.000Z",
        "13757.1",
        "13765.3",
        "13755.5",
        "13765.3",
        "0.50426571"
    ],
    [
        "2020-10-31T22:58:00.000Z",
        "13762",
        "13765.3",
        "13755.4",
        "13756.9",
        "2.50070273"
    ],
    [
        "2020-10-31T22:59:00.000Z",
        "13755.5",
        "13759.8",
        "13755.5",
        "13757.5",
        "3.44668894"
    ],
    [
        "2020-10-31T23:00:00.000Z",
        "13757.4",
        "13757.4",
        "13745.3",
        "13747.9",
        "8.43415391"
    ],
    [
        "2020-10-31T23:01:00.000Z",
        "13745.4",
        "13748.3",
        "13739.8",
        "13741.2",
        "2.44801338"
    ],
    [
        "2020-10-31T23:02:00.000Z",
        "13742",
        "13742.7",
        "13737.8",
        "13737.9",
        "9.09804072"
    ],
    [
        "2020-10-31T23:03:00.000Z",
        "13740",
        "13740",
        "13738",
        "13738",
        "16.68083592"
    ],
    [
        "2020-10-31T23:04:00.000Z",
        "13738",
        "13740.1",
        "13686.9",
        "13696.7",
        "136.47537119"
    ],
    [
        "2020-10-31T23:05:00.000Z",
        "13702.9",
        "13703.5",
        "13693.4",
        "13696.6",
        "0.74482403"
    ],
    [
        "2020-10-31T23:06:00.000Z",
        "13696.4",
        "13696.6",
        "13680",
        "13696.6",
        "2.94443061"
    ],
    [
        "2020-10-31T23:07:00.000Z",
        "13696.5",
        "13701.6",
        "13696.5",
        "13700",
        "14.27721758"
    ],
    [
        "2020-10-31T23:08:00.000Z",
        "13703.4",
        "13709.5",
        "13700.2",
        "13702.8",
        "5.68296442"
    ],
    [
        "2020-10-31T23:09:00.000Z",
        "13702.8",
        "13702.8",
        "13681.3",
        "13681.3",
        "10.04969754"
    ],
    [
        "2020-10-31T23:10:00.000Z",
        "13681.2",
        "13697.4",
        "13678.9",
        "13683.5",
        "5.17392302"
    ],
    [
        "2020-10-31T23:11:00.000Z",
        "13683.3",
        "13684.4",
        "13678.1",
        "13680.2",
        "3.05082785"
    ],
    [
        "2020-10-31T23:12:00.000Z",
        "13681.5",
        "13681.5",
        "13653",
        "13653",
        "10.56549823"
    ],
    [
        "2020-10-31T23:13:00.000Z",
        "13651.8",
        "13668.3",
        "13650.8",
        "13663.7",
        "13.92963388"
    ],
    [
        "2020-10-31T23:14:00.000Z",
        "13663.7",
        "13672.6",
        "13656.9",
        "13666.1",
        "14.76393646"
    ],
    [
        "2020-10-31T23:15:00.000Z",
        "13667.8",
        "13667.8",
        "13663.7",
        "13665",
        "7.26525225"
    ],
    [
        "2020-10-31T23:16:00.000Z",
        "13668",
        "13686.8",
        "13667.9",
        "13686.8",
        "3.94022327"
    ],
    [
        "2020-10-31T23:17:00.000Z",
        "13687.1",
        "13693.3",
        "13674.8",
        "13675.7",
        "8.91455688"
    ],
    [
        "2020-10-31T23:18:00.000Z",
        "13676.1",
        "13687.3",
        "13675.2",
        "13684.1",
        "5.65632981"
    ],
    [
        "2020-10-31T23:19:00.000Z",
        "13684.9",
        "13698",
        "13683.7",
        "13692.6",
        "6.93776748"
    ],
    [
        "2020-10-31T23:20:00.000Z",
        "13692.5",
        "13697.8",
        "13686.6",
        "13694.8",
        "4.15313704"
    ],
    [
        "2020-10-31T23:21:00.000Z",
        "13694.9",
        "13696.5",
        "13662.6",
        "13676.1",
        "9.8484991"
    ],
    [
        "2020-10-31T23:22:00.000Z",
        "13676",
        "13676",
        "13651.9",
        "13654.2",
        "3.429561"
    ],
    [
        "2020-10-31T23:23:00.000Z",
        "13653",
        "13658",
        "13644.5",
        "13648.4",
        "29.21869442"
    ],
    [
        "2020-10-31T23:24:00.000Z",
        "13646.3",
        "13665.7",
        "13644.2",
        "13663.7",
        "6.2723491"
    ],
    [
        "2020-10-31T23:25:00.000Z",
        "13665.6",
        "13668",
        "13639.9",
        "13640",
        "19.92900383"
    ],
    [
        "2020-10-31T23:26:00.000Z",
        "13640",
        "13653.3",
        "13640",
        "13650.9",
        "38.84338669"
    ],
    [
        "2020-10-31T23:27:00.000Z",
        "13649.3",
        "13659.7",
        "13649.3",
        "13654.5",
        "0.43851463"
    ],
    [
        "2020-10-31T23:28:00.000Z",
        "13651.8",
        "13660.1",
        "13648.8",
        "13654.4",
        "16.53317572"
    ],
    [
        "2020-10-31T23:29:00.000Z",
        "13657.2",
        "13660.1",
        "13657.2",
        "13660.1",
        "0.15380595"
    ],
    [
        "2020-10-31T23:30:00.000Z",
        "13660.7",
        "13660.7",
        "13645.9",
        "13655.1",
        "9.7278771"
    ],
    [
        "2020-10-31T23:31:00.000Z",
        "13656.5",
        "13666.9",
        "13653.2",
        "13664.9",
        "5.63726898"
    ],
    [
        "2020-10-31T23:32:00.000Z",
        "13666",
        "13667.2",
        "13657.6",
        "13660.2",
        "10.76419663"
    ],
    [
        "2020-10-31T23:33:00.000Z",
        "13660.2",
        "13664.1",
        "13660.2",
        "13660.6",
        "130.72894689"
    ],
    [
        "2020-10-31T23:34:00.000Z",
        "13661.5",
        "13664",
        "13661.5",
        "13664",
        "27.01467875"
    ],
    [
        "2020-10-31T23:35:00.000Z",
        "13666.3",
        "13670.5",
        "13665.7",
        "13665.9",
        "4.81924164"
    ],
    [
        "2020-10-31T23:36:00.000Z",
        "13669.4",
        "13674.8",
        "13669.4",
        "13674.8",
        "49.53502063"
    ],
    [
        "2020-10-31T23:37:00.000Z",
        "13674.8",
        "13674.8",
        "13667.1",
        "13670.7",
        "7.08874186"
    ],
    [
        "2020-10-31T23:38:00.000Z",
        "13671.8",
        "13677.2",
        "13671.8",
        "13673.5",
        "8.13603401"
    ],
    [
        "2020-10-31T23:39:00.000Z",
        "13677.1",
        "13677.9",
        "13677",
        "13677.9",
        "11.22006242"
    ],
    [
        "2020-10-31T23:40:00.000Z",
        "13678",
        "13678",
        "13677.9",
        "13677.9",
        "0.23588726"
    ],
    [
        "2020-10-31T23:41:00.000Z",
        "13678",
        "13678",
        "13674.4",
        "13674.4",
        "7.63808916"
    ],
    [
        "2020-10-31T23:42:00.000Z",
        "13674.4",
        "13674.4",
        "13673.1",
        "13673.1",
        "68.83676947"
    ],
    [
        "2020-10-31T23:43:00.000Z",
        "13673.1",
        "13679.7",
        "13672.9",
        "13676.6",
        "45.92583165"
    ],
    [
        "2020-10-31T23:44:00.000Z",
        "13678.2",
        "13680",
        "13678.2",
        "13680",
        "83.08921602"
    ],
    [
        "2020-10-31T23:45:00.000Z",
        "13682.2",
        "13684.6",
        "13680.7",
        "13684.6",
        "1.01569834"
    ],
    [
        "2020-10-31T23:46:00.000Z",
        "13684.6",
        "13694.9",
        "13684.6",
        "13691.9",
        "20.43757124"
    ],
    [
        "2020-10-31T23:47:00.000Z",
        "13691.9",
        "13691.9",
        "13686.8",
        "13686.9",
        "30.71690142"
    ],
    [
        "2020-10-31T23:48:00.000Z",
        "13686.9",
        "13686.9",
        "13678.4",
        "13678.4",
        "2.45519875"
    ],
    [
        "2020-10-31T23:49:00.000Z",
        "13678.5",
        "13678.5",
        "13678.4",
        "13678.4",
        "0.07487655"
    ],
    [
        "2020-10-31T23:50:00.000Z",
        "13678.4",
        "13689.4",
        "13678.4",
        "13684.5",
        "18.48302247"
    ],
    [
        "2020-10-31T23:51:00.000Z",
        "13684.6",
        "13692.5",
        "13679.2",
        "13679.2",
        "2.20871529"
    ],
    [
        "2020-10-31T23:52:00.000Z",
        "13679.2",
        "13679.2",
        "13661.1",
        "13661.1",
        "10.01992626"
    ],
    [
        "2020-10-31T23:53:00.000Z",
        "13661.2",
        "13668.9",
        "13660",
        "13661.9",
        "9.13452627"
    ],
    [
        "2020-10-31T23:54:00.000Z",
        "13663.2",
        "13674.7",
        "13663.2",
        "13674.7",
        "2.55854596"
    ],
    [
        "2020-10-31T23:55:00.000Z",
        "13671.3",
        "13675.1",
        "13665.1",
        "13666.8",
        "5.18297697"
    ],
    [
        "2020-10-31T23:56:00.000Z",
        "13667.3",
        "13676.4",
        "13665.1",
        "13665.1",
        "0.42922794"
    ],
    [
        "2020-10-31T23:57:00.000Z",
        "13666",
        "13673.1",
        "13666",
        "13673.1",
        "3.7319568"
    ],
    [
        "2020-10-31T23:58:00.000Z",
        "13673.1",
        "13674.7",
        "13672.5",
        "13674.7",
        "37.28725397"
    ],
    [
        "2020-10-31T23:59:00.000Z",
        "13674.6",
        "13674.7",
        "13666.5",
        "13666.5",
        "9.16494977"
    ],
    [
        "2020-11-01T00:00:00.000Z",
        "13666",
        "13666",
        "13587.5",
        "13603.9",
        "57.1393584"
    ],
    [
        "2020-11-01T00:01:00.000Z",
        "13607.4",
        "13615.5",
        "13600.9",
        "13610.5",
        "8.35485893"
    ],
    [
        "2020-11-01T00:02:00.000Z",
        "13611.2",
        "13633.9",
        "13599.4",
        "13632.7",
        "3.69760722"
    ],
    [
        "2020-11-01T00:03:00.000Z",
        "13633.4",
        "13640.9",
        "13630.6",
        "13632.7",
        "9.90639458"
    ],
    [
        "2020-11-01T00:04:00.000Z",
        "13633.5",
        "13675.2",
        "13633.5",
        "13674",
        "7.94926617"
    ],
    [
        "2020-11-01T00:05:00.000Z",
        "13674",
        "13704.7",
        "13672",
        "13704.7",
        "12.90483405"
    ],
    [
        "2020-11-01T00:06:00.000Z",
        "13704.7",
        "13721.8",
        "13683",
        "13719",
        "13.35421376"
    ],
    [
        "2020-11-01T00:07:00.000Z",
        "13719.1",
        "13748.3",
        "13717.4",
        "13746",
        "7.87667414"
    ],
    [
        "2020-11-01T00:08:00.000Z",
        "13746.7",
        "13760.6",
        "13731",
        "13739",
        "9.82368561"
    ],
    [
        "2020-11-01T00:09:00.000Z",
        "13739.8",
        "13757.5",
        "13731",
        "13753.8",
        "8.0448164"
    ],
    [
        "2020-11-01T00:10:00.000Z",
        "13754.4",
        "13754.4",
        "13731.3",
        "13746",
        "5.49580656"
    ],
    [
        "2020-11-01T00:11:00.000Z",
        "13745.3",
        "13755.8",
        "13742.6",
        "13743.3",
        "12.71215668"
    ],
    [
        "2020-11-01T00:12:00.000Z",
        "13746.1",
        "13749.5",
        "13721.6",
        "13731.1",
        "31.42850229"
    ],
    [
        "2020-11-01T00:13:00.000Z",
        "13730.9",
        "13732.7",
        "13716.4",
        "13725.9",
        "5.82437117"
    ],
    [
        "2020-11-01T00:14:00.000Z",
        "13725.9",
        "13732.1",
        "13720",
        "13732.1",
        "2.49293032"
    ],
    [
        "2020-11-01T00:15:00.000Z",
        "13732.7",
        "13736",
        "13717.4",
        "13722.6",
        "2.9780748"
    ],
    [
        "2020-11-01T00:16:00.000Z",
        "13722.6",
        "13724.6",
        "13722.6",
        "13723.3",
        "2.90161585"
    ],
    [
        "2020-11-01T00:17:00.000Z",
        "13723.3",
        "13723.3",
        "13708.8",
        "13709.6",
        "7.49023053"
    ],
    [
        "2020-11-01T00:18:00.000Z",
        "13709.5",
        "13713.6",
        "13706.1",
        "13709.6",
        "13.78203916"
    ],
    [
        "2020-11-01T00:19:00.000Z",
        "13709.5",
        "13709.5",
        "13704.1",
        "13704.2",
        "3.03147621"
    ],
    [
        "2020-11-01T00:20:00.000Z",
        "13704.2",
        "13706.6",
        "13704.1",
        "13706.6",
        "18.6373481"
    ],
    [
        "2020-11-01T00:21:00.000Z",
        "13706.6",
        "13720.4",
        "13706.6",
        "13706.9",
        "1.90482339"
    ],
    [
        "2020-11-01T00:22:00.000Z",
        "13706.9",
        "13706.9",
        "13700.5",
        "13700.7",
        "4.29237646"
    ],
    [
        "2020-11-01T00:23:00.000Z",
        "13700.7",
        "13707.8",
        "13700.7",
        "13707.8",
        "9.74719614"
    ],
    [
        "2020-11-01T00:24:00.000Z",
        "13707.8",
        "13716.1",
        "13707.8",
        "13716.1",
        "6.86836604"
    ],
    [
        "2020-11-01T00:25:00.000Z",
        "13716.1",
        "13716.1",
        "13710.4",
        "13712.9",
        "6.64111385"
    ],
    [
        "2020-11-01T00:26:00.000Z",
        "13713.6",
        "13719.4",
        "13713.6",
        "13719.4",
        "42.6980852"
    ],
    [
        "2020-11-01T00:27:00.000Z",
        "13719.4",
        "13724",
        "13719.4",
        "13723.2",
        "0.74350754"
    ],
    [
        "2020-11-01T00:28:00.000Z",
        "13723.2",
        "13729.1",
        "13723.2",
        "13728.7",
        "6.06878009"
    ],
    [
        "2020-11-01T00:29:00.000Z",
        "13728.7",
        "13729.4",
        "13713.9",
        "13713.9",
        "16.14465362"
    ],
    [
        "2020-11-01T00:30:00.000Z",
        "13714.7",
        "13724.9",
        "13714.3",
        "13714.3",
        "3.03412452"
    ],
    [
        "2020-11-01T00:31:00.000Z",
        "13715",
        "13715",
        "13708.9",
        "13708.9",
        "5.10686083"
    ],
    [
        "2020-11-01T00:32:00.000Z",
        "13708.9",
        "13708.9",
        "13662.4",
        "13674.4",
        "19.16298887"
    ],
    [
        "2020-11-01T00:33:00.000Z",
        "13674.5",
        "13674.5",
        "13616.5",
        "13621.2",
        "27.43637428"
    ],
    [
        "2020-11-01T00:34:00.000Z",
        "13622.6",
        "13650.7",
        "13622.6",
        "13641.9",
        "4.24325995"
    ],
    [
        "2020-11-01T00:35:00.000Z",
        "13641.8",
        "13643",
        "13587.6",
        "13609.4",
        "6.31777068"
    ],
    [
        "2020-11-01T00:36:00.000Z",
        "13612.5",
        "13620.5",
        "13592.6",
        "13594.2",
        "4.25491394"
    ],
    [
        "2020-11-01T00:37:00.000Z",
        "13594.2",
        "13597.9",
        "13550",
        "13555.3",
        "28.28885905"
    ],
    [
        "2020-11-01T00:38:00.000Z",
        "13556.1",
        "13591.6",
        "13545.6",
        "13577.6",
        "12.96390729"
    ],
    [
        "2020-11-01T00:39:00.000Z",
        "13577.7",
        "13582.2",
        "13556.3",
        "13557.3",
        "2.46046551"
    ],
    [
        "2020-11-01T00:40:00.000Z",
        "13556.9",
        "13582.1",
        "13529.3",
        "13572.6",
        "13.90522923"
    ],
    [
        "2020-11-01T00:41:00.000Z",
        "13570.3",
        "13585.7",
        "13564.5",
        "13567.8",
        "5.44106312"
    ],
    [
        "2020-11-01T00:42:00.000Z",
        "13566.1",
        "13580.3",
        "13563.4",
        "13580.1",
        "3.88919753"
    ],
    [
        "2020-11-01T00:43:00.000Z",
        "13580.2",
        "13583.1",
        "13559.6",
        "13567",
        "2.73104179"
    ],
    [
        "2020-11-01T00:44:00.000Z",
        "13567",
        "13588.7",
        "13567",
        "13586.2",
        "3.47885081"
    ],
    [
        "2020-11-01T00:45:00.000Z",
        "13584.6",
        "13591.4",
        "13575",
        "13591.4",
        "46.16782781"
    ],
    [
        "2020-11-01T00:46:00.000Z",
        "13591.4",
        "13599.4",
        "13583.1",
        "13584.3",
        "22.25503092"
    ],
    [
        "2020-11-01T00:47:00.000Z",
        "13584.4",
        "13597.4",
        "13584.4",
        "13597.4",
        "23.05866854"
    ],
    [
        "2020-11-01T00:48:00.000Z",
        "13597.4",
        "13605.4",
        "13597.3",
        "13605.4",
        "23.30710548"
    ],
    [
        "2020-11-01T00:49:00.000Z",
        "13605.4",
        "13610.7",
        "13605.4",
        "13606",
        "11.7173511"
    ],
    [
        "2020-11-01T00:50:00.000Z",
        "13606",
        "13606",
        "13597.3",
        "13602.3",
        "7.12827888"
    ],
    [
        "2020-11-01T00:51:00.000Z",
        "13598",
        "13598.1",
        "13597.7",
        "13597.7",
        "22.78501003"
    ],
    [
        "2020-11-01T00:52:00.000Z",
        "13597.6",
        "13603.8",
        "13597.6",
        "13603.2",
        "2.38813854"
    ],
    [
        "2020-11-01T00:53:00.000Z",
        "13603.2",
        "13603.2",
        "13596.2",
        "13597.1",
        "4.69512471"
    ],
    [
        "2020-11-01T00:54:00.000Z",
        "13595.9",
        "13595.9",
        "13586.2",
        "13586.2",
        "3.41966751"
    ],
    [
        "2020-11-01T00:55:00.000Z",
        "13586.1",
        "13586.2",
        "13567.1",
        "13580.1",
        "8.21119988"
    ],
    [
        "2020-11-01T00:56:00.000Z",
        "13577.3",
        "13592.2",
        "13576",
        "13588.6",
        "9.73800161"
    ],
    [
        "2020-11-01T00:57:00.000Z",
        "13588.6",
        "13597.8",
        "13588.6",
        "13595.7",
        "26.73573008"
    ],
    [
        "2020-11-01T00:58:00.000Z",
        "13595.6",
        "13595.6",
        "13579.8",
        "13593.9",
        "4.00525458"
    ],
    [
        "2020-11-01T00:59:00.000Z",
        "13590.8",
        "13594.5",
        "13588.2",
        "13588.2",
        "4.98481177"
    ],
    [
        "2020-11-01T01:00:00.000Z",
        "13588.3",
        "13592.2",
        "13577",
        "13592.2",
        "10.4425213"
    ],
    [
        "2020-11-01T01:01:00.000Z",
        "13591.3",
        "13601.7",
        "13591.3",
        "13600.5",
        "7.43700604"
    ],
    [
        "2020-11-01T01:02:00.000Z",
        "13596.3",
        "13596.3",
        "13590.8",
        "13590.8",
        "41.65920744"
    ],
    [
        "2020-11-01T01:03:00.000Z",
        "13590.8",
        "13591.2",
        "13581.6",
        "13591.2",
        "2.12277701"
    ],
    [
        "2020-11-01T01:04:00.000Z",
        "13591.2",
        "13594.7",
        "13589.8",
        "13591.5",
        "12.45584252"
    ],
    [
        "2020-11-01T01:05:00.000Z",
        "13592.3",
        "13612.9",
        "13592.3",
        "13612.9",
        "4.1550523"
    ],
    [
        "2020-11-01T01:06:00.000Z",
        "13612.9",
        "13617.8",
        "13610.8",
        "13617.8",
        "4.35489861"
    ],
    [
        "2020-11-01T01:07:00.000Z",
        "13618.4",
        "13625.1",
        "13618.4",
        "13622.7",
        "15.3938324"
    ],
    [
        "2020-11-01T01:08:00.000Z",
        "13621.6",
        "13622.1",
        "13614.2",
        "13615",
        "7.23571407"
    ],
    [
        "2020-11-01T01:09:00.000Z",
        "13614.9",
        "13615.3",
        "13611",
        "13612.1",
        "0.42093991"
    ],
    [
        "2020-11-01T01:10:00.000Z",
        "13612.1",
        "13612.8",
        "13602.8",
        "13612.1",
        "13.1231945"
    ],
    [
        "2020-11-01T01:11:00.000Z",
        "13609.6",
        "13609.6",
        "13608",
        "13608",
        "3.54879474"
    ],
    [
        "2020-11-01T01:12:00.000Z",
        "13606.5",
        "13606.5",
        "13605.2",
        "13605.2",
        "1.70519607"
    ],
    [
        "2020-11-01T01:13:00.000Z",
        "13603.9",
        "13606.2",
        "13600.6",
        "13606.1",
        "0.47779806"
    ],
    [
        "2020-11-01T01:14:00.000Z",
        "13604.7",
        "13614.7",
        "13604.7",
        "13614.4",
        "5.25936796"
    ],
    [
        "2020-11-01T01:15:00.000Z",
        "13614.5",
        "13624.9",
        "13614.5",
        "13621.2",
        "36.89350583"
    ],
    [
        "2020-11-01T01:16:00.000Z",
        "13621.7",
        "13621.7",
        "13614",
        "13619.3",
        "9.75529542"
    ],
    [
        "2020-11-01T01:17:00.000Z",
        "13620.7",
        "13620.7",
        "13607.7",
        "13612.4",
        "21.62310534"
    ],
    [
        "2020-11-01T01:18:00.000Z",
        "13612.4",
        "13620.2",
        "13612.4",
        "13617.7",
        "7.44709111"
    ],
    [
        "2020-11-01T01:19:00.000Z",
        "13618.3",
        "13626",
        "13618.3",
        "13624.2",
        "21.79399563"
    ],
    [
        "2020-11-01T01:20:00.000Z",
        "13624.2",
        "13624.8",
        "13623",
        "13623",
        "9.62185644"
    ],
    [
        "2020-11-01T01:21:00.000Z",
        "13623",
        "13630",
        "13623",
        "13629.9",
        "3.88348918"
    ],
    [
        "2020-11-01T01:22:00.000Z",
        "13630",
        "13630",
        "13626.3",
        "13629.1",
        "6.06369444"
    ],
    [
        "2020-11-01T01:23:00.000Z",
        "13629.1",
        "13630",
        "13626.2",
        "13626.2",
        "10.81074162"
    ],
    [
        "2020-11-01T01:24:00.000Z",
        "13626.1",
        "13626.1",
        "13624.4",
        "13624.4",
        "19.73531682"
    ],
    [
        "2020-11-01T01:25:00.000Z",
        "13623.6",
        "13625.5",
        "13623.6",
        "13624.5",
        "137.6086504"
    ],
    [
        "2020-11-01T01:26:00.000Z",
        "13624.5",
        "13624.6",
        "13615.5",
        "13615.6",
        "12.61073011"
    ],
    [
        "2020-11-01T01:27:00.000Z",
        "13615.5",
        "13615.5",
        "13614.5",
        "13614.6",
        "14.01227619"
    ],
    [
        "2020-11-01T01:28:00.000Z",
        "13614.5",
        "13614.6",
        "13604.8",
        "13604.8",
        "57.59057338"
    ],
    [
        "2020-11-01T01:29:00.000Z",
        "13604.6",
        "13604.6",
        "13594.5",
        "13597.5",
        "16.37240768"
    ],
    [
        "2020-11-01T01:30:00.000Z",
        "13597.5",
        "13604.6",
        "13597.5",
        "13604.5",
        "5.41493678"
    ],
    [
        "2020-11-01T01:31:00.000Z",
        "13604.5",
        "13611.1",
        "13601.5",
        "13601.5",
        "5.0555319"
    ],
    [
        "2020-11-01T01:32:00.000Z",
        "13601.6",
        "13607.4",
        "13601.5",
        "13607.4",
        "21.83121449"
    ],
    [
        "2020-11-01T01:33:00.000Z",
        "13607.3",
        "13609.7",
        "13607.2",
        "13607.3",
        "0.57094024"
    ],
    [
        "2020-11-01T01:34:00.000Z",
        "13607.3",
        "13607.3",
        "13600",
        "13605.6",
        "21.07917009"
    ],
    [
        "2020-11-01T01:35:00.000Z",
        "13605.6",
        "13605.7",
        "13597.3",
        "13597.3",
        "9.01280514"
    ],
    [
        "2020-11-01T01:36:00.000Z",
        "13597.3",
        "13597.3",
        "13575.3",
        "13580.9",
        "16.02495576"
    ],
    [
        "2020-11-01T01:37:00.000Z",
        "13581",
        "13587.2",
        "13578.7",
        "13586.8",
        "6.32984125"
    ],
    [
        "2020-11-01T01:38:00.000Z",
        "13588.1",
        "13594.7",
        "13584.6",
        "13587.5",
        "7.74707988"
    ],
    [
        "2020-11-01T01:39:00.000Z",
        "13588",
        "13597",
        "13588",
        "13588",
        "22.11975222"
    ],
    [
        "2020-11-01T01:40:00.000Z",
        "13588.1",
        "13588.1",
        "13581.7",
        "13585.8",
        "4.85131486"
    ],
    [
        "2020-11-01T01:41:00.000Z",
        "13585.8",
        "13591",
        "13582.8",
        "13590.9",
        "3.65218433"
    ],
    [
        "2020-11-01T01:42:00.000Z",
        "13590.9",
        "13590.9",
        "13589.8",
        "13589.9",
        "4.84939966"
    ],
    [
        "2020-11-01T01:43:00.000Z",
        "13589.8",
        "13592.5",
        "13589.8",
        "13592.4",
        "5.67391395"
    ],
    [
        "2020-11-01T01:44:00.000Z",
        "13592.5",
        "13597.3",
        "13592.5",
        "13596.8",
        "64.85433336"
    ],
    [
        "2020-11-01T01:45:00.000Z",
        "13596.8",
        "13601.2",
        "13596.8",
        "13600.5",
        "7.15523609"
    ],
    [
        "2020-11-01T01:46:00.000Z",
        "13600.5",
        "13606.9",
        "13600",
        "13606.8",
        "5.29963702"
    ],
    [
        "2020-11-01T01:47:00.000Z",
        "13606.8",
        "13612.1",
        "13605.2",
        "13612.1",
        "3.44941741"
    ],
    [
        "2020-11-01T01:48:00.000Z",
        "13612.1",
        "13627.9",
        "13612.1",
        "13627.9",
        "19.8274487"
    ],
    [
        "2020-11-01T01:49:00.000Z",
        "13627.9",
        "13628",
        "13621.9",
        "13628",
        "4.09596773"
    ],
    [
        "2020-11-01T01:50:00.000Z",
        "13627.9",
        "13633.5",
        "13627.9",
        "13633.4",
        "1.81103074"
    ],
    [
        "2020-11-01T01:51:00.000Z",
        "13633.4",
        "13633.5",
        "13632.2",
        "13633.5",
        "17.12447147"
    ],
    [
        "2020-11-01T01:52:00.000Z",
        "13633.4",
        "13633.5",
        "13623.9",
        "13624.8",
        "6.62036959"
    ],
    [
        "2020-11-01T01:53:00.000Z",
        "13624.8",
        "13624.9",
        "13616.5",
        "13619.2",
        "6.36018526"
    ],
    [
        "2020-11-01T01:54:00.000Z",
        "13619.2",
        "13623",
        "13619.2",
        "13619.2",
        "19.18615625"
    ],
    [
        "2020-11-01T01:55:00.000Z",
        "13618.8",
        "13630.7",
        "13618.8",
        "13624.8",
        "8.61974448"
    ],
    [
        "2020-11-01T01:56:00.000Z",
        "13623.9",
        "13628",
        "13621.6",
        "13622.9",
        "10.86883128"
    ],
    [
        "2020-11-01T01:57:00.000Z",
        "13622.8",
        "13622.8",
        "13621.3",
        "13621.9",
        "11.37294121"
    ],
    [
        "2020-11-01T01:58:00.000Z",
        "13621.9",
        "13622",
        "13618.8",
        "13618.9",
        "0.31165386"
    ],
    [
        "2020-11-01T01:59:00.000Z",
        "13618.9",
        "13618.9",
        "13616.4",
        "13616.4",
        "17.6897498"
    ],
    [
        "2020-11-01T02:00:00.000Z",
        "13616.4",
        "13624.6",
        "13616.4",
        "13621.7",
        "89.21970683"
    ],
    [
        "2020-11-01T02:01:00.000Z",
        "13621.6",
        "13621.6",
        "13620",
        "13620",
        "0.01275656"
    ],
    [
        "2020-11-01T02:02:00.000Z",
        "13620",
        "13621.2",
        "13620",
        "13621.1",
        "130.28602512"
    ],
    [
        "2020-11-01T02:03:00.000Z",
        "13621.1",
        "13624.4",
        "13621.1",
        "13622.5",
        "6.87375747"
    ],
    [
        "2020-11-01T02:04:00.000Z",
        "13622.6",
        "13622.6",
        "13621.3",
        "13621.3",
        "5.8347084"
    ],
    [
        "2020-11-01T02:05:00.000Z",
        "13621.4",
        "13621.4",
        "13615.5",
        "13616.4",
        "11.52630017"
    ],
    [
        "2020-11-01T02:06:00.000Z",
        "13616.3",
        "13622.2",
        "13616.3",
        "13622.2",
        "56.81640771"
    ],
    [
        "2020-11-01T02:07:00.000Z",
        "13622.2",
        "13627.1",
        "13622.2",
        "13625.9",
        "173.77509861"
    ],
    [
        "2020-11-01T02:08:00.000Z",
        "13625.9",
        "13628.6",
        "13624.8",
        "13628.6",
        "9.33549549"
    ],
    [
        "2020-11-01T02:09:00.000Z",
        "13630.4",
        "13630.7",
        "13629.4",
        "13630.7",
        "9.55996241"
    ],
    [
        "2020-11-01T02:10:00.000Z",
        "13630.8",
        "13633",
        "13627.9",
        "13632",
        "6.84981404"
    ],
    [
        "2020-11-01T02:11:00.000Z",
        "13632",
        "13632.7",
        "13632",
        "13632.5",
        "1.30454456"
    ],
    [
        "2020-11-01T02:12:00.000Z",
        "13632.4",
        "13632.5",
        "13632.4",
        "13632.4",
        "69.41973036"
    ],
    [
        "2020-11-01T02:13:00.000Z",
        "13630",
        "13630",
        "13620",
        "13620",
        "13.39359827"
    ],
    [
        "2020-11-01T02:14:00.000Z",
        "13621.3",
        "13621.3",
        "13613.3",
        "13615.5",
        "218.37607052"
    ],
    [
        "2020-11-01T02:15:00.000Z",
        "13615.6",
        "13615.7",
        "13615.6",
        "13615.7",
        "4.75032774"
    ],
    [
        "2020-11-01T02:16:00.000Z",
        "13615.6",
        "13615.7",
        "13605.7",
        "13608",
        "11.66530631"
    ],
    [
        "2020-11-01T02:17:00.000Z",
        "13605.6",
        "13609.9",
        "13600",
        "13607.3",
        "1.98192733"
    ],
    [
        "2020-11-01T02:18:00.000Z",
        "13607.3",
        "13616.7",
        "13607.3",
        "13616.7",
        "5.39859919"
    ],
    [
        "2020-11-01T02:19:00.000Z",
        "13616.7",
        "13618.8",
        "13616",
        "13616.7",
        "3.2161292"
    ],
    [
        "2020-11-01T02:20:00.000Z",
        "13618.5",
        "13618.5",
        "13607.3",
        "13615.1",
        "6.07681235"
    ],
    [
        "2020-11-01T02:21:00.000Z",
        "13611.8",
        "13615.1",
        "13610.7",
        "13615.1",
        "5.73684383"
    ],
    [
        "2020-11-01T02:22:00.000Z",
        "13611.4",
        "13611.5",
        "13609.8",
        "13611.5",
        "4.02326979"
    ],
    [
        "2020-11-01T02:23:00.000Z",
        "13611.4",
        "13615.1",
        "13611.4",
        "13615.1",
        "8.50611755"
    ],
    [
        "2020-11-01T02:24:00.000Z",
        "13614.1",
        "13618.7",
        "13614.1",
        "13615.5",
        "7.72694912"
    ],
    [
        "2020-11-01T02:25:00.000Z",
        "13616.3",
        "13616.3",
        "13613.5",
        "13613.5",
        "4.85621967"
    ],
    [
        "2020-11-01T02:26:00.000Z",
        "13613.5",
        "13614.2",
        "13613.4",
        "13613.4",
        "0.08713173"
    ],
    [
        "2020-11-01T02:27:00.000Z",
        "13614.3",
        "13616.3",
        "13614.3",
        "13616.2",
        "0.11624185"
    ],
    [
        "2020-11-01T02:28:00.000Z",
        "13616.3",
        "13618.5",
        "13616.3",
        "13616.4",
        "1.40539742"
    ],
    [
        "2020-11-01T02:29:00.000Z",
        "13617.2",
        "13622.9",
        "13617.2",
        "13620.6",
        "18.48996698"
    ],
    [
        "2020-11-01T02:30:00.000Z",
        "13620.6",
        "13625",
        "13620.6",
        "13625",
        "61.13843237"
    ],
    [
        "2020-11-01T02:31:00.000Z",
        "13625.3",
        "13625.7",
        "13625",
        "13625",
        "3.29593306"
    ],
    [
        "2020-11-01T02:32:00.000Z",
        "13623.2",
        "13623.3",
        "13621.9",
        "13622",
        "0.1108048"
    ],
    [
        "2020-11-01T02:33:00.000Z",
        "13622",
        "13622.2",
        "13621.9",
        "13622.2",
        "9.51784478"
    ],
    [
        "2020-11-01T02:34:00.000Z",
        "13622.2",
        "13626.6",
        "13622.2",
        "13622.2",
        "4.01644029"
    ],
    [
        "2020-11-01T02:35:00.000Z",
        "13622.2",
        "13622.2",
        "13618",
        "13618",
        "5.35017532"
    ],
    [
        "2020-11-01T02:36:00.000Z",
        "13617.6",
        "13617.6",
        "13604.9",
        "13607.3",
        "6.81634505"
    ],
    [
        "2020-11-01T02:37:00.000Z",
        "13607.4",
        "13608.1",
        "13604",
        "13604",
        "5.42335158"
    ],
    [
        "2020-11-01T02:38:00.000Z",
        "13602.5",
        "13602.5",
        "13599.1",
        "13599.1",
        "5.49625165"
    ],
    [
        "2020-11-01T02:39:00.000Z",
        "13596.7",
        "13596.8",
        "13589",
        "13592",
        "9.56241005"
    ],
    [
        "2020-11-01T02:40:00.000Z",
        "13592",
        "13594.1",
        "13588.3",
        "13591.8",
        "32.53801594"
    ],
    [
        "2020-11-01T02:41:00.000Z",
        "13590.2",
        "13593.6",
        "13590",
        "13593.6",
        "88.37234449"
    ],
    [
        "2020-11-01T02:42:00.000Z",
        "13593.6",
        "13597.9",
        "13593.4",
        "13596.7",
        "120.13431893"
    ],
    [
        "2020-11-01T02:43:00.000Z",
        "13596.7",
        "13596.7",
        "13595.5",
        "13595.5",
        "5.303642"
    ],
    [
        "2020-11-01T02:44:00.000Z",
        "13595.5",
        "13595.6",
        "13590.1",
        "13590.1",
        "2.41755815"
    ],
    [
        "2020-11-01T02:45:00.000Z",
        "13588.6",
        "13588.6",
        "13577.8",
        "13582.3",
        "5.01483129"
    ],
    [
        "2020-11-01T02:46:00.000Z",
        "13579.1",
        "13580.6",
        "13571.8",
        "13580.6",
        "15.43285279"
    ],
    [
        "2020-11-01T02:47:00.000Z",
        "13580.6",
        "13582.3",
        "13575.6",
        "13575.6",
        "4.67574522"
    ],
    [
        "2020-11-01T02:48:00.000Z",
        "13575.8",
        "13575.8",
        "13570.4",
        "13574.9",
        "15.2887301"
    ],
    [
        "2020-11-01T02:49:00.000Z",
        "13573.3",
        "13574.4",
        "13570.6",
        "13570.6",
        "6.48482986"
    ],
    [
        "2020-11-01T02:50:00.000Z",
        "13570.6",
        "13570.6",
        "13560",
        "13561",
        "7.53928041"
    ],
    [
        "2020-11-01T02:51:00.000Z",
        "13561",
        "13563.6",
        "13560.9",
        "13561",
        "1.53028626"
    ],
    [
        "2020-11-01T02:52:00.000Z",
        "13561",
        "13569.1",
        "13561",
        "13565.3",
        "34.24241361"
    ],
    [
        "2020-11-01T02:53:00.000Z",
        "13564.7",
        "13564.7",
        "13561.1",
        "13564.4",
        "0.51386362"
    ],
    [
        "2020-11-01T02:54:00.000Z",
        "13564.4",
        "13564.4",
        "13560",
        "13560",
        "1.56484445"
    ],
    [
        "2020-11-01T02:55:00.000Z",
        "13560",
        "13560",
        "13526.9",
        "13552.7",
        "15.44557243"
    ],
    [
        "2020-11-01T02:56:00.000Z",
        "13555.2",
        "13559.2",
        "13546.3",
        "13551.9",
        "13.74056092"
    ],
    [
        "2020-11-01T02:57:00.000Z",
        "13554.3",
        "13568.8",
        "13552",
        "13565.7",
        "7.50371253"
    ],
    [
        "2020-11-01T02:58:00.000Z",
        "13565.6",
        "13565.7",
        "13558.9",
        "13558.9",
        "27.77975852"
    ],
    [
        "2020-11-01T02:59:00.000Z",
        "13558.9",
        "13563.5",
        "13553.7",
        "13563.5",
        "14.07303368"
    ],
    [
        "2020-11-01T03:00:00.000Z",
        "13563.4",
        "13563.4",
        "13540.1",
        "13545.1",
        "2.36198696"
    ],
    [
        "2020-11-01T03:01:00.000Z",
        "13545",
        "13557.9",
        "13537.4",
        "13546.8",
        "4.88123338"
    ],
    [
        "2020-11-01T03:02:00.000Z",
        "13546.5",
        "13556.1",
        "13546.5",
        "13550.7",
        "13.81751821"
    ],
    [
        "2020-11-01T03:03:00.000Z",
        "13550.7",
        "13567.5",
        "13550.6",
        "13567.5",
        "13.99108068"
    ],
    [
        "2020-11-01T03:04:00.000Z",
        "13568",
        "13575.7",
        "13568",
        "13575.7",
        "58.30284644"
    ],
    [
        "2020-11-01T03:05:00.000Z",
        "13576.2",
        "13580.2",
        "13571",
        "13575.7",
        "10.60623799"
    ],
    [
        "2020-11-01T03:06:00.000Z",
        "13576",
        "13576.7",
        "13566",
        "13566",
        "20.0662604"
    ],
    [
        "2020-11-01T03:07:00.000Z",
        "13566.1",
        "13574.6",
        "13560",
        "13560",
        "31.61312059"
    ],
    [
        "2020-11-01T03:08:00.000Z",
        "13557.9",
        "13559.1",
        "13552.6",
        "13557.6",
        "25.16350821"
    ],
    [
        "2020-11-01T03:09:00.000Z",
        "13557.7",
        "13557.7",
        "13557.6",
        "13557.6",
        "161.15046735"
    ],
    [
        "2020-11-01T03:10:00.000Z",
        "13557.6",
        "13564.1",
        "13557.6",
        "13558.3",
        "195.77759314"
    ],
    [
        "2020-11-01T03:11:00.000Z",
        "13558.3",
        "13558.3",
        "13555",
        "13555",
        "209.9278209"
    ],
    [
        "2020-11-01T03:12:00.000Z",
        "13555",
        "13555",
        "13546.1",
        "13549.1",
        "21.07502498"
    ],
    [
        "2020-11-01T03:13:00.000Z",
        "13549",
        "13558.1",
        "13549",
        "13550.7",
        "14.73443091"
    ],
    [
        "2020-11-01T03:14:00.000Z",
        "13550.7",
        "13550.7",
        "13547.4",
        "13548.8",
        "0.39687515"
    ],
    [
        "2020-11-01T03:15:00.000Z",
        "13548.9",
        "13549.5",
        "13548.9",
        "13549.4",
        "5.17231081"
    ],
    [
        "2020-11-01T03:16:00.000Z",
        "13548.9",
        "13557.1",
        "13548.9",
        "13556.6",
        "2.52114303"
    ],
    [
        "2020-11-01T03:17:00.000Z",
        "13556.5",
        "13564.3",
        "13556.5",
        "13560.8",
        "6.81861932"
    ],
    [
        "2020-11-01T03:18:00.000Z",
        "13560.7",
        "13567.1",
        "13554.8",
        "13554.8",
        "21.1052633"
    ],
    [
        "2020-11-01T03:19:00.000Z",
        "13554.7",
        "13554.7",
        "13548.7",
        "13549.9",
        "6.91431955"
    ],
    [
        "2020-11-01T03:20:00.000Z",
        "13550",
        "13550",
        "13549.8",
        "13549.8",
        "37.83554469"
    ],
    [
        "2020-11-01T03:21:00.000Z",
        "13549.8",
        "13549.8",
        "13549.8",
        "13549.8",
        "9.86885792"
    ],
    [
        "2020-11-01T03:22:00.000Z",
        "13549.8",
        "13549.9",
        "13549.8",
        "13549.9",
        "44.90425081"
    ],
    [
        "2020-11-01T03:23:00.000Z",
        "13550.1",
        "13552",
        "13550.1",
        "13550.7",
        "105.40215765"
    ],
    [
        "2020-11-01T03:24:00.000Z",
        "13549.9",
        "13550",
        "13549.8",
        "13549.8",
        "45.0259545"
    ],
    [
        "2020-11-01T03:25:00.000Z",
        "13549.8",
        "13550.6",
        "13549.8",
        "13550.6",
        "3.06566565"
    ],
    [
        "2020-11-01T03:26:00.000Z",
        "13550.6",
        "13561.2",
        "13550.6",
        "13561.2",
        "6.85002162"
    ],
    [
        "2020-11-01T03:27:00.000Z",
        "13561.2",
        "13561.2",
        "13549.8",
        "13549.8",
        "6.37403528"
    ],
    [
        "2020-11-01T03:28:00.000Z",
        "13550.9",
        "13550.9",
        "13549.8",
        "13549.8",
        "0.07223061"
    ],
    [
        "2020-11-01T03:29:00.000Z",
        "13549.8",
        "13549.8",
        "13533.9",
        "13534.8",
        "10.80892555"
    ],
    [
        "2020-11-01T03:30:00.000Z",
        "13534.8",
        "13544.3",
        "13524.5",
        "13544.3",
        "11.13433222"
    ],
    [
        "2020-11-01T03:31:00.000Z",
        "13546.9",
        "13547.4",
        "13533.1",
        "13544.7",
        "6.55112777"
    ],
    [
        "2020-11-01T03:32:00.000Z",
        "13544.8",
        "13544.8",
        "13538.4",
        "13540.4",
        "7.25145254"
    ],
    [
        "2020-11-01T03:33:00.000Z",
        "13540.3",
        "13551.5",
        "13540.3",
        "13542.1",
        "1.77611641"
    ],
    [
        "2020-11-01T03:34:00.000Z",
        "13543.3",
        "13546.9",
        "13543.3",
        "13546.9",
        "13.78117296"
    ],
    [
        "2020-11-01T03:35:00.000Z",
        "13546.8",
        "13553.9",
        "13546.8",
        "13552.2",
        "0.71916279"
    ],
    [
        "2020-11-01T03:36:00.000Z",
        "13553.3",
        "13554.5",
        "13552.3",
        "13554.5",
        "9.99565046"
    ],
    [
        "2020-11-01T03:37:00.000Z",
        "13555.1",
        "13562.1",
        "13555",
        "13557.9",
        "5.89255235"
    ],
    [
        "2020-11-01T03:38:00.000Z",
        "13559.2",
        "13563.1",
        "13559.2",
        "13561.7",
        "0.17651931"
    ],
    [
        "2020-11-01T03:39:00.000Z",
        "13561",
        "13561.7",
        "13557.8",
        "13558.3",
        "9.14211224"
    ],
    [
        "2020-11-01T03:40:00.000Z",
        "13558.9",
        "13559.7",
        "13554.9",
        "13554.9",
        "5.77695212"
    ],
    [
        "2020-11-01T03:41:00.000Z",
        "13550.9",
        "13552.8",
        "13547.6",
        "13550",
        "13.42267336"
    ],
    [
        "2020-11-01T03:42:00.000Z",
        "13548.7",
        "13548.7",
        "13543.8",
        "13545.1",
        "0.12050888"
    ],
    [
        "2020-11-01T03:43:00.000Z",
        "13545.1",
        "13545.2",
        "13545.1",
        "13545.2",
        "3.10458708"
    ],
    [
        "2020-11-01T03:44:00.000Z",
        "13545.8",
        "13545.8",
        "13530.1",
        "13534.5",
        "5.61635515"
    ],
    [
        "2020-11-01T03:45:00.000Z",
        "13534.4",
        "13534.4",
        "13524.4",
        "13525",
        "10.67626562"
    ],
    [
        "2020-11-01T03:46:00.000Z",
        "13525",
        "13525",
        "13515",
        "13515",
        "20.48692853"
    ],
    [
        "2020-11-01T03:47:00.000Z",
        "13514.5",
        "13519.2",
        "13500",
        "13509.4",
        "23.00210803"
    ],
    [
        "2020-11-01T03:48:00.000Z",
        "13511.1",
        "13516.5",
        "13508",
        "13516.5",
        "5.38595301"
    ],
    [
        "2020-11-01T03:49:00.000Z",
        "13519",
        "13524.2",
        "13516.8",
        "13523.7",
        "4.9681369"
    ],
    [
        "2020-11-01T03:50:00.000Z",
        "13523.9",
        "13538.6",
        "13523.9",
        "13537.4",
        "6.24242393"
    ],
    [
        "2020-11-01T03:51:00.000Z",
        "13536.3",
        "13551.5",
        "13536.2",
        "13549.4",
        "8.16861275"
    ],
    [
        "2020-11-01T03:52:00.000Z",
        "13550.2",
        "13556.1",
        "13549.4",
        "13556.1",
        "16.07597132"
    ],
    [
        "2020-11-01T03:53:00.000Z",
        "13556",
        "13556",
        "13549.7",
        "13553.3",
        "0.79216293"
    ],
    [
        "2020-11-01T03:54:00.000Z",
        "13552.1",
        "13552.6",
        "13544.4",
        "13552.5",
        "4.8014756"
    ],
    [
        "2020-11-01T03:55:00.000Z",
        "13552.5",
        "13562.3",
        "13552.5",
        "13560.8",
        "4.64025631"
    ],
    [
        "2020-11-01T03:56:00.000Z",
        "13562.1",
        "13562.1",
        "13561.5",
        "13562",
        "4.54010559"
    ],
    [
        "2020-11-01T03:57:00.000Z",
        "13559.6",
        "13560.4",
        "13559.6",
        "13560.3",
        "24.60735238"
    ],
    [
        "2020-11-01T03:58:00.000Z",
        "13560.3",
        "13560.3",
        "13549.2",
        "13557.1",
        "7.23981397"
    ],
    [
        "2020-11-01T03:59:00.000Z",
        "13556",
        "13556",
        "13548",
        "13548",
        "5.23788798"
    ],
    [
        "2020-11-01T04:00:00.000Z",
        "13548.1",
        "13556.1",
        "13542",
        "13554.7",
        "4.79536013"
    ],
    [
        "2020-11-01T04:01:00.000Z",
        "13554.7",
        "13558",
        "13550.2",
        "13551.5",
        "5.16509255"
    ],
    [
        "2020-11-01T04:02:00.000Z",
        "13551.9",
        "13555.8",
        "13551.8",
        "13555.8",
        "127.49140881"
    ],
    [
        "2020-11-01T04:03:00.000Z",
        "13555.8",
        "13557.2",
        "13555.8",
        "13557.2",
        "5.0647929"
    ],
    [
        "2020-11-01T04:04:00.000Z",
        "13557.2",
        "13557.2",
        "13554.3",
        "13554.3",
        "6.25755132"
    ],
    [
        "2020-11-01T04:05:00.000Z",
        "13552.4",
        "13552.4",
        "13529.8",
        "13529.8",
        "47.88442618"
    ],
    [
        "2020-11-01T04:06:00.000Z",
        "13533.5",
        "13547.3",
        "13529",
        "13544.1",
        "2.45732884"
    ],
    [
        "2020-11-01T04:07:00.000Z",
        "13543.6",
        "13543.6",
        "13527.1",
        "13534.5",
        "1.1433667"
    ],
    [
        "2020-11-01T04:08:00.000Z",
        "13533.3",
        "13533.3",
        "13518.5",
        "13518.5",
        "3.32533866"
    ],
    [
        "2020-11-01T04:09:00.000Z",
        "13518.4",
        "13520.3",
        "13516.2",
        "13516.2",
        "14.5594266"
    ],
    [
        "2020-11-01T04:10:00.000Z",
        "13516.2",
        "13516.2",
        "13506.7",
        "13513.2",
        "14.57238202"
    ],
    [
        "2020-11-01T04:11:00.000Z",
        "13513",
        "13513.6",
        "13500",
        "13500",
        "8.84827419"
    ],
    [
        "2020-11-01T04:12:00.000Z",
        "13502.3",
        "13526.3",
        "13500.8",
        "13526.3",
        "2.37657358"
    ],
    [
        "2020-11-01T04:13:00.000Z",
        "13527.6",
        "13527.6",
        "13519.2",
        "13519.6",
        "4.86366481"
    ],
    [
        "2020-11-01T04:14:00.000Z",
        "13520",
        "13525.5",
        "13508",
        "13514.6",
        "3.62127229"
    ],
    [
        "2020-11-01T04:15:00.000Z",
        "13514.7",
        "13518.5",
        "13500",
        "13501.7",
        "4.18216724"
    ],
    [
        "2020-11-01T04:16:00.000Z",
        "13500.7",
        "13500.7",
        "13486.1",
        "13497.5",
        "32.09170632"
    ],
    [
        "2020-11-01T04:17:00.000Z",
        "13497.4",
        "13497.4",
        "13471.2",
        "13489.9",
        "56.33055863"
    ],
    [
        "2020-11-01T04:18:00.000Z",
        "13489.2",
        "13496.6",
        "13486.7",
        "13496",
        "8.35210271"
    ],
    [
        "2020-11-01T04:19:00.000Z",
        "13495.9",
        "13496",
        "13485.7",
        "13492.7",
        "5.34757054"
    ],
    [
        "2020-11-01T04:20:00.000Z",
        "13490.3",
        "13495.4",
        "13488.1",
        "13495.3",
        "16.45192802"
    ],
    [
        "2020-11-01T04:21:00.000Z",
        "13495.3",
        "13495.4",
        "13490.3",
        "13490.3",
        "12.41949595"
    ],
    [
        "2020-11-01T04:22:00.000Z",
        "13490.3",
        "13493",
        "13488.5",
        "13493",
        "12.75685917"
    ],
    [
        "2020-11-01T04:23:00.000Z",
        "13492.9",
        "13493",
        "13485",
        "13485",
        "5.07187387"
    ],
    [
        "2020-11-01T04:24:00.000Z",
        "13484.5",
        "13493",
        "13484.5",
        "13493",
        "1.26936079"
    ],
    [
        "2020-11-01T04:25:00.000Z",
        "13492.9",
        "13499.1",
        "13492.9",
        "13498.9",
        "13.42949761"
    ],
    [
        "2020-11-01T04:26:00.000Z",
        "13497.9",
        "13497.9",
        "13485.4",
        "13485.6",
        "5.37140139"
    ],
    [
        "2020-11-01T04:27:00.000Z",
        "13485.1",
        "13486",
        "13485.1",
        "13485.9",
        "139.56499827"
    ],
    [
        "2020-11-01T04:28:00.000Z",
        "13485.9",
        "13486",
        "13484.5",
        "13484.5",
        "20.76036148"
    ],
    [
        "2020-11-01T04:29:00.000Z",
        "13484.5",
        "13496.4",
        "13484.2",
        "13492.7",
        "1.90234426"
    ],
    [
        "2020-11-01T04:30:00.000Z",
        "13491.5",
        "13491.5",
        "13487.9",
        "13488.5",
        "1.26761903"
    ],
    [
        "2020-11-01T04:31:00.000Z",
        "13487.9",
        "13499.2",
        "13487.9",
        "13494.9",
        "24.6705659"
    ],
    [
        "2020-11-01T04:32:00.000Z",
        "13494.9",
        "13499.6",
        "13484.5",
        "13490",
        "1.3800912"
    ],
    [
        "2020-11-01T04:33:00.000Z",
        "13489.8",
        "13491",
        "13489.8",
        "13491",
        "2.29210355"
    ],
    [
        "2020-11-01T04:34:00.000Z",
        "13491",
        "13491",
        "13489.8",
        "13489.8",
        "0.02394481"
    ],
    [
        "2020-11-01T04:35:00.000Z",
        "13489.8",
        "13489.8",
        "13488.8",
        "13489",
        "1.96754126"
    ],
    [
        "2020-11-01T04:36:00.000Z",
        "13489",
        "13489",
        "13488.8",
        "13489",
        "1.11756831"
    ],
    [
        "2020-11-01T04:37:00.000Z",
        "13489",
        "13489",
        "13488.9",
        "13488.9",
        "0.33423282"
    ],
    [
        "2020-11-01T04:38:00.000Z",
        "13489",
        "13489",
        "13483.5",
        "13483.5",
        "4.38063736"
    ],
    [
        "2020-11-01T04:39:00.000Z",
        "13483.5",
        "13487.4",
        "13480",
        "13486.4",
        "0.84491883"
    ],
    [
        "2020-11-01T04:40:00.000Z",
        "13486.4",
        "13486.4",
        "13486.3",
        "13486.4",
        "1.52321852"
    ],
    [
        "2020-11-01T04:41:00.000Z",
        "13486.7",
        "13489",
        "13486.7",
        "13489",
        "0.72854088"
    ],
    [
        "2020-11-01T04:42:00.000Z",
        "13488.9",
        "13489",
        "13488.9",
        "13488.9",
        "18.21943764"
    ],
    [
        "2020-11-01T04:43:00.000Z",
        "13488.9",
        "13494.4",
        "13488.9",
        "13488.9",
        "24.39456527"
    ],
    [
        "2020-11-01T04:44:00.000Z",
        "13488.9",
        "13494.4",
        "13488.9",
        "13490.2",
        "25.8922697"
    ],
    [
        "2020-11-01T04:45:00.000Z",
        "13490.4",
        "13491.2",
        "13488.1",
        "13491.2",
        "0.35826135"
    ],
    [
        "2020-11-01T04:46:00.000Z",
        "13491.8",
        "13492.9",
        "13491.7",
        "13492.9",
        "0.12855475"
    ],
    [
        "2020-11-01T04:47:00.000Z",
        "13493.3",
        "13493.3",
        "13493.2",
        "13493.3",
        "0.52155092"
    ],
    [
        "2020-11-01T04:48:00.000Z",
        "13493.2",
        "13500",
        "13493.2",
        "13500",
        "1.32352064"
    ],
    [
        "2020-11-01T04:49:00.000Z",
        "13500",
        "13509.2",
        "13499.9",
        "13508.9",
        "2.39841879"
    ],
    [
        "2020-11-01T04:50:00.000Z",
        "13509.3",
        "13510.5",
        "13500.9",
        "13501.3",
        "7.10645481"
    ],
    [
        "2020-11-01T04:51:00.000Z",
        "13501.3",
        "13501.3",
        "13497.4",
        "13497.4",
        "7.55663324"
    ],
    [
        "2020-11-01T04:52:00.000Z",
        "13497.4",
        "13497.8",
        "13492.8",
        "13492.9",
        "97.62079018"
    ],
    [
        "2020-11-01T04:53:00.000Z",
        "13493.9",
        "13506.5",
        "13493.8",
        "13501.8",
        "11.59343828"
    ],
    [
        "2020-11-01T04:54:00.000Z",
        "13501.8",
        "13501.8",
        "13498.8",
        "13499.6",
        "1.07560251"
    ],
    [
        "2020-11-01T04:55:00.000Z",
        "13499.6",
        "13510.6",
        "13499.6",
        "13510.5",
        "6.59981113"
    ],
    [
        "2020-11-01T04:56:00.000Z",
        "13510.5",
        "13510.6",
        "13510.5",
        "13510.6",
        "6.74077436"
    ],
    [
        "2020-11-01T04:57:00.000Z",
        "13510.6",
        "13510.6",
        "13508.8",
        "13508.9",
        "7.53336848"
    ],
    [
        "2020-11-01T04:58:00.000Z",
        "13508.9",
        "13508.9",
        "13498",
        "13503.2",
        "2.85578965"
    ],
    [
        "2020-11-01T04:59:00.000Z",
        "13502.2",
        "13507.3",
        "13500.6",
        "13507.3",
        "0.1235688"
    ],
    [
        "2020-11-01T05:00:00.000Z",
        "13507.2",
        "13507.2",
        "13503.7",
        "13506.7",
        "9.63032649"
    ],
    [
        "2020-11-01T05:01:00.000Z",
        "13506.7",
        "13506.8",
        "13506.7",
        "13506.7",
        "0.99354614"
    ],
    [
        "2020-11-01T05:02:00.000Z",
        "13505.9",
        "13505.9",
        "13493.9",
        "13495.4",
        "0.65116248"
    ],
    [
        "2020-11-01T05:03:00.000Z",
        "13496.1",
        "13496.1",
        "13485.2",
        "13488.9",
        "9.32342578"
    ],
    [
        "2020-11-01T05:04:00.000Z",
        "13488.9",
        "13490.2",
        "13488.8",
        "13490.2",
        "21.51049533"
    ],
    [
        "2020-11-01T05:05:00.000Z",
        "13490.3",
        "13492.3",
        "13490.2",
        "13492.3",
        "0.81539022"
    ],
    [
        "2020-11-01T05:06:00.000Z",
        "13493",
        "13506.7",
        "13493",
        "13506.7",
        "1.93956865"
    ],
    [
        "2020-11-01T05:07:00.000Z",
        "13506.7",
        "13510.6",
        "13506.7",
        "13510.6",
        "0.47150259"
    ],
    [
        "2020-11-01T05:08:00.000Z",
        "13510.6",
        "13527.1",
        "13510.5",
        "13525.3",
        "0.90485504"
    ],
    [
        "2020-11-01T05:09:00.000Z",
        "13525.3",
        "13540.2",
        "13525.2",
        "13531.9",
        "2.94073909"
    ],
    [
        "2020-11-01T05:10:00.000Z",
        "13531.8",
        "13545.4",
        "13531.8",
        "13545.4",
        "6.48240545"
    ],
    [
        "2020-11-01T05:11:00.000Z",
        "13545.4",
        "13550",
        "13545.3",
        "13550",
        "146.61563932"
    ],
    [
        "2020-11-01T05:12:00.000Z",
        "13550",
        "13550",
        "13544.6",
        "13544.6",
        "52.1035516"
    ],
    [
        "2020-11-01T05:13:00.000Z",
        "13544.3",
        "13544.3",
        "13541.8",
        "13544.2",
        "7.377136"
    ],
    [
        "2020-11-01T05:14:00.000Z",
        "13544.2",
        "13548.3",
        "13543.2",
        "13545.8",
        "1.34294528"
    ],
    [
        "2020-11-01T05:15:00.000Z",
        "13546.3",
        "13546.9",
        "13541.5",
        "13541.5",
        "11.90869097"
    ],
    [
        "2020-11-01T05:16:00.000Z",
        "13541.5",
        "13541.5",
        "13534.7",
        "13534.8",
        "5.94742414"
    ],
    [
        "2020-11-01T05:17:00.000Z",
        "13534.7",
        "13538.1",
        "13534.2",
        "13538.1",
        "5.95088685"
    ],
    [
        "2020-11-01T05:18:00.000Z",
        "13537.2",
        "13538.5",
        "13537.2",
        "13538.5",
        "0.86985756"
    ],
    [
        "2020-11-01T05:19:00.000Z",
        "13538.6",
        "13544.9",
        "13538.6",
        "13544.9",
        "12.3529487"
    ],
    [
        "2020-11-01T05:20:00.000Z",
        "13544.9",
        "13554.1",
        "13544.9",
        "13554.1",
        "16.03353067"
    ],
    [
        "2020-11-01T05:21:00.000Z",
        "13554.1",
        "13554.1",
        "13548.2",
        "13551.1",
        "9.62287229"
    ],
    [
        "2020-11-01T05:22:00.000Z",
        "13551.2",
        "13551.9",
        "13540.9",
        "13540.9",
        "7.69153696"
    ],
    [
        "2020-11-01T05:23:00.000Z",
        "13541",
        "13544.2",
        "13540",
        "13540",
        "0.86889235"
    ],
    [
        "2020-11-01T05:24:00.000Z",
        "13540",
        "13540.8",
        "13535.1",
        "13535.7",
        "12.31223798"
    ],
    [
        "2020-11-01T05:25:00.000Z",
        "13535.8",
        "13536.5",
        "13535.7",
        "13536.4",
        "0.87145419"
    ],
    [
        "2020-11-01T05:26:00.000Z",
        "13536.5",
        "13548.3",
        "13536.5",
        "13548.2",
        "7.78201498"
    ],
    [
        "2020-11-01T05:27:00.000Z",
        "13548.2",
        "13550.6",
        "13546.3",
        "13550.6",
        "5.12673539"
    ],
    [
        "2020-11-01T05:28:00.000Z",
        "13550.5",
        "13556.3",
        "13550.5",
        "13556.3",
        "0.96548015"
    ],
    [
        "2020-11-01T05:29:00.000Z",
        "13556.4",
        "13572",
        "13556.4",
        "13570.2",
        "71.86450166"
    ],
    [
        "2020-11-01T05:30:00.000Z",
        "13570.1",
        "13580.2",
        "13565.8",
        "13579.3",
        "11.40317178"
    ],
    [
        "2020-11-01T05:31:00.000Z",
        "13579.3",
        "13580.2",
        "13565.1",
        "13566",
        "11.02300964"
    ],
    [
        "2020-11-01T05:32:00.000Z",
        "13566.8",
        "13566.8",
        "13548.3",
        "13556.4",
        "6.56421243"
    ],
    [
        "2020-11-01T05:33:00.000Z",
        "13555.5",
        "13555.5",
        "13540",
        "13553.7",
        "1.73474406"
    ],
    [
        "2020-11-01T05:34:00.000Z",
        "13555.6",
        "13556.3",
        "13540.7",
        "13543.6",
        "2.18436342"
    ],
    [
        "2020-11-01T05:35:00.000Z",
        "13542.8",
        "13551",
        "13542.8",
        "13549",
        "11.0858033"
    ],
    [
        "2020-11-01T05:36:00.000Z",
        "13549.1",
        "13549.1",
        "13547.6",
        "13548.2",
        "32.56762852"
    ],
    [
        "2020-11-01T05:37:00.000Z",
        "13547.7",
        "13547.7",
        "13542.2",
        "13542.3",
        "4.22220464"
    ],
    [
        "2020-11-01T05:38:00.000Z",
        "13543.6",
        "13546",
        "13543.6",
        "13545.5",
        "3.44190859"
    ],
    [
        "2020-11-01T05:39:00.000Z",
        "13545.6",
        "13545.6",
        "13543.3",
        "13543.3",
        "0.79277221"
    ],
    [
        "2020-11-01T05:40:00.000Z",
        "13543.2",
        "13543.8",
        "13542.2",
        "13543.8",
        "0.41446041"
    ],
    [
        "2020-11-01T05:41:00.000Z",
        "13543.8",
        "13549.6",
        "13543.8",
        "13548.5",
        "1.3337648"
    ],
    [
        "2020-11-01T05:42:00.000Z",
        "13546.6",
        "13546.7",
        "13542.9",
        "13542.9",
        "0.22278206"
    ],
    [
        "2020-11-01T05:43:00.000Z",
        "13543",
        "13543.6",
        "13542.9",
        "13543",
        "0.07456482"
    ],
    [
        "2020-11-01T05:44:00.000Z",
        "13542.9",
        "13544.4",
        "13542.6",
        "13544.4",
        "7.41443071"
    ],
    [
        "2020-11-01T05:45:00.000Z",
        "13544.4",
        "13546.1",
        "13544.4",
        "13546.1",
        "1.04957833"
    ],
    [
        "2020-11-01T05:46:00.000Z",
        "13546.1",
        "13546.5",
        "13546.1",
        "13546.5",
        "0.02036732"
    ],
    [
        "2020-11-01T05:47:00.000Z",
        "13547.6",
        "13547.6",
        "13535.2",
        "13535.3",
        "5.09967051"
    ],
    [
        "2020-11-01T05:48:00.000Z",
        "13535.3",
        "13539.2",
        "13533.7",
        "13536.5",
        "5.85366298"
    ],
    [
        "2020-11-01T05:49:00.000Z",
        "13534.1",
        "13534.6",
        "13523",
        "13531.3",
        "10.63087302"
    ],
    [
        "2020-11-01T05:50:00.000Z",
        "13531.2",
        "13531.2",
        "13529.5",
        "13529.8",
        "0.06310972"
    ],
    [
        "2020-11-01T05:51:00.000Z",
        "13529.8",
        "13529.8",
        "13523",
        "13523",
        "36.69843918"
    ],
    [
        "2020-11-01T05:52:00.000Z",
        "13522.8",
        "13522.9",
        "13510.6",
        "13515.3",
        "9.87205906"
    ],
    [
        "2020-11-01T05:53:00.000Z",
        "13515.2",
        "13521.5",
        "13511.2",
        "13520.2",
        "7.48553126"
    ],
    [
        "2020-11-01T05:54:00.000Z",
        "13520.2",
        "13529.8",
        "13520.2",
        "13527.1",
        "3.78322109"
    ],
    [
        "2020-11-01T05:55:00.000Z",
        "13527.4",
        "13530",
        "13527.4",
        "13530",
        "0.14180159"
    ],
    [
        "2020-11-01T05:56:00.000Z",
        "13529.9",
        "13529.9",
        "13522.1",
        "13525.2",
        "8.08407658"
    ],
    [
        "2020-11-01T05:57:00.000Z",
        "13525.2",
        "13525.2",
        "13514.8",
        "13518",
        "33.00448455"
    ],
    [
        "2020-11-01T05:58:00.000Z",
        "13518",
        "13519.8",
        "13517.3",
        "13517.4",
        "1.70354559"
    ],
    [
        "2020-11-01T05:59:00.000Z",
        "13518.1",
        "13519.8",
        "13513",
        "13516.8",
        "1.41018505"
    ],
    [
        "2020-11-01T06:00:00.000Z",
        "13516.9",
        "13528.9",
        "13513.6",
        "13528.9",
        "177.37074484"
    ],
    [
        "2020-11-01T06:01:00.000Z",
        "13528.9",
        "13541.6",
        "13528.9",
        "13541.6",
        "2.59701898"
    ],
    [
        "2020-11-01T06:02:00.000Z",
        "13541.5",
        "13550.6",
        "13541.5",
        "13545.3",
        "5.96017081"
    ],
    [
        "2020-11-01T06:03:00.000Z",
        "13545.3",
        "13548.4",
        "13543.9",
        "13543.9",
        "0.80027346"
    ],
    [
        "2020-11-01T06:04:00.000Z",
        "13542.6",
        "13542.6",
        "13512.1",
        "13522.9",
        "15.36215881"
    ],
    [
        "2020-11-01T06:05:00.000Z",
        "13522.9",
        "13522.9",
        "13513.3",
        "13519.2",
        "1.5402519"
    ],
    [
        "2020-11-01T06:06:00.000Z",
        "13519.3",
        "13537.1",
        "13519.3",
        "13534.5",
        "2.91426734"
    ],
    [
        "2020-11-01T06:07:00.000Z",
        "13532.3",
        "13532.7",
        "13518",
        "13520.9",
        "6.26347294"
    ],
    [
        "2020-11-01T06:08:00.000Z",
        "13520.8",
        "13520.8",
        "13511.4",
        "13512.2",
        "1.38732087"
    ],
    [
        "2020-11-01T06:09:00.000Z",
        "13513",
        "13516",
        "13511.9",
        "13512.7",
        "6.46614251"
    ],
    [
        "2020-11-01T06:10:00.000Z",
        "13513.5",
        "13523.6",
        "13513.3",
        "13513.3",
        "6.0627598"
    ],
    [
        "2020-11-01T06:11:00.000Z",
        "13513.3",
        "13528.8",
        "13513.3",
        "13517.8",
        "1.31961035"
    ],
    [
        "2020-11-01T06:12:00.000Z",
        "13517.9",
        "13527",
        "13515",
        "13516.5",
        "25.46186219"
    ],
    [
        "2020-11-01T06:13:00.000Z",
        "13516.5",
        "13523.7",
        "13511.6",
        "13516.8",
        "9.33880567"
    ],
    [
        "2020-11-01T06:14:00.000Z",
        "13516.8",
        "13517.5",
        "13512.3",
        "13517.3",
        "7.84207466"
    ],
    [
        "2020-11-01T06:15:00.000Z",
        "13517.3",
        "13531.3",
        "13517.3",
        "13531.2",
        "1.0662749"
    ],
    [
        "2020-11-01T06:16:00.000Z",
        "13531.2",
        "13531.2",
        "13520.8",
        "13522",
        "26.7183633"
    ],
    [
        "2020-11-01T06:17:00.000Z",
        "13522",
        "13522",
        "13513.8",
        "13513.8",
        "17.83931601"
    ],
    [
        "2020-11-01T06:18:00.000Z",
        "13511.7",
        "13511.7",
        "13505",
        "13505",
        "12.74653476"
    ],
    [
        "2020-11-01T06:19:00.000Z",
        "13505",
        "13505.1",
        "13500",
        "13500.1",
        "2.33701327"
    ],
    [
        "2020-11-01T06:20:00.000Z",
        "13501.7",
        "13510.2",
        "13501.7",
        "13510.1",
        "46.72600134"
    ],
    [
        "2020-11-01T06:21:00.000Z",
        "13510.2",
        "13523.6",
        "13510.2",
        "13512.2",
        "28.91496066"
    ],
    [
        "2020-11-01T06:22:00.000Z",
        "13511.5",
        "13514",
        "13509.1",
        "13514",
        "10.07546481"
    ],
    [
        "2020-11-01T06:23:00.000Z",
        "13514.4",
        "13517.2",
        "13504.1",
        "13506.9",
        "84.19297346"
    ],
    [
        "2020-11-01T06:24:00.000Z",
        "13507.6",
        "13515.3",
        "13507.6",
        "13512.8",
        "7.68805167"
    ],
    [
        "2020-11-01T06:25:00.000Z",
        "13512.8",
        "13518",
        "13512.2",
        "13516.3",
        "66.39705786"
    ],
    [
        "2020-11-01T06:26:00.000Z",
        "13516.3",
        "13519.5",
        "13514.8",
        "13519.5",
        "31.73380914"
    ],
    [
        "2020-11-01T06:27:00.000Z",
        "13519.5",
        "13524.4",
        "13519.4",
        "13524.4",
        "0.21338226"
    ],
    [
        "2020-11-01T06:28:00.000Z",
        "13526.4",
        "13526.4",
        "13518",
        "13522.7",
        "5.3521669"
    ],
    [
        "2020-11-01T06:29:00.000Z",
        "13523.7",
        "13527.4",
        "13523.7",
        "13527.4",
        "15.05605022"
    ],
    [
        "2020-11-01T06:30:00.000Z",
        "13528.1",
        "13528.2",
        "13518.5",
        "13518.5",
        "4.52873298"
    ],
    [
        "2020-11-01T06:31:00.000Z",
        "13518.1",
        "13521.2",
        "13516.3",
        "13521.2",
        "24.73604536"
    ],
    [
        "2020-11-01T06:32:00.000Z",
        "13521.1",
        "13521.2",
        "13515.6",
        "13519.4",
        "138.73839922"
    ],
    [
        "2020-11-01T06:33:00.000Z",
        "13518.8",
        "13518.8",
        "13516.8",
        "13517.1",
        "0.17553207"
    ],
    [
        "2020-11-01T06:34:00.000Z",
        "13517.1",
        "13520.8",
        "13517.1",
        "13520.8",
        "0.43281605"
    ],
    [
        "2020-11-01T06:35:00.000Z",
        "13520.8",
        "13533.2",
        "13520.8",
        "13533.2",
        "0.38898352"
    ],
    [
        "2020-11-01T06:36:00.000Z",
        "13533.2",
        "13542.5",
        "13533.2",
        "13542.5",
        "2.51630946"
    ],
    [
        "2020-11-01T06:37:00.000Z",
        "13542.6",
        "13558.9",
        "13533.7",
        "13544.4",
        "5.11348442"
    ],
    [
        "2020-11-01T06:38:00.000Z",
        "13544.4",
        "13550.1",
        "13544.4",
        "13549.5",
        "1.46277583"
    ],
    [
        "2020-11-01T06:39:00.000Z",
        "13550.2",
        "13551.9",
        "13547.2",
        "13550.7",
        "8.93827585"
    ],
    [
        "2020-11-01T06:40:00.000Z",
        "13550.6",
        "13550.7",
        "13547.3",
        "13547.4",
        "5.55021729"
    ],
    [
        "2020-11-01T06:41:00.000Z",
        "13547.3",
        "13547.4",
        "13542.5",
        "13542.6",
        "6.62162709"
    ],
    [
        "2020-11-01T06:42:00.000Z",
        "13542.5",
        "13543.3",
        "13542.1",
        "13542.1",
        "0.02858807"
    ],
    [
        "2020-11-01T06:43:00.000Z",
        "13541.7",
        "13541.7",
        "13538.7",
        "13538.8",
        "5.33521411"
    ],
    [
        "2020-11-01T06:44:00.000Z",
        "13538.9",
        "13548.9",
        "13538.9",
        "13546.8",
        "2.23067761"
    ],
    [
        "2020-11-01T06:45:00.000Z",
        "13544.8",
        "13555",
        "13544.8",
        "13555",
        "6.49044933"
    ],
    [
        "2020-11-01T06:46:00.000Z",
        "13554.9",
        "13555",
        "13553.7",
        "13555",
        "4.40002239"
    ],
    [
        "2020-11-01T06:47:00.000Z",
        "13554.9",
        "13557",
        "13554.9",
        "13557",
        "3.69463128"
    ],
    [
        "2020-11-01T06:48:00.000Z",
        "13557.2",
        "13557.2",
        "13550.3",
        "13550.3",
        "10.11112532"
    ],
    [
        "2020-11-01T06:49:00.000Z",
        "13550.2",
        "13550.2",
        "13541.3",
        "13548.1",
        "71.42027149"
    ],
    [
        "2020-11-01T06:50:00.000Z",
        "13548.1",
        "13548.9",
        "13541.9",
        "13548.9",
        "13.81213983"
    ],
    [
        "2020-11-01T06:51:00.000Z",
        "13548.8",
        "13548.8",
        "13538.9",
        "13541.6",
        "12.84009801"
    ],
    [
        "2020-11-01T06:52:00.000Z",
        "13542.8",
        "13548.2",
        "13542.8",
        "13545.6",
        "18.68835315"
    ],
    [
        "2020-11-01T06:53:00.000Z",
        "13545.6",
        "13547",
        "13545.1",
        "13547",
        "63.34772805"
    ],
    [
        "2020-11-01T06:54:00.000Z",
        "13547",
        "13550",
        "13547",
        "13548.3",
        "17.91469629"
    ],
    [
        "2020-11-01T06:55:00.000Z",
        "13548.4",
        "13548.4",
        "13540",
        "13540",
        "14.89235176"
    ],
    [
        "2020-11-01T06:56:00.000Z",
        "13540",
        "13540",
        "13531.3",
        "13531.3",
        "7.09764883"
    ],
    [
        "2020-11-01T06:57:00.000Z",
        "13531.4",
        "13531.4",
        "13527.9",
        "13531.3",
        "12.20791032"
    ],
    [
        "2020-11-01T06:58:00.000Z",
        "13532",
        "13532",
        "13524.2",
        "13524.2",
        "1.67256705"
    ],
    [
        "2020-11-01T06:59:00.000Z",
        "13524.5",
        "13527.3",
        "13524.1",
        "13527.3",
        "24.19725301"
    ],
    [
        "2020-11-01T07:00:00.000Z",
        "13527.3",
        "13530.8",
        "13522.9",
        "13530.8",
        "7.54268823"
    ],
    [
        "2020-11-01T07:01:00.000Z",
        "13530.8",
        "13537.4",
        "13530.8",
        "13537.4",
        "2.0447725"
    ],
    [
        "2020-11-01T07:02:00.000Z",
        "13537.4",
        "13548.5",
        "13537.4",
        "13541.4",
        "73.69754733"
    ],
    [
        "2020-11-01T07:03:00.000Z",
        "13542.2",
        "13556.2",
        "13542.2",
        "13556.2",
        "0.70486721"
    ],
    [
        "2020-11-01T07:04:00.000Z",
        "13556.1",
        "13556.1",
        "13550.3",
        "13554.7",
        "5.21070129"
    ],
    [
        "2020-11-01T07:05:00.000Z",
        "13554.7",
        "13554.7",
        "13543.5",
        "13543.6",
        "18.59726246"
    ],
    [
        "2020-11-01T07:06:00.000Z",
        "13543.5",
        "13551.2",
        "13541.2",
        "13550.2",
        "4.14838565"
    ],
    [
        "2020-11-01T07:07:00.000Z",
        "13550.7",
        "13555",
        "13550.5",
        "13554.9",
        "15.13480867"
    ],
    [
        "2020-11-01T07:08:00.000Z",
        "13554.9",
        "13555",
        "13554.9",
        "13555",
        "1.83356583"
    ],
    [
        "2020-11-01T07:09:00.000Z",
        "13555",
        "13561.8",
        "13554.9",
        "13561.7",
        "2.1108558"
    ],
    [
        "2020-11-01T07:10:00.000Z",
        "13561.7",
        "13567.9",
        "13561.7",
        "13567.9",
        "3.62198106"
    ],
    [
        "2020-11-01T07:11:00.000Z",
        "13567.7",
        "13570.5",
        "13558.7",
        "13567.7",
        "2.65525192"
    ],
    [
        "2020-11-01T07:12:00.000Z",
        "13567.6",
        "13568.4",
        "13554.5",
        "13559.1",
        "6.29842337"
    ],
    [
        "2020-11-01T07:13:00.000Z",
        "13559.5",
        "13565.8",
        "13555.2",
        "13555.2",
        "12.03560514"
    ],
    [
        "2020-11-01T07:14:00.000Z",
        "13555.9",
        "13557.7",
        "13548.1",
        "13549.4",
        "20.457488"
    ],
    [
        "2020-11-01T07:15:00.000Z",
        "13549.3",
        "13550",
        "13541.6",
        "13549.1",
        "4.7306293"
    ],
    [
        "2020-11-01T07:16:00.000Z",
        "13548.8",
        "13555.1",
        "13548.8",
        "13555.1",
        "0.54438378"
    ],
    [
        "2020-11-01T07:17:00.000Z",
        "13554.3",
        "13559.8",
        "13554.3",
        "13559.7",
        "3.2804641"
    ],
    [
        "2020-11-01T07:18:00.000Z",
        "13559.8",
        "13564.4",
        "13559.6",
        "13564.3",
        "0.23124514"
    ],
    [
        "2020-11-01T07:19:00.000Z",
        "13563.8",
        "13563.9",
        "13555.1",
        "13557.5",
        "4.26693292"
    ],
    [
        "2020-11-01T07:20:00.000Z",
        "13558.4",
        "13560.3",
        "13555",
        "13555",
        "38.22705789"
    ],
    [
        "2020-11-01T07:21:00.000Z",
        "13555",
        "13555.1",
        "13552.3",
        "13554.8",
        "21.47172917"
    ],
    [
        "2020-11-01T07:22:00.000Z",
        "13554.3",
        "13558.8",
        "13554.3",
        "13558.8",
        "0.16570972"
    ],
    [
        "2020-11-01T07:23:00.000Z",
        "13558.8",
        "13558.8",
        "13555.7",
        "13555.7",
        "3.80495321"
    ],
    [
        "2020-11-01T07:24:00.000Z",
        "13555.7",
        "13555.7",
        "13550",
        "13550",
        "1.2274394"
    ],
    [
        "2020-11-01T07:25:00.000Z",
        "13550",
        "13554",
        "13549.9",
        "13553.5",
        "65.06275114"
    ],
    [
        "2020-11-01T07:26:00.000Z",
        "13551.1",
        "13551.2",
        "13544.7",
        "13544.8",
        "59.70496081"
    ],
    [
        "2020-11-01T07:27:00.000Z",
        "13544.7",
        "13544.8",
        "13539.6",
        "13539.6",
        "209.98238629"
    ],
    [
        "2020-11-01T07:28:00.000Z",
        "13539.6",
        "13544.4",
        "13536.9",
        "13544.4",
        "3.07150979"
    ],
    [
        "2020-11-01T07:29:00.000Z",
        "13544.4",
        "13544.4",
        "13538.9",
        "13543.3",
        "33.50084736"
    ],
    [
        "2020-11-01T07:30:00.000Z",
        "13543.2",
        "13543.2",
        "13536.3",
        "13536.4",
        "2.01087305"
    ],
    [
        "2020-11-01T07:31:00.000Z",
        "13536.4",
        "13537.4",
        "13536.3",
        "13537.3",
        "0.199661"
    ],
    [
        "2020-11-01T07:32:00.000Z",
        "13537.5",
        "13543.6",
        "13534.3",
        "13534.3",
        "7.20330834",
        "\uD83D\uDE1B \uD83D\uDE1B \uD83D\uDE1B"
    ],
    [
        "2020-11-01T07:33:00.000Z",
        "13534.4",
        "13534.4",
        "13531.1",
        "13531.1",
        "0.98829886"
    ],
    [
        "2020-11-01T07:34:00.000Z",
        "13531.1",
        "13532.4",
        "13530",
        "13530.1",
        "0.72770765"
    ],
    [
        "2020-11-01T07:35:00.000Z",
        "13530",
        "13533",
        "13530",
        "13531.8",
        "0.34866952"
    ],
    [
        "2020-11-01T07:36:00.000Z",
        "13531.8",
        "13550.3",
        "13531.8",
        "13544.3",
        "43.36105732"
    ],
    [
        "2020-11-01T07:37:00.000Z",
        "13542.7",
        "13550",
        "13535.9",
        "13542.9",
        "22.55059626"
    ],
    [
        "2020-11-01T07:38:00.000Z",
        "13542.9",
        "13544.2",
        "13542.9",
        "13544.2",
        "2.49757879"
    ],
    [
        "2020-11-01T07:39:00.000Z",
        "13543.4",
        "13551.6",
        "13534.9",
        "13541.7",
        "3.94384066"
    ],
    [
        "2020-11-01T07:40:00.000Z",
        "13541.6",
        "13541.6",
        "13539.1",
        "13539.1",
        "0.11913409"
    ],
    [
        "2020-11-01T07:41:00.000Z",
        "13538.8",
        "13540.5",
        "13538.8",
        "13540.5",
        "5.41361842"
    ],
    [
        "2020-11-01T07:42:00.000Z",
        "13540.5",
        "13551.2",
        "13540.5",
        "13551.2",
        "22.67402693"
    ],
    [
        "2020-11-01T07:43:00.000Z",
        "13551.2",
        "13551.6",
        "13551.1",
        "13551.6",
        "13.21301714"
    ],
    [
        "2020-11-01T07:44:00.000Z",
        "13551.6",
        "13551.9",
        "13551.6",
        "13551.9",
        "2.15789209"
    ],
    [
        "2020-11-01T07:45:00.000Z",
        "13551.8",
        "13562.4",
        "13551.8",
        "13559.9",
        "15.50495824"
    ],
    [
        "2020-11-01T07:46:00.000Z",
        "13559.9",
        "13564.7",
        "13559.9",
        "13564.7",
        "18.5820863"
    ],
    [
        "2020-11-01T07:47:00.000Z",
        "13564.7",
        "13577.4",
        "13562.9",
        "13577.3",
        "10.558999"
    ],
    [
        "2020-11-01T07:48:00.000Z",
        "13577.4",
        "13600",
        "13577.4",
        "13585.9",
        "4.85432932"
    ],
    [
        "2020-11-01T07:49:00.000Z",
        "13586",
        "13597.1",
        "13586",
        "13595.7",
        "18.32611752"
    ],
    [
        "2020-11-01T07:50:00.000Z",
        "13594.5",
        "13600",
        "13593.8",
        "13600",
        "42.7989254"
    ],
    [
        "2020-11-01T07:51:00.000Z",
        "13600",
        "13611.5",
        "13583.6",
        "13599",
        "55.09475109"
    ],
    [
        "2020-11-01T07:52:00.000Z",
        "13599.9",
        "13615",
        "13599.9",
        "13611.2",
        "8.36681538"
    ],
    [
        "2020-11-01T07:53:00.000Z",
        "13611.1",
        "13611.2",
        "13606.7",
        "13609.2",
        "9.79359225"
    ],
    [
        "2020-11-01T07:54:00.000Z",
        "13610",
        "13627.2",
        "13608.7",
        "13620.6",
        "26.40282386"
    ],
    [
        "2020-11-01T07:55:00.000Z",
        "13620.8",
        "13630.1",
        "13620.7",
        "13627.1",
        "14.73143449"
    ],
    [
        "2020-11-01T07:56:00.000Z",
        "13627",
        "13630.1",
        "13621.4",
        "13621.4",
        "45.71705173"
    ],
    [
        "2020-11-01T07:57:00.000Z",
        "13625.9",
        "13628",
        "13625.9",
        "13626",
        "36.14698415"
    ],
    [
        "2020-11-01T07:58:00.000Z",
        "13626",
        "13626",
        "13608.5",
        "13615.4",
        "9.68644549"
    ],
    [
        "2020-11-01T07:59:00.000Z",
        "13615.5",
        "13629.2",
        "13615.5",
        "13629.2",
        "4.50677234"
    ],
    [
        "2020-11-01T08:00:00.000Z",
        "13629.2",
        "13637.8",
        "13629.2",
        "13637.8",
        "5.61992226"
    ],
    [
        "2020-11-01T08:01:00.000Z",
        "13634.2",
        "13639.3",
        "13627",
        "13631",
        "4.86472172"
    ],
    [
        "2020-11-01T08:02:00.000Z",
        "13629.8",
        "13629.8",
        "13623.9",
        "13623.9",
        "10.02346732"
    ],
    [
        "2020-11-01T08:03:00.000Z",
        "13622.7",
        "13622.7",
        "13616",
        "13616",
        "8.74319885"
    ],
    [
        "2020-11-01T08:04:00.000Z",
        "13616",
        "13619.9",
        "13613.9",
        "13619.8",
        "9.76941366"
    ],
    [
        "2020-11-01T08:05:00.000Z",
        "13619.9",
        "13635.6",
        "13619.9",
        "13632.4",
        "6.92625142"
    ],
    [
        "2020-11-01T08:06:00.000Z",
        "13632.5",
        "13648.2",
        "13632.5",
        "13639.5",
        "4.19304477"
    ],
    [
        "2020-11-01T08:07:00.000Z",
        "13639.4",
        "13642.8",
        "13639.4",
        "13642.7",
        "2.33670681"
    ],
    [
        "2020-11-01T08:08:00.000Z",
        "13642.8",
        "13642.8",
        "13633.3",
        "13637.2",
        "6.47479982"
    ],
    [
        "2020-11-01T08:09:00.000Z",
        "13637.2",
        "13637.2",
        "13614",
        "13617.3",
        "3.56678007"
    ],
    [
        "2020-11-01T08:10:00.000Z",
        "13617.8",
        "13637.4",
        "13617.8",
        "13637.3",
        "3.2180435"
    ],
    [
        "2020-11-01T08:11:00.000Z",
        "13634.5",
        "13634.5",
        "13623.8",
        "13632.4",
        "1.15912098"
    ],
    [
        "2020-11-01T08:12:00.000Z",
        "13631.3",
        "13631.3",
        "13626",
        "13629.4",
        "0.30306031"
    ],
    [
        "2020-11-01T08:13:00.000Z",
        "13630.3",
        "13633.4",
        "13628.9",
        "13629.8",
        "0.38174197"
    ],
    [
        "2020-11-01T08:14:00.000Z",
        "13629.7",
        "13629.7",
        "13614.9",
        "13618.8",
        "1.81803739"
    ],
    [
        "2020-11-01T08:15:00.000Z",
        "13619.7",
        "13625.9",
        "13616.4",
        "13616.4",
        "8.52924909"
    ],
    [
        "2020-11-01T08:16:00.000Z",
        "13616.3",
        "13616.3",
        "13609.2",
        "13615.8",
        "9.48780633"
    ],
    [
        "2020-11-01T08:17:00.000Z",
        "13615.8",
        "13630.4",
        "13615.8",
        "13624.4",
        "29.91474327"
    ],
    [
        "2020-11-01T08:18:00.000Z",
        "13623.9",
        "13623.9",
        "13614.9",
        "13614.9",
        "1.46503455"
    ],
    [
        "2020-11-01T08:19:00.000Z",
        "13613.2",
        "13613.2",
        "13605.6",
        "13610.1",
        "3.27634391"
    ],
    [
        "2020-11-01T08:20:00.000Z",
        "13610.1",
        "13610.1",
        "13605.5",
        "13605.5",
        "28.97157575"
    ],
    [
        "2020-11-01T08:21:00.000Z",
        "13606.9",
        "13615.5",
        "13606.9",
        "13615.5",
        "38.58423341"
    ],
    [
        "2020-11-01T08:22:00.000Z",
        "13617",
        "13619.1",
        "13617",
        "13618",
        "26.62116369"
    ],
    [
        "2020-11-01T08:23:00.000Z",
        "13618",
        "13618.3",
        "13612.7",
        "13612.7",
        "7.03073484"
    ],
    [
        "2020-11-01T08:24:00.000Z",
        "13612.8",
        "13617",
        "13612.7",
        "13617",
        "1.79440073"
    ],
    [
        "2020-11-01T08:25:00.000Z",
        "13617",
        "13617",
        "13608.1",
        "13608.1",
        "2.7394287"
    ],
    [
        "2020-11-01T08:26:00.000Z",
        "13609.2",
        "13609.7",
        "13608",
        "13608.2",
        "1.98511488"
    ],
    [
        "2020-11-01T08:27:00.000Z",
        "13608.1",
        "13609.9",
        "13605.5",
        "13605.5",
        "2.95094451"
    ],
    [
        "2020-11-01T08:28:00.000Z",
        "13605.5",
        "13607.3",
        "13600.7",
        "13607.3",
        "18.91963833"
    ],
    [
        "2020-11-01T08:29:00.000Z",
        "13608.8",
        "13608.9",
        "13608.8",
        "13608.8",
        "8.10386296"
    ],
    [
        "2020-11-01T08:30:00.000Z",
        "13608.9",
        "13609.3",
        "13605.2",
        "13605.2",
        "53.81450559"
    ],
    [
        "2020-11-01T08:31:00.000Z",
        "13605.2",
        "13606.1",
        "13597.8",
        "13598",
        "12.72019489"
    ],
    [
        "2020-11-01T08:32:00.000Z",
        "13597.5",
        "13597.6",
        "13595.1",
        "13595.1",
        "0.59997089"
    ],
    [
        "2020-11-01T08:33:00.000Z",
        "13594.7",
        "13594.7",
        "13587.8",
        "13592.2",
        "10.63103187"
    ],
    [
        "2020-11-01T08:34:00.000Z",
        "13593.1",
        "13602.2",
        "13593.1",
        "13596.7",
        "6.50403831"
    ],
    [
        "2020-11-01T08:35:00.000Z",
        "13597.8",
        "13608.7",
        "13597.8",
        "13608.7",
        "16.10582541"
    ],
    [
        "2020-11-01T08:36:00.000Z",
        "13608.7",
        "13616.4",
        "13608.7",
        "13616.4",
        "14.01678133"
    ],
    [
        "2020-11-01T08:37:00.000Z",
        "13616.4",
        "13617.8",
        "13610.3",
        "13611.4",
        "6.42212988"
    ],
    [
        "2020-11-01T08:38:00.000Z",
        "13610.9",
        "13610.9",
        "13606.1",
        "13606.1",
        "2.23352585"
    ],
    [
        "2020-11-01T08:39:00.000Z",
        "13606.1",
        "13616.4",
        "13606.1",
        "13614.9",
        "28.2298447"
    ],
    [
        "2020-11-01T08:40:00.000Z",
        "13614.9",
        "13617.1",
        "13614.9",
        "13617.1",
        "11.29652378"
    ],
    [
        "2020-11-01T08:41:00.000Z",
        "13616.3",
        "13619",
        "13616.3",
        "13619",
        "0.87992185"
    ],
    [
        "2020-11-01T08:42:00.000Z",
        "13618.9",
        "13620.4",
        "13618.9",
        "13620.3",
        "2.00076179"
    ],
    [
        "2020-11-01T08:43:00.000Z",
        "13620.3",
        "13620.3",
        "13618.3",
        "13619.8",
        "6.47671233"
    ],
    [
        "2020-11-01T08:44:00.000Z",
        "13619.8",
        "13620.4",
        "13615.6",
        "13615.6",
        "2.79555953"
    ],
    [
        "2020-11-01T08:45:00.000Z",
        "13613.6",
        "13613.6",
        "13606.5",
        "13606.5",
        "0.28647115"
    ],
    [
        "2020-11-01T08:46:00.000Z",
        "13606.5",
        "13606.5",
        "13599.9",
        "13599.9",
        "2.47020927"
    ],
    [
        "2020-11-01T08:47:00.000Z",
        "13599.9",
        "13599.9",
        "13595.7",
        "13597",
        "4.23121168"
    ],
    [
        "2020-11-01T08:48:00.000Z",
        "13597",
        "13597.1",
        "13597",
        "13597",
        "0.07011996"
    ],
    [
        "2020-11-01T08:49:00.000Z",
        "13597.1",
        "13603.2",
        "13597",
        "13603.2",
        "2.78424861"
    ],
    [
        "2020-11-01T08:50:00.000Z",
        "13603.2",
        "13603.2",
        "13603.1",
        "13603.1",
        "1.56714929"
    ],
    [
        "2020-11-01T08:51:00.000Z",
        "13603.1",
        "13603.2",
        "13602.7",
        "13602.7",
        "0.46101106"
    ],
    [
        "2020-11-01T08:52:00.000Z",
        "13600.6",
        "13600.6",
        "13593.3",
        "13595.2",
        "6.72247598"
    ],
    [
        "2020-11-01T08:53:00.000Z",
        "13594.6",
        "13596.6",
        "13585.2",
        "13594.9",
        "3.04859869"
    ],
    [
        "2020-11-01T08:54:00.000Z",
        "13595",
        "13603.2",
        "13594.9",
        "13603.1",
        "47.66897626"
    ],
    [
        "2020-11-01T08:55:00.000Z",
        "13603.1",
        "13606.4",
        "13600.1",
        "13600.1",
        "12.53760581"
    ],
    [
        "2020-11-01T08:56:00.000Z",
        "13600.3",
        "13600.3",
        "13591.9",
        "13592",
        "5.72108836"
    ],
    [
        "2020-11-01T08:57:00.000Z",
        "13592",
        "13598.1",
        "13591.9",
        "13597",
        "5.43220981"
    ],
    [
        "2020-11-01T08:58:00.000Z",
        "13597",
        "13604.6",
        "13595.3",
        "13604.5",
        "39.21191565"
    ],
    [
        "2020-11-01T08:59:00.000Z",
        "13604.5",
        "13606.3",
        "13604.4",
        "13606.2",
        "31.39143445"
    ],
    [
        "2020-11-01T09:00:00.000Z",
        "13606.2",
        "13612.3",
        "13606.2",
        "13610.5",
        "2.19421293"
    ],
    [
        "2020-11-01T09:01:00.000Z",
        "13610.5",
        "13617.9",
        "13610.5",
        "13617.9",
        "60.68416297"
    ],
    [
        "2020-11-01T09:02:00.000Z",
        "13619",
        "13619",
        "13615.6",
        "13616.7",
        "7.07603101"
    ],
    [
        "2020-11-01T09:03:00.000Z",
        "13615.8",
        "13616.1",
        "13609.4",
        "13610.7",
        "1.62175233"
    ],
    [
        "2020-11-01T09:04:00.000Z",
        "13610.7",
        "13610.7",
        "13595.6",
        "13597.7",
        "13.29960041"
    ],
    [
        "2020-11-01T09:05:00.000Z",
        "13597.7",
        "13603.1",
        "13597.6",
        "13598.1",
        "20.18295727"
    ],
    [
        "2020-11-01T09:06:00.000Z",
        "13598.2",
        "13598.2",
        "13590.7",
        "13590.7",
        "4.64382507"
    ],
    [
        "2020-11-01T09:07:00.000Z",
        "13591.9",
        "13598.7",
        "13591.9",
        "13594.5",
        "0.97634205"
    ],
    [
        "2020-11-01T09:08:00.000Z",
        "13591.9",
        "13593.6",
        "13590.7",
        "13590.7",
        "1.86050059"
    ],
    [
        "2020-11-01T09:09:00.000Z",
        "13590.7",
        "13590.7",
        "13578.5",
        "13579.9",
        "5.33201312"
    ],
    [
        "2020-11-01T09:10:00.000Z",
        "13579",
        "13579",
        "13559.6",
        "13576.7",
        "4.98135409"
    ],
    [
        "2020-11-01T09:11:00.000Z",
        "13576.8",
        "13588.3",
        "13576.7",
        "13586.6",
        "5.30690919"
    ],
    [
        "2020-11-01T09:12:00.000Z",
        "13586.6",
        "13590.1",
        "13584.1",
        "13588.9",
        "4.76444489"
    ],
    [
        "2020-11-01T09:13:00.000Z",
        "13589",
        "13589",
        "13588.3",
        "13588.4",
        "4.780681"
    ],
    [
        "2020-11-01T09:14:00.000Z",
        "13588.3",
        "13588.3",
        "13585.2",
        "13585.2",
        "9.45050494"
    ],
    [
        "2020-11-01T09:15:00.000Z",
        "13585.1",
        "13585.1",
        "13567.4",
        "13574.7",
        "5.77854871"
    ],
    [
        "2020-11-01T09:16:00.000Z",
        "13574.7",
        "13581.4",
        "13574.7",
        "13579.4",
        "6.74337914"
    ],
    [
        "2020-11-01T09:17:00.000Z",
        "13580.7",
        "13580.7",
        "13571.1",
        "13576.6",
        "1.78252977"
    ],
    [
        "2020-11-01T09:18:00.000Z",
        "13576.2",
        "13576.2",
        "13571.5",
        "13573",
        "11.17697192"
    ],
    [
        "2020-11-01T09:19:00.000Z",
        "13572.9",
        "13572.9",
        "13565.9",
        "13568",
        "11.56693722"
    ],
    [
        "2020-11-01T09:20:00.000Z",
        "13568",
        "13575.4",
        "13568",
        "13575.3",
        "3.93358106"
    ],
    [
        "2020-11-01T09:21:00.000Z",
        "13575.4",
        "13578.3",
        "13575.3",
        "13578.3",
        "5.2788115"
    ],
    [
        "2020-11-01T09:22:00.000Z",
        "13578.3",
        "13584.2",
        "13578.3",
        "13584.2",
        "5.34541926"
    ],
    [
        "2020-11-01T09:23:00.000Z",
        "13584.8",
        "13588.1",
        "13582.2",
        "13588.1",
        "9.69053945"
    ],
    [
        "2020-11-01T09:24:00.000Z",
        "13589.7",
        "13593.3",
        "13585.3",
        "13585.3",
        "22.95873532"
    ],
    [
        "2020-11-01T09:25:00.000Z",
        "13585.3",
        "13585.4",
        "13583.7",
        "13583.7",
        "4.17365251"
    ],
    [
        "2020-11-01T09:26:00.000Z",
        "13582.4",
        "13584.9",
        "13580.3",
        "13584.5",
        "6.80166946"
    ],
    [
        "2020-11-01T09:27:00.000Z",
        "13584.6",
        "13591.8",
        "13584.6",
        "13588.9",
        "1.35642678"
    ],
    [
        "2020-11-01T09:28:00.000Z",
        "13588.8",
        "13590.3",
        "13586.3",
        "13586.3",
        "0.50939833"
    ],
    [
        "2020-11-01T09:29:00.000Z",
        "13583.7",
        "13587.2",
        "13580.3",
        "13587.1",
        "35.44210865"
    ],
    [
        "2020-11-01T09:30:00.000Z",
        "13587.1",
        "13588.2",
        "13583.9",
        "13588.1",
        "46.49362698"
    ],
    [
        "2020-11-01T09:31:00.000Z",
        "13588.2",
        "13592.3",
        "13588.1",
        "13592.2",
        "2.39927398"
    ],
    [
        "2020-11-01T09:32:00.000Z",
        "13592.2",
        "13592.2",
        "13584.2",
        "13584.2",
        "6.04247032"
    ],
    [
        "2020-11-01T09:33:00.000Z",
        "13584.7",
        "13588.5",
        "13584.7",
        "13588.5",
        "2.98589486"
    ],
    [
        "2020-11-01T09:34:00.000Z",
        "13590.1",
        "13590.1",
        "13590",
        "13590",
        "5.813592"
    ],
    [
        "2020-11-01T09:35:00.000Z",
        "13590",
        "13593.6",
        "13590",
        "13593.6",
        "108.93037482"
    ],
    [
        "2020-11-01T09:36:00.000Z",
        "13593.6",
        "13598.7",
        "13593.5",
        "13598.6",
        "39.91682055"
    ],
    [
        "2020-11-01T09:37:00.000Z",
        "13598.7",
        "13601.1",
        "13595.6",
        "13595.6",
        "6.09528049"
    ],
    [
        "2020-11-01T09:38:00.000Z",
        "13594.7",
        "13599.4",
        "13594.2",
        "13594.2",
        "8.69108274"
    ],
    [
        "2020-11-01T09:39:00.000Z",
        "13594.2",
        "13594.2",
        "13592.6",
        "13592.6",
        "25.38952905"
    ],
    [
        "2020-11-01T09:40:00.000Z",
        "13592.3",
        "13592.3",
        "13585.5",
        "13585.5",
        "0.32980402"
    ],
    [
        "2020-11-01T09:41:00.000Z",
        "13585.5",
        "13588.4",
        "13585.1",
        "13588.3",
        "5.29318367"
    ],
    [
        "2020-11-01T09:42:00.000Z",
        "13587.9",
        "13587.9",
        "13585.1",
        "13585.1",
        "3.2867502"
    ],
    [
        "2020-11-01T09:43:00.000Z",
        "13585.1",
        "13589.9",
        "13579.9",
        "13585.2",
        "23.4405997"
    ],
    [
        "2020-11-01T09:44:00.000Z",
        "13585.3",
        "13589.9",
        "13583.6",
        "13589.9",
        "4.17509739"
    ],
    [
        "2020-11-01T09:45:00.000Z",
        "13590.4",
        "13594.1",
        "13590.4",
        "13593.5",
        "1.27622962"
    ],
    [
        "2020-11-01T09:46:00.000Z",
        "13593.4",
        "13595.1",
        "13587.4",
        "13591.1",
        "2.92360496"
    ],
    [
        "2020-11-01T09:47:00.000Z",
        "13590.7",
        "13590.7",
        "13585.1",
        "13585.1",
        "2.17892922"
    ],
    [
        "2020-11-01T09:48:00.000Z",
        "13585.1",
        "13585.2",
        "13573.2",
        "13577.3",
        "3.35174775"
    ],
    [
        "2020-11-01T09:49:00.000Z",
        "13577.2",
        "13582",
        "13577.2",
        "13582",
        "2.73700456"
    ],
    [
        "2020-11-01T09:50:00.000Z",
        "13582.3",
        "13590.3",
        "13582.3",
        "13590.3",
        "9.02682337"
    ],
    [
        "2020-11-01T09:51:00.000Z",
        "13590.3",
        "13590.3",
        "13583",
        "13587.7",
        "6.96763702"
    ],
    [
        "2020-11-01T09:52:00.000Z",
        "13589.9",
        "13589.9",
        "13583.7",
        "13583.7",
        "3.6452062"
    ],
    [
        "2020-11-01T09:53:00.000Z",
        "13582.6",
        "13582.7",
        "13582.2",
        "13582.2",
        "0.50734008"
    ],
    [
        "2020-11-01T09:54:00.000Z",
        "13582.2",
        "13582.2",
        "13559.4",
        "13564.7",
        "5.34265404"
    ],
    [
        "2020-11-01T09:55:00.000Z",
        "13564.8",
        "13577.3",
        "13564.8",
        "13576.3",
        "9.27088083"
    ],
    [
        "2020-11-01T09:56:00.000Z",
        "13576.3",
        "13578",
        "13568.2",
        "13578",
        "4.44231762"
    ],
    [
        "2020-11-01T09:57:00.000Z",
        "13575.8",
        "13579.5",
        "13552.8",
        "13553.2",
        "7.95744501"
    ],
    [
        "2020-11-01T09:58:00.000Z",
        "13553.2",
        "13558.6",
        "13545.7",
        "13558.6",
        "21.2068212"
    ],
    [
        "2020-11-01T09:59:00.000Z",
        "13558.6",
        "13560.2",
        "13545.9",
        "13548",
        "43.41275634"
    ],
    [
        "2020-11-01T10:00:00.000Z",
        "13548",
        "13555.2",
        "13547.9",
        "13555.2",
        "22.65710461"
    ],
    [
        "2020-11-01T10:01:00.000Z",
        "13555.1",
        "13571.5",
        "13552.2",
        "13569.9",
        "21.7537075"
    ],
    [
        "2020-11-01T10:02:00.000Z",
        "13571.5",
        "13573.2",
        "13557",
        "13568.2",
        "3.39043079"
    ],
    [
        "2020-11-01T10:03:00.000Z",
        "13568.3",
        "13571.5",
        "13563.9",
        "13571.5",
        "30.00838312"
    ],
    [
        "2020-11-01T10:04:00.000Z",
        "13571.5",
        "13576.9",
        "13571.5",
        "13576.2",
        "12.77674989"
    ],
    [
        "2020-11-01T10:05:00.000Z",
        "13576.3",
        "13583.5",
        "13575.3",
        "13577.5",
        "10.42660561"
    ],
    [
        "2020-11-01T10:06:00.000Z",
        "13577.5",
        "13578.8",
        "13574.8",
        "13578.5",
        "4.78817789"
    ],
    [
        "2020-11-01T10:07:00.000Z",
        "13580.7",
        "13586.2",
        "13578.3",
        "13578.3",
        "34.09139742"
    ],
    [
        "2020-11-01T10:08:00.000Z",
        "13578.3",
        "13579",
        "13574.8",
        "13577.7",
        "12.00245481"
    ],
    [
        "2020-11-01T10:09:00.000Z",
        "13577.7",
        "13581.1",
        "13572.7",
        "13572.7",
        "30.171706"
    ],
    [
        "2020-11-01T10:10:00.000Z",
        "13572.7",
        "13572.7",
        "13559.9",
        "13559.9",
        "78.20214412"
    ],
    [
        "2020-11-01T10:11:00.000Z",
        "13559.9",
        "13559.9",
        "13554.3",
        "13557",
        "24.57232073"
    ],
    [
        "2020-11-01T10:12:00.000Z",
        "13557",
        "13579.2",
        "13557",
        "13570.5",
        "15.35844286"
    ],
    [
        "2020-11-01T10:13:00.000Z",
        "13570.4",
        "13571.4",
        "13568.1",
        "13570.3",
        "20.91959264"
    ],
    [
        "2020-11-01T10:14:00.000Z",
        "13570.3",
        "13570.4",
        "13560.7",
        "13562.6",
        "4.6972784"
    ],
    [
        "2020-11-01T10:15:00.000Z",
        "13562.6",
        "13562.6",
        "13559.1",
        "13559.2",
        "4.99825337"
    ],
    [
        "2020-11-01T10:16:00.000Z",
        "13559.1",
        "13559.1",
        "13554.7",
        "13554.7",
        "55.58473443"
    ],
    [
        "2020-11-01T10:17:00.000Z",
        "13554.5",
        "13554.5",
        "13554.4",
        "13554.4",
        "0.16807392"
    ],
    [
        "2020-11-01T10:18:00.000Z",
        "13554.4",
        "13560.4",
        "13554.3",
        "13560.3",
        "62.3658224"
    ],
    [
        "2020-11-01T10:19:00.000Z",
        "13560.3",
        "13560.3",
        "13557.7",
        "13559.7",
        "45.45027201"
    ],
    [
        "2020-11-01T10:20:00.000Z",
        "13559.6",
        "13559.8",
        "13558.3",
        "13559.8",
        "3.59002825"
    ],
    [
        "2020-11-01T10:21:00.000Z",
        "13560.4",
        "13560.5",
        "13556.2",
        "13556.2",
        "3.37323256"
    ],
    [
        "2020-11-01T10:22:00.000Z",
        "13556.3",
        "13571",
        "13556.3",
        "13566.5",
        "2.62339058"
    ],
    [
        "2020-11-01T10:23:00.000Z",
        "13566.2",
        "13569.6",
        "13561.7",
        "13569.6",
        "5.64743058"
    ],
    [
        "2020-11-01T10:24:00.000Z",
        "13571.3",
        "13578",
        "13571.3",
        "13573.2",
        "23.35454471"
    ],
    [
        "2020-11-01T10:25:00.000Z",
        "13573.2",
        "13576.8",
        "13572.4",
        "13576.8",
        "0.11108203"
    ],
    [
        "2020-11-01T10:26:00.000Z",
        "13576.8",
        "13580.1",
        "13576.8",
        "13580.1",
        "5.79045401"
    ],
    [
        "2020-11-01T10:27:00.000Z",
        "13582.2",
        "13582.2",
        "13575.9",
        "13575.9",
        "1.24836225"
    ],
    [
        "2020-11-01T10:28:00.000Z",
        "13575.8",
        "13585",
        "13575.8",
        "13582.6",
        "13.19288276"
    ],
    [
        "2020-11-01T10:29:00.000Z",
        "13580.9",
        "13580.9",
        "13578.5",
        "13579.7",
        "0.97452675"
    ],
    [
        "2020-11-01T10:30:00.000Z",
        "13579.1",
        "13581.9",
        "13578.2",
        "13581.2",
        "17.5556259"
    ],
    [
        "2020-11-01T10:31:00.000Z",
        "13581.2",
        "13587.8",
        "13580.5",
        "13587.8",
        "96.73863652"
    ],
    [
        "2020-11-01T10:32:00.000Z",
        "13588",
        "13591.9",
        "13587.9",
        "13590.3",
        "7.91218178"
    ],
    [
        "2020-11-01T10:33:00.000Z",
        "13590.3",
        "13595.2",
        "13590.2",
        "13595.2",
        "5.46848194"
    ],
    [
        "2020-11-01T10:34:00.000Z",
        "13595.1",
        "13595.9",
        "13586.8",
        "13586.8",
        "2.32304298"
    ],
    [
        "2020-11-01T10:35:00.000Z",
        "13585.2",
        "13587.2",
        "13585.2",
        "13586.2",
        "13.58064118"
    ],
    [
        "2020-11-01T10:36:00.000Z",
        "13586",
        "13586",
        "13578.6",
        "13578.6",
        "8.58219574"
    ],
    [
        "2020-11-01T10:37:00.000Z",
        "13578.5",
        "13589.2",
        "13578.5",
        "13589.2",
        "8.24728541"
    ],
    [
        "2020-11-01T10:38:00.000Z",
        "13590.4",
        "13603.3",
        "13590.4",
        "13603.3",
        "5.08301187"
    ],
    [
        "2020-11-01T10:39:00.000Z",
        "13603.3",
        "13611.2",
        "13603.3",
        "13611.2",
        "9.29513851"
    ],
    [
        "2020-11-01T10:40:00.000Z",
        "13611.2",
        "13614",
        "13602.8",
        "13602.8",
        "26.64133703"
    ],
    [
        "2020-11-01T10:41:00.000Z",
        "13602.8",
        "13607.9",
        "13600.1",
        "13605.4",
        "12.23136788"
    ],
    [
        "2020-11-01T10:42:00.000Z",
        "13605.3",
        "13605.4",
        "13595.7",
        "13597.4",
        "68.43782294"
    ],
    [
        "2020-11-01T10:43:00.000Z",
        "13597.4",
        "13608.7",
        "13597.4",
        "13608.7",
        "39.2199442"
    ],
    [
        "2020-11-01T10:44:00.000Z",
        "13608.8",
        "13609.5",
        "13605.4",
        "13605.5",
        "63.93350375"
    ],
    [
        "2020-11-01T10:45:00.000Z",
        "13605.5",
        "13605.5",
        "13599.4",
        "13600.4",
        "3.18564775"
    ],
    [
        "2020-11-01T10:46:00.000Z",
        "13600.4",
        "13600.9",
        "13595.1",
        "13600.9",
        "110.28503833"
    ],
    [
        "2020-11-01T10:47:00.000Z",
        "13601",
        "13609.2",
        "13601",
        "13608.1",
        "2.82927215"
    ],
    [
        "2020-11-01T10:48:00.000Z",
        "13608.1",
        "13610",
        "13608",
        "13610",
        "126.6934799"
    ],
    [
        "2020-11-01T10:49:00.000Z",
        "13610",
        "13611.1",
        "13610",
        "13610.8",
        "58.50863541",
        "\uD83E\uDD14 \uD83E\uDD14 \uD83E\uDD14"
    ],
    [
        "2020-11-01T10:50:00.000Z",
        "13610.8",
        "13612.3",
        "13610.8",
        "13612.3",
        "0.16928899"
    ],
    [
        "2020-11-01T10:51:00.000Z",
        "13612.2",
        "13615.7",
        "13612.2",
        "13615.6",
        "37.07162887"
    ],
    [
        "2020-11-01T10:52:00.000Z",
        "13615.7",
        "13616.5",
        "13615.6",
        "13616.5",
        "0.17411394"
    ],
    [
        "2020-11-01T10:53:00.000Z",
        "13616.6",
        "13616.6",
        "13609.2",
        "13609.2",
        "2.64310628"
    ],
    [
        "2020-11-01T10:54:00.000Z",
        "13610.7",
        "13610.8",
        "13605.5",
        "13607.3",
        "87.7252459"
    ],
    [
        "2020-11-01T10:55:00.000Z",
        "13607.2",
        "13611",
        "13607.2",
        "13609.3",
        "14.06138256"
    ],
    [
        "2020-11-01T10:56:00.000Z",
        "13609.3",
        "13609.4",
        "13607.4",
        "13607.7",
        "11.06708171"
    ],
    [
        "2020-11-01T10:57:00.000Z",
        "13608.7",
        "13608.7",
        "13598.7",
        "13598.8",
        "11.18481028"
    ],
    [
        "2020-11-01T10:58:00.000Z",
        "13598.8",
        "13600.8",
        "13598.8",
        "13600.8",
        "3.35707236"
    ],
    [
        "2020-11-01T10:59:00.000Z",
        "13600.8",
        "13601.2",
        "13599.6",
        "13600.6",
        "1.43001287"
    ],
    [
        "2020-11-01T11:00:00.000Z",
        "13600.2",
        "13617.7",
        "13600.2",
        "13617.7",
        "10.82618612"
    ],
    [
        "2020-11-01T11:01:00.000Z",
        "13617.7",
        "13617.7",
        "13613.4",
        "13614.1",
        "8.94306765"
    ],
    [
        "2020-11-01T11:02:00.000Z",
        "13614.1",
        "13619.8",
        "13613.8",
        "13619.8",
        "96.75352637"
    ],
    [
        "2020-11-01T11:03:00.000Z",
        "13619.8",
        "13638",
        "13619.8",
        "13638",
        "9.73984281"
    ],
    [
        "2020-11-01T11:04:00.000Z",
        "13637.9",
        "13640",
        "13628.2",
        "13628.3",
        "2.94549805"
    ],
    [
        "2020-11-01T11:05:00.000Z",
        "13628.4",
        "13633",
        "13625.9",
        "13626",
        "9.69283545"
    ],
    [
        "2020-11-01T11:06:00.000Z",
        "13625.9",
        "13629.8",
        "13621.8",
        "13622.8",
        "42.571733"
    ],
    [
        "2020-11-01T11:07:00.000Z",
        "13622.2",
        "13628.7",
        "13622.2",
        "13628.7",
        "7.47836142"
    ],
    [
        "2020-11-01T11:08:00.000Z",
        "13629.2",
        "13643.2",
        "13629.2",
        "13643.2",
        "22.98604026"
    ],
    [
        "2020-11-01T11:09:00.000Z",
        "13643.1",
        "13653.9",
        "13643.1",
        "13653.8",
        "8.0048584"
    ],
    [
        "2020-11-01T11:10:00.000Z",
        "13653.9",
        "13653.9",
        "13646.3",
        "13649.9",
        "10.26871131"
    ],
    [
        "2020-11-01T11:11:00.000Z",
        "13649.9",
        "13650",
        "13639.5",
        "13646.1",
        "11.29439131"
    ],
    [
        "2020-11-01T11:12:00.000Z",
        "13646",
        "13646.1",
        "13643.8",
        "13644.1",
        "15.77858976"
    ],
    [
        "2020-11-01T11:13:00.000Z",
        "13644.1",
        "13644.2",
        "13639.6",
        "13639.6",
        "10.91534645"
    ],
    [
        "2020-11-01T11:14:00.000Z",
        "13639.5",
        "13643.6",
        "13634.9",
        "13643.6",
        "0.89684747"
    ],
    [
        "2020-11-01T11:15:00.000Z",
        "13643.5",
        "13646.3",
        "13639.1",
        "13646.1",
        "47.63393845"
    ],
    [
        "2020-11-01T11:16:00.000Z",
        "13646.1",
        "13653.9",
        "13646.1",
        "13653.9",
        "156.07276089"
    ],
    [
        "2020-11-01T11:17:00.000Z",
        "13653.9",
        "13653.9",
        "13640.5",
        "13640.5",
        "177.07416224"
    ],
    [
        "2020-11-01T11:18:00.000Z",
        "13640.5",
        "13640.5",
        "13625.9",
        "13634.8",
        "12.69848112"
    ],
    [
        "2020-11-01T11:19:00.000Z",
        "13634.8",
        "13639.4",
        "13628.3",
        "13629.7",
        "16.62618425"
    ],
    [
        "2020-11-01T11:20:00.000Z",
        "13629.7",
        "13629.7",
        "13621.4",
        "13621.4",
        "17.9715738"
    ],
    [
        "2020-11-01T11:21:00.000Z",
        "13621.4",
        "13621.4",
        "13612.3",
        "13613.6",
        "1.6424556"
    ],
    [
        "2020-11-01T11:22:00.000Z",
        "13613.7",
        "13625",
        "13607.9",
        "13617.2",
        "11.60958748"
    ],
    [
        "2020-11-01T11:23:00.000Z",
        "13617.2",
        "13617.4",
        "13607.3",
        "13617.4",
        "0.56373064"
    ],
    [
        "2020-11-01T11:24:00.000Z",
        "13616.6",
        "13616.6",
        "13596",
        "13596",
        "7.96478021"
    ],
    [
        "2020-11-01T11:25:00.000Z",
        "13596.1",
        "13605.4",
        "13594.4",
        "13601.7",
        "80.13463532"
    ],
    [
        "2020-11-01T11:26:00.000Z",
        "13601.7",
        "13603.8",
        "13599.1",
        "13602.8",
        "29.92398275"
    ],
    [
        "2020-11-01T11:27:00.000Z",
        "13602.8",
        "13605.5",
        "13592",
        "13592",
        "18.02908778"
    ],
    [
        "2020-11-01T11:28:00.000Z",
        "13592",
        "13592",
        "13580.8",
        "13580.8",
        "5.78518407"
    ],
    [
        "2020-11-01T11:29:00.000Z",
        "13580.7",
        "13583.8",
        "13571.5",
        "13571.6",
        "13.20777075"
    ],
    [
        "2020-11-01T11:30:00.000Z",
        "13571.5",
        "13587",
        "13561.8",
        "13583.3",
        "3.25576462"
    ],
    [
        "2020-11-01T11:31:00.000Z",
        "13583.3",
        "13583.5",
        "13572.1",
        "13581.8",
        "2.0456993"
    ],
    [
        "2020-11-01T11:32:00.000Z",
        "13583.9",
        "13585.1",
        "13569.5",
        "13573.5",
        "6.41262712"
    ],
    [
        "2020-11-01T11:33:00.000Z",
        "13573.4",
        "13582",
        "13573.4",
        "13578.3",
        "6.16120364"
    ],
    [
        "2020-11-01T11:34:00.000Z",
        "13577.6",
        "13577.6",
        "13572.1",
        "13576.2",
        "43.84298389"
    ],
    [
        "2020-11-01T11:35:00.000Z",
        "13576.2",
        "13580.7",
        "13573.3",
        "13574.9",
        "7.00384878"
    ],
    [
        "2020-11-01T11:36:00.000Z",
        "13574.9",
        "13580",
        "13574.6",
        "13578.2",
        "4.67098819"
    ],
    [
        "2020-11-01T11:37:00.000Z",
        "13578.2",
        "13578.2",
        "13566.2",
        "13566.3",
        "23.98002926"
    ],
    [
        "2020-11-01T11:38:00.000Z",
        "13565.8",
        "13565.8",
        "13560.9",
        "13560.9",
        "3.62681625"
    ],
    [
        "2020-11-01T11:39:00.000Z",
        "13561.3",
        "13573.1",
        "13561.3",
        "13572.9",
        "0.48656976"
    ],
    [
        "2020-11-01T11:40:00.000Z",
        "13572.9",
        "13572.9",
        "13561.4",
        "13561.4",
        "8.37260286"
    ],
    [
        "2020-11-01T11:41:00.000Z",
        "13561.4",
        "13563.1",
        "13560.6",
        "13560.6",
        "6.39911273"
    ],
    [
        "2020-11-01T11:42:00.000Z",
        "13560.2",
        "13560.2",
        "13558.4",
        "13558.5",
        "25.58580251"
    ],
    [
        "2020-11-01T11:43:00.000Z",
        "13558.4",
        "13558.5",
        "13558.3",
        "13558.3",
        "39.47863885"
    ],
    [
        "2020-11-01T11:44:00.000Z",
        "13558.1",
        "13558.1",
        "13530",
        "13545.3",
        "9.46798027"
    ],
    [
        "2020-11-01T11:45:00.000Z",
        "13543.7",
        "13543.8",
        "13530.9",
        "13533.3",
        "17.64531713"
    ],
    [
        "2020-11-01T11:46:00.000Z",
        "13532.3",
        "13541",
        "13531.5",
        "13532.5",
        "3.27266399"
    ],
    [
        "2020-11-01T11:47:00.000Z",
        "13532.5",
        "13540.9",
        "13532.5",
        "13538.7",
        "9.66907663"
    ],
    [
        "2020-11-01T11:48:00.000Z",
        "13539.1",
        "13546.1",
        "13539.1",
        "13543.3",
        "2.45729828"
    ],
    [
        "2020-11-01T11:49:00.000Z",
        "13543.2",
        "13554.4",
        "13543.2",
        "13550",
        "3.93595587"
    ],
    [
        "2020-11-01T11:50:00.000Z",
        "13548.2",
        "13548.3",
        "13537.7",
        "13539.6",
        "6.54493296"
    ],
    [
        "2020-11-01T11:51:00.000Z",
        "13540.6",
        "13540.6",
        "13533.1",
        "13535.8",
        "1.92333327"
    ],
    [
        "2020-11-01T11:52:00.000Z",
        "13535.3",
        "13535.4",
        "13534.2",
        "13534.2",
        "0.38396042"
    ],
    [
        "2020-11-01T11:53:00.000Z",
        "13534.2",
        "13534.4",
        "13533.1",
        "13534.3",
        "2.81999423"
    ],
    [
        "2020-11-01T11:54:00.000Z",
        "13534.4",
        "13547.6",
        "13534.4",
        "13545.1",
        "5.55873559"
    ],
    [
        "2020-11-01T11:55:00.000Z",
        "13544.4",
        "13551.6",
        "13544.4",
        "13551.6",
        "9.82252534"
    ],
    [
        "2020-11-01T11:56:00.000Z",
        "13551.6",
        "13557.6",
        "13551.6",
        "13557.6",
        "2.27093332"
    ]
]
